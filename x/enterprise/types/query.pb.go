// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mainchain/enterprise/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryEnterpriseUndPurchaseOrderRequest is the request type for the Query/EnterpriseUndPurchaseOrder RPC method.
type QueryEnterpriseUndPurchaseOrderRequest struct {
	// purchase_order_id defines the PO to query for.
	PurchaseOrderId uint64 `protobuf:"varint,1,opt,name=purchase_order_id,json=purchaseOrderId,proto3" json:"purchase_order_id,omitempty"`
}

func (m *QueryEnterpriseUndPurchaseOrderRequest) Reset() {
	*m = QueryEnterpriseUndPurchaseOrderRequest{}
}
func (m *QueryEnterpriseUndPurchaseOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEnterpriseUndPurchaseOrderRequest) ProtoMessage()    {}
func (*QueryEnterpriseUndPurchaseOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{2}
}
func (m *QueryEnterpriseUndPurchaseOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEnterpriseUndPurchaseOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEnterpriseUndPurchaseOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEnterpriseUndPurchaseOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEnterpriseUndPurchaseOrderRequest.Merge(m, src)
}
func (m *QueryEnterpriseUndPurchaseOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEnterpriseUndPurchaseOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEnterpriseUndPurchaseOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEnterpriseUndPurchaseOrderRequest proto.InternalMessageInfo

func (m *QueryEnterpriseUndPurchaseOrderRequest) GetPurchaseOrderId() uint64 {
	if m != nil {
		return m.PurchaseOrderId
	}
	return 0
}

// QueryEnterpriseUndPurchaseOrderResponse is the response type for the Query/EnterpriseUndPurchaseOrder RPC method.
type QueryEnterpriseUndPurchaseOrderResponse struct {
	PurchaseOrder EnterpriseUndPurchaseOrder `protobuf:"bytes,1,opt,name=purchase_order,json=purchaseOrder,proto3" json:"purchase_order"`
}

func (m *QueryEnterpriseUndPurchaseOrderResponse) Reset() {
	*m = QueryEnterpriseUndPurchaseOrderResponse{}
}
func (m *QueryEnterpriseUndPurchaseOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEnterpriseUndPurchaseOrderResponse) ProtoMessage()    {}
func (*QueryEnterpriseUndPurchaseOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{3}
}
func (m *QueryEnterpriseUndPurchaseOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEnterpriseUndPurchaseOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEnterpriseUndPurchaseOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEnterpriseUndPurchaseOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEnterpriseUndPurchaseOrderResponse.Merge(m, src)
}
func (m *QueryEnterpriseUndPurchaseOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEnterpriseUndPurchaseOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEnterpriseUndPurchaseOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEnterpriseUndPurchaseOrderResponse proto.InternalMessageInfo

func (m *QueryEnterpriseUndPurchaseOrderResponse) GetPurchaseOrder() EnterpriseUndPurchaseOrder {
	if m != nil {
		return m.PurchaseOrder
	}
	return EnterpriseUndPurchaseOrder{}
}

// QueryEnterpriseUndPurchaseOrdersRequest is the request type for the Query/EnterpriseUndPurchaseOrders RPC
// method
type QueryEnterpriseUndPurchaseOrdersRequest struct {
	Pagination *query.PageRequest  `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Purchaser  string              `protobuf:"bytes,2,opt,name=purchaser,proto3" json:"purchaser,omitempty"`
	Status     PurchaseOrderStatus `protobuf:"varint,3,opt,name=status,proto3,enum=mainchain.enterprise.v1.PurchaseOrderStatus" json:"status,omitempty"`
}

func (m *QueryEnterpriseUndPurchaseOrdersRequest) Reset() {
	*m = QueryEnterpriseUndPurchaseOrdersRequest{}
}
func (m *QueryEnterpriseUndPurchaseOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEnterpriseUndPurchaseOrdersRequest) ProtoMessage()    {}
func (*QueryEnterpriseUndPurchaseOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{4}
}
func (m *QueryEnterpriseUndPurchaseOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEnterpriseUndPurchaseOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEnterpriseUndPurchaseOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEnterpriseUndPurchaseOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEnterpriseUndPurchaseOrdersRequest.Merge(m, src)
}
func (m *QueryEnterpriseUndPurchaseOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEnterpriseUndPurchaseOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEnterpriseUndPurchaseOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEnterpriseUndPurchaseOrdersRequest proto.InternalMessageInfo

func (m *QueryEnterpriseUndPurchaseOrdersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryEnterpriseUndPurchaseOrdersRequest) GetPurchaser() string {
	if m != nil {
		return m.Purchaser
	}
	return ""
}

func (m *QueryEnterpriseUndPurchaseOrdersRequest) GetStatus() PurchaseOrderStatus {
	if m != nil {
		return m.Status
	}
	return StatusNil
}

// QueryEnterpriseUndPurchaseOrdersResponse is the response type for the Query/EnterpriseUndPurchaseOrders RPC
// method
type QueryEnterpriseUndPurchaseOrdersResponse struct {
	// purchase_orders is the list of all purchase orders
	PurchaseOrders []EnterpriseUndPurchaseOrder `protobuf:"bytes,1,rep,name=purchase_orders,json=purchaseOrders,proto3" json:"purchase_orders"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryEnterpriseUndPurchaseOrdersResponse) Reset() {
	*m = QueryEnterpriseUndPurchaseOrdersResponse{}
}
func (m *QueryEnterpriseUndPurchaseOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEnterpriseUndPurchaseOrdersResponse) ProtoMessage()    {}
func (*QueryEnterpriseUndPurchaseOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{5}
}
func (m *QueryEnterpriseUndPurchaseOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEnterpriseUndPurchaseOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEnterpriseUndPurchaseOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEnterpriseUndPurchaseOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEnterpriseUndPurchaseOrdersResponse.Merge(m, src)
}
func (m *QueryEnterpriseUndPurchaseOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEnterpriseUndPurchaseOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEnterpriseUndPurchaseOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEnterpriseUndPurchaseOrdersResponse proto.InternalMessageInfo

func (m *QueryEnterpriseUndPurchaseOrdersResponse) GetPurchaseOrders() []EnterpriseUndPurchaseOrder {
	if m != nil {
		return m.PurchaseOrders
	}
	return nil
}

func (m *QueryEnterpriseUndPurchaseOrdersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryLockedUndByAddressRequest is the request type for the Query/LockedUndByAddress RPC method
type QueryLockedUndByAddressRequest struct {
	// owner is the address to query
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryLockedUndByAddressRequest) Reset()         { *m = QueryLockedUndByAddressRequest{} }
func (m *QueryLockedUndByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLockedUndByAddressRequest) ProtoMessage()    {}
func (*QueryLockedUndByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{6}
}
func (m *QueryLockedUndByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockedUndByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockedUndByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockedUndByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockedUndByAddressRequest.Merge(m, src)
}
func (m *QueryLockedUndByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockedUndByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockedUndByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockedUndByAddressRequest proto.InternalMessageInfo

func (m *QueryLockedUndByAddressRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// QueryLockedUndByAddressResponse is the response type for the Query/LockedUndByAddress RPC method
type QueryLockedUndByAddressResponse struct {
	Amount types.Coin `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount"`
}

func (m *QueryLockedUndByAddressResponse) Reset()         { *m = QueryLockedUndByAddressResponse{} }
func (m *QueryLockedUndByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLockedUndByAddressResponse) ProtoMessage()    {}
func (*QueryLockedUndByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{7}
}
func (m *QueryLockedUndByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockedUndByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockedUndByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockedUndByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockedUndByAddressResponse.Merge(m, src)
}
func (m *QueryLockedUndByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockedUndByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockedUndByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockedUndByAddressResponse proto.InternalMessageInfo

func (m *QueryLockedUndByAddressResponse) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

// QueryTotalLockedRequest is the request type for the Query/TotalLocked RPC method
type QueryTotalLockedRequest struct {
}

func (m *QueryTotalLockedRequest) Reset()         { *m = QueryTotalLockedRequest{} }
func (m *QueryTotalLockedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalLockedRequest) ProtoMessage()    {}
func (*QueryTotalLockedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{8}
}
func (m *QueryTotalLockedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalLockedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalLockedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalLockedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalLockedRequest.Merge(m, src)
}
func (m *QueryTotalLockedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalLockedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalLockedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalLockedRequest proto.InternalMessageInfo

// QueryTotalLockedResponse is the response type for the Query/TotalLocked RPC method
type QueryTotalLockedResponse struct {
	Amount types.Coin `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount"`
}

func (m *QueryTotalLockedResponse) Reset()         { *m = QueryTotalLockedResponse{} }
func (m *QueryTotalLockedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalLockedResponse) ProtoMessage()    {}
func (*QueryTotalLockedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{9}
}
func (m *QueryTotalLockedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalLockedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalLockedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalLockedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalLockedResponse.Merge(m, src)
}
func (m *QueryTotalLockedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalLockedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalLockedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalLockedResponse proto.InternalMessageInfo

func (m *QueryTotalLockedResponse) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

// QueryTotalUnlockedRequest is the request type for the Query/TotalUnlocked RPC method
type QueryTotalUnlockedRequest struct {
}

func (m *QueryTotalUnlockedRequest) Reset()         { *m = QueryTotalUnlockedRequest{} }
func (m *QueryTotalUnlockedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalUnlockedRequest) ProtoMessage()    {}
func (*QueryTotalUnlockedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{10}
}
func (m *QueryTotalUnlockedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalUnlockedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalUnlockedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalUnlockedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalUnlockedRequest.Merge(m, src)
}
func (m *QueryTotalUnlockedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalUnlockedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalUnlockedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalUnlockedRequest proto.InternalMessageInfo

// QueryTotalUnlockedResponse is the response type for the Query/TotalUnlocked RPC method
type QueryTotalUnlockedResponse struct {
	Amount types.Coin `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount"`
}

func (m *QueryTotalUnlockedResponse) Reset()         { *m = QueryTotalUnlockedResponse{} }
func (m *QueryTotalUnlockedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalUnlockedResponse) ProtoMessage()    {}
func (*QueryTotalUnlockedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{11}
}
func (m *QueryTotalUnlockedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalUnlockedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalUnlockedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalUnlockedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalUnlockedResponse.Merge(m, src)
}
func (m *QueryTotalUnlockedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalUnlockedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalUnlockedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalUnlockedResponse proto.InternalMessageInfo

func (m *QueryTotalUnlockedResponse) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

// QueryEnterpriseSupplyRequest is the request type for the Query/EnterpriseSupply RPC method
type QueryEnterpriseSupplyRequest struct {
}

func (m *QueryEnterpriseSupplyRequest) Reset()         { *m = QueryEnterpriseSupplyRequest{} }
func (m *QueryEnterpriseSupplyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEnterpriseSupplyRequest) ProtoMessage()    {}
func (*QueryEnterpriseSupplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{12}
}
func (m *QueryEnterpriseSupplyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEnterpriseSupplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEnterpriseSupplyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEnterpriseSupplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEnterpriseSupplyRequest.Merge(m, src)
}
func (m *QueryEnterpriseSupplyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEnterpriseSupplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEnterpriseSupplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEnterpriseSupplyRequest proto.InternalMessageInfo

// QueryEnterpriseSupplyResponse is the response type for the Query/EnterpriseSupply RPC method
type QueryEnterpriseSupplyResponse struct {
	Supply UndSupply `protobuf:"bytes,1,opt,name=supply,proto3" json:"supply"`
}

func (m *QueryEnterpriseSupplyResponse) Reset()         { *m = QueryEnterpriseSupplyResponse{} }
func (m *QueryEnterpriseSupplyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEnterpriseSupplyResponse) ProtoMessage()    {}
func (*QueryEnterpriseSupplyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{13}
}
func (m *QueryEnterpriseSupplyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEnterpriseSupplyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEnterpriseSupplyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEnterpriseSupplyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEnterpriseSupplyResponse.Merge(m, src)
}
func (m *QueryEnterpriseSupplyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEnterpriseSupplyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEnterpriseSupplyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEnterpriseSupplyResponse proto.InternalMessageInfo

func (m *QueryEnterpriseSupplyResponse) GetSupply() UndSupply {
	if m != nil {
		return m.Supply
	}
	return UndSupply{}
}

// QueryTotalSupplyRequest is the request type for the Query/TotalSupply RPC method
type QueryTotalSupplyRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTotalSupplyRequest) Reset()         { *m = QueryTotalSupplyRequest{} }
func (m *QueryTotalSupplyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalSupplyRequest) ProtoMessage()    {}
func (*QueryTotalSupplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{14}
}
func (m *QueryTotalSupplyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalSupplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalSupplyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalSupplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalSupplyRequest.Merge(m, src)
}
func (m *QueryTotalSupplyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalSupplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalSupplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalSupplyRequest proto.InternalMessageInfo

func (m *QueryTotalSupplyRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTotalSupplyResponse is the response type for the Query/TotalSupply RPC method
type QueryTotalSupplyResponse struct {
	Supply     github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=supply,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"supply"`
	Pagination *query.PageResponse                      `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTotalSupplyResponse) Reset()         { *m = QueryTotalSupplyResponse{} }
func (m *QueryTotalSupplyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalSupplyResponse) ProtoMessage()    {}
func (*QueryTotalSupplyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{15}
}
func (m *QueryTotalSupplyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalSupplyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalSupplyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalSupplyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalSupplyResponse.Merge(m, src)
}
func (m *QueryTotalSupplyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalSupplyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalSupplyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalSupplyResponse proto.InternalMessageInfo

func (m *QueryTotalSupplyResponse) GetSupply() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Supply
	}
	return nil
}

func (m *QueryTotalSupplyResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QuerySupplyOfRequest is the request type for the Query/SupplyOf RPC method.
type QuerySupplyOfRequest struct {
	// denom is the coin denom to query balances for.
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QuerySupplyOfRequest) Reset()         { *m = QuerySupplyOfRequest{} }
func (m *QuerySupplyOfRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySupplyOfRequest) ProtoMessage()    {}
func (*QuerySupplyOfRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{16}
}
func (m *QuerySupplyOfRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySupplyOfRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySupplyOfRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySupplyOfRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySupplyOfRequest.Merge(m, src)
}
func (m *QuerySupplyOfRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySupplyOfRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySupplyOfRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySupplyOfRequest proto.InternalMessageInfo

func (m *QuerySupplyOfRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// QuerySupplyOfResponse is the response type for the Query/SupplyOf RPC method.
type QuerySupplyOfResponse struct {
	// amount is the supply of the coin.
	Amount types.Coin `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount"`
}

func (m *QuerySupplyOfResponse) Reset()         { *m = QuerySupplyOfResponse{} }
func (m *QuerySupplyOfResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySupplyOfResponse) ProtoMessage()    {}
func (*QuerySupplyOfResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{17}
}
func (m *QuerySupplyOfResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySupplyOfResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySupplyOfResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySupplyOfResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySupplyOfResponse.Merge(m, src)
}
func (m *QuerySupplyOfResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySupplyOfResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySupplyOfResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySupplyOfResponse proto.InternalMessageInfo

func (m *QuerySupplyOfResponse) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

// QueryWhitelistRequest is the request type for the Query/Whitelist RPC method.
type QueryWhitelistRequest struct {
}

func (m *QueryWhitelistRequest) Reset()         { *m = QueryWhitelistRequest{} }
func (m *QueryWhitelistRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWhitelistRequest) ProtoMessage()    {}
func (*QueryWhitelistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{18}
}
func (m *QueryWhitelistRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWhitelistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWhitelistRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWhitelistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWhitelistRequest.Merge(m, src)
}
func (m *QueryWhitelistRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWhitelistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWhitelistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWhitelistRequest proto.InternalMessageInfo

// QueryWhitelistResponse is the response type for the Query/Whitelist RPC method.
type QueryWhitelistResponse struct {
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *QueryWhitelistResponse) Reset()         { *m = QueryWhitelistResponse{} }
func (m *QueryWhitelistResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWhitelistResponse) ProtoMessage()    {}
func (*QueryWhitelistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{19}
}
func (m *QueryWhitelistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWhitelistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWhitelistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWhitelistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWhitelistResponse.Merge(m, src)
}
func (m *QueryWhitelistResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWhitelistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWhitelistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWhitelistResponse proto.InternalMessageInfo

func (m *QueryWhitelistResponse) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

// QueryWhitelistedRequest is the request type for the Query/Whitelisted RPC method.
type QueryWhitelistedRequest struct {
	// address is the address to query
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryWhitelistedRequest) Reset()         { *m = QueryWhitelistedRequest{} }
func (m *QueryWhitelistedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWhitelistedRequest) ProtoMessage()    {}
func (*QueryWhitelistedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{20}
}
func (m *QueryWhitelistedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWhitelistedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWhitelistedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWhitelistedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWhitelistedRequest.Merge(m, src)
}
func (m *QueryWhitelistedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWhitelistedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWhitelistedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWhitelistedRequest proto.InternalMessageInfo

func (m *QueryWhitelistedRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryWhitelistedResponse is the response type for the Query/Whitelisted RPC method.
type QueryWhitelistedResponse struct {
	Address     string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Whitelisted bool   `protobuf:"varint,2,opt,name=whitelisted,proto3" json:"whitelisted,omitempty"`
}

func (m *QueryWhitelistedResponse) Reset()         { *m = QueryWhitelistedResponse{} }
func (m *QueryWhitelistedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWhitelistedResponse) ProtoMessage()    {}
func (*QueryWhitelistedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{21}
}
func (m *QueryWhitelistedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWhitelistedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWhitelistedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWhitelistedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWhitelistedResponse.Merge(m, src)
}
func (m *QueryWhitelistedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWhitelistedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWhitelistedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWhitelistedResponse proto.InternalMessageInfo

func (m *QueryWhitelistedResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryWhitelistedResponse) GetWhitelisted() bool {
	if m != nil {
		return m.Whitelisted
	}
	return false
}

// QueryEnterpriseAccountRequest is the request type for the Query/EnterpriseAccount RPC method.
type QueryEnterpriseAccountRequest struct {
	// address is the address to query
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryEnterpriseAccountRequest) Reset()         { *m = QueryEnterpriseAccountRequest{} }
func (m *QueryEnterpriseAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEnterpriseAccountRequest) ProtoMessage()    {}
func (*QueryEnterpriseAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{22}
}
func (m *QueryEnterpriseAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEnterpriseAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEnterpriseAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEnterpriseAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEnterpriseAccountRequest.Merge(m, src)
}
func (m *QueryEnterpriseAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEnterpriseAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEnterpriseAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEnterpriseAccountRequest proto.InternalMessageInfo

func (m *QueryEnterpriseAccountRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryEnterpriseAccountResponse is the response type for the Query/EnterpriseAccount RPC method.
type QueryEnterpriseAccountResponse struct {
	Account EnterpriseUserAccount `protobuf:"bytes,1,opt,name=account,proto3" json:"account"`
}

func (m *QueryEnterpriseAccountResponse) Reset()         { *m = QueryEnterpriseAccountResponse{} }
func (m *QueryEnterpriseAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEnterpriseAccountResponse) ProtoMessage()    {}
func (*QueryEnterpriseAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{23}
}
func (m *QueryEnterpriseAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEnterpriseAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEnterpriseAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEnterpriseAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEnterpriseAccountResponse.Merge(m, src)
}
func (m *QueryEnterpriseAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEnterpriseAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEnterpriseAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEnterpriseAccountResponse proto.InternalMessageInfo

func (m *QueryEnterpriseAccountResponse) GetAccount() EnterpriseUserAccount {
	if m != nil {
		return m.Account
	}
	return EnterpriseUserAccount{}
}

// QueryTotalSpentEFUNDRequest is the request type for the Query/TotalSpentEFUND RPC method.
type QueryTotalSpentEFUNDRequest struct {
}

func (m *QueryTotalSpentEFUNDRequest) Reset()         { *m = QueryTotalSpentEFUNDRequest{} }
func (m *QueryTotalSpentEFUNDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalSpentEFUNDRequest) ProtoMessage()    {}
func (*QueryTotalSpentEFUNDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{24}
}
func (m *QueryTotalSpentEFUNDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalSpentEFUNDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalSpentEFUNDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalSpentEFUNDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalSpentEFUNDRequest.Merge(m, src)
}
func (m *QueryTotalSpentEFUNDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalSpentEFUNDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalSpentEFUNDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalSpentEFUNDRequest proto.InternalMessageInfo

// QueryTotalSpentEFUNDResponse is the response type for the Query/TotalSpentEFUND RPC method.
type QueryTotalSpentEFUNDResponse struct {
	Amount types.Coin `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount"`
}

func (m *QueryTotalSpentEFUNDResponse) Reset()         { *m = QueryTotalSpentEFUNDResponse{} }
func (m *QueryTotalSpentEFUNDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalSpentEFUNDResponse) ProtoMessage()    {}
func (*QueryTotalSpentEFUNDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{25}
}
func (m *QueryTotalSpentEFUNDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalSpentEFUNDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalSpentEFUNDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalSpentEFUNDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalSpentEFUNDResponse.Merge(m, src)
}
func (m *QueryTotalSpentEFUNDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalSpentEFUNDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalSpentEFUNDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalSpentEFUNDResponse proto.InternalMessageInfo

func (m *QueryTotalSpentEFUNDResponse) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

// QuerySpentEFUNDByAddressRequest is the request type for the Query/SpentEFUNDByAddress RPC method.
type QuerySpentEFUNDByAddressRequest struct {
	// address is the address to query
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QuerySpentEFUNDByAddressRequest) Reset()         { *m = QuerySpentEFUNDByAddressRequest{} }
func (m *QuerySpentEFUNDByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySpentEFUNDByAddressRequest) ProtoMessage()    {}
func (*QuerySpentEFUNDByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{26}
}
func (m *QuerySpentEFUNDByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpentEFUNDByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpentEFUNDByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpentEFUNDByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpentEFUNDByAddressRequest.Merge(m, src)
}
func (m *QuerySpentEFUNDByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpentEFUNDByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpentEFUNDByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpentEFUNDByAddressRequest proto.InternalMessageInfo

func (m *QuerySpentEFUNDByAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QuerySpentEFUNDByAddressResponse is the response type for the Query/SpentEFUNDByAddress RPC method.
type QuerySpentEFUNDByAddressResponse struct {
	Amount types.Coin `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount"`
}

func (m *QuerySpentEFUNDByAddressResponse) Reset()         { *m = QuerySpentEFUNDByAddressResponse{} }
func (m *QuerySpentEFUNDByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySpentEFUNDByAddressResponse) ProtoMessage()    {}
func (*QuerySpentEFUNDByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4dd8eb5b331b8d2b, []int{27}
}
func (m *QuerySpentEFUNDByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpentEFUNDByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpentEFUNDByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpentEFUNDByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpentEFUNDByAddressResponse.Merge(m, src)
}
func (m *QuerySpentEFUNDByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpentEFUNDByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpentEFUNDByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpentEFUNDByAddressResponse proto.InternalMessageInfo

func (m *QuerySpentEFUNDByAddressResponse) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "mainchain.enterprise.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "mainchain.enterprise.v1.QueryParamsResponse")
	proto.RegisterType((*QueryEnterpriseUndPurchaseOrderRequest)(nil), "mainchain.enterprise.v1.QueryEnterpriseUndPurchaseOrderRequest")
	proto.RegisterType((*QueryEnterpriseUndPurchaseOrderResponse)(nil), "mainchain.enterprise.v1.QueryEnterpriseUndPurchaseOrderResponse")
	proto.RegisterType((*QueryEnterpriseUndPurchaseOrdersRequest)(nil), "mainchain.enterprise.v1.QueryEnterpriseUndPurchaseOrdersRequest")
	proto.RegisterType((*QueryEnterpriseUndPurchaseOrdersResponse)(nil), "mainchain.enterprise.v1.QueryEnterpriseUndPurchaseOrdersResponse")
	proto.RegisterType((*QueryLockedUndByAddressRequest)(nil), "mainchain.enterprise.v1.QueryLockedUndByAddressRequest")
	proto.RegisterType((*QueryLockedUndByAddressResponse)(nil), "mainchain.enterprise.v1.QueryLockedUndByAddressResponse")
	proto.RegisterType((*QueryTotalLockedRequest)(nil), "mainchain.enterprise.v1.QueryTotalLockedRequest")
	proto.RegisterType((*QueryTotalLockedResponse)(nil), "mainchain.enterprise.v1.QueryTotalLockedResponse")
	proto.RegisterType((*QueryTotalUnlockedRequest)(nil), "mainchain.enterprise.v1.QueryTotalUnlockedRequest")
	proto.RegisterType((*QueryTotalUnlockedResponse)(nil), "mainchain.enterprise.v1.QueryTotalUnlockedResponse")
	proto.RegisterType((*QueryEnterpriseSupplyRequest)(nil), "mainchain.enterprise.v1.QueryEnterpriseSupplyRequest")
	proto.RegisterType((*QueryEnterpriseSupplyResponse)(nil), "mainchain.enterprise.v1.QueryEnterpriseSupplyResponse")
	proto.RegisterType((*QueryTotalSupplyRequest)(nil), "mainchain.enterprise.v1.QueryTotalSupplyRequest")
	proto.RegisterType((*QueryTotalSupplyResponse)(nil), "mainchain.enterprise.v1.QueryTotalSupplyResponse")
	proto.RegisterType((*QuerySupplyOfRequest)(nil), "mainchain.enterprise.v1.QuerySupplyOfRequest")
	proto.RegisterType((*QuerySupplyOfResponse)(nil), "mainchain.enterprise.v1.QuerySupplyOfResponse")
	proto.RegisterType((*QueryWhitelistRequest)(nil), "mainchain.enterprise.v1.QueryWhitelistRequest")
	proto.RegisterType((*QueryWhitelistResponse)(nil), "mainchain.enterprise.v1.QueryWhitelistResponse")
	proto.RegisterType((*QueryWhitelistedRequest)(nil), "mainchain.enterprise.v1.QueryWhitelistedRequest")
	proto.RegisterType((*QueryWhitelistedResponse)(nil), "mainchain.enterprise.v1.QueryWhitelistedResponse")
	proto.RegisterType((*QueryEnterpriseAccountRequest)(nil), "mainchain.enterprise.v1.QueryEnterpriseAccountRequest")
	proto.RegisterType((*QueryEnterpriseAccountResponse)(nil), "mainchain.enterprise.v1.QueryEnterpriseAccountResponse")
	proto.RegisterType((*QueryTotalSpentEFUNDRequest)(nil), "mainchain.enterprise.v1.QueryTotalSpentEFUNDRequest")
	proto.RegisterType((*QueryTotalSpentEFUNDResponse)(nil), "mainchain.enterprise.v1.QueryTotalSpentEFUNDResponse")
	proto.RegisterType((*QuerySpentEFUNDByAddressRequest)(nil), "mainchain.enterprise.v1.QuerySpentEFUNDByAddressRequest")
	proto.RegisterType((*QuerySpentEFUNDByAddressResponse)(nil), "mainchain.enterprise.v1.QuerySpentEFUNDByAddressResponse")
}

func init() {
	proto.RegisterFile("mainchain/enterprise/v1/query.proto", fileDescriptor_4dd8eb5b331b8d2b)
}

var fileDescriptor_4dd8eb5b331b8d2b = []byte{
	// 1338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xdf, 0x4f, 0xdb, 0x56,
	0x14, 0xe6, 0x42, 0x9b, 0x36, 0x07, 0x15, 0xc6, 0x2d, 0x1d, 0x60, 0x20, 0x50, 0xc3, 0x20, 0xa5,
	0xc1, 0x26, 0xa1, 0x85, 0x56, 0xd3, 0xb4, 0xc2, 0xda, 0x4e, 0x93, 0xa6, 0x42, 0x03, 0x59, 0xa5,
	0xee, 0x81, 0x39, 0x89, 0x1b, 0x2c, 0x88, 0xed, 0xda, 0x0e, 0x0c, 0x21, 0x5e, 0xf6, 0xba, 0x3d,
	0x4c, 0xda, 0xcb, 0xb4, 0x3d, 0x6c, 0xd2, 0x5e, 0xa6, 0x69, 0xda, 0xf3, 0x1e, 0xf6, 0x07, 0xf0,
	0x58, 0x69, 0x9a, 0xb6, 0x49, 0xd3, 0x36, 0xc1, 0xfe, 0x90, 0xc9, 0xd7, 0xc7, 0x89, 0x9d, 0x70,
	0x13, 0x87, 0x74, 0x7b, 0x02, 0xdf, 0x7b, 0xbe, 0x73, 0xbe, 0xf3, 0xe3, 0x5e, 0x7f, 0x0e, 0x4c,
	0x95, 0x15, 0x4d, 0x2f, 0x6c, 0x2b, 0x9a, 0x2e, 0xab, 0xba, 0xa3, 0x5a, 0xa6, 0xa5, 0xd9, 0xaa,
	0xbc, 0x97, 0x96, 0x9f, 0x57, 0x54, 0xeb, 0x40, 0x32, 0x2d, 0xc3, 0x31, 0xe8, 0x50, 0xd5, 0x48,
	0xaa, 0x19, 0x49, 0x7b, 0x69, 0x61, 0xb0, 0x64, 0x94, 0x0c, 0x66, 0x23, 0xbb, 0xff, 0x79, 0xe6,
	0xc2, 0x58, 0xc9, 0x30, 0x4a, 0xbb, 0xaa, 0xac, 0x98, 0x9a, 0xac, 0xe8, 0xba, 0xe1, 0x28, 0x8e,
	0x66, 0xe8, 0x36, 0xee, 0x4a, 0x05, 0xc3, 0x2e, 0x1b, 0xf6, 0x96, 0x5d, 0xdc, 0x91, 0xf3, 0x8a,
	0xad, 0x7a, 0x91, 0xe4, 0xbd, 0x74, 0x5e, 0x75, 0x94, 0xb4, 0x6c, 0x2a, 0x25, 0x4d, 0x67, 0x00,
	0xb4, 0x4f, 0xf2, 0x18, 0x06, 0xa8, 0x78, 0x96, 0x62, 0xbd, 0x67, 0xdf, 0x67, 0xc1, 0xd0, 0xd0,
	0x9b, 0x38, 0x08, 0xf4, 0xb1, 0x1b, 0x6f, 0x5d, 0xb1, 0x94, 0xb2, 0x9d, 0x55, 0x9f, 0x57, 0x54,
	0xdb, 0x11, 0x37, 0xe1, 0x6a, 0x68, 0xd5, 0x36, 0x0d, 0xdd, 0x56, 0xe9, 0x1b, 0x10, 0x33, 0xd9,
	0xca, 0x30, 0x99, 0x24, 0xc9, 0xde, 0xcc, 0x84, 0xc4, 0x29, 0x84, 0xe4, 0x01, 0x57, 0x2f, 0x1c,
	0xff, 0x39, 0xd1, 0x95, 0x45, 0x90, 0xb8, 0x09, 0x33, 0xcc, 0xeb, 0x83, 0xaa, 0x69, 0x4e, 0x2f,
	0xae, 0x57, 0xac, 0xc2, 0xb6, 0x62, 0xab, 0x6b, 0x56, 0x51, 0xb5, 0x30, 0x3e, 0x9d, 0x83, 0x01,
	0x13, 0xd7, 0xb7, 0x0c, 0x77, 0x63, 0x4b, 0x2b, 0xb2, 0x98, 0x17, 0xb2, 0xfd, 0x66, 0x10, 0xf0,
	0x4e, 0x51, 0xfc, 0x98, 0xc0, 0x6c, 0x4b, 0xb7, 0x98, 0xc0, 0x07, 0xd0, 0x17, 0xf6, 0x8b, 0x89,
	0x2c, 0x72, 0x13, 0xe1, 0x3b, 0xc5, 0xe4, 0xae, 0x84, 0xf8, 0x88, 0xbf, 0xb4, 0x66, 0xe3, 0x57,
	0x99, 0x3e, 0x04, 0xa8, 0x75, 0x17, 0x99, 0xcc, 0xe0, 0x38, 0x48, 0x6e, 0xc3, 0x24, 0x6f, 0xe8,
	0xb0, 0x6d, 0xd2, 0xba, 0x52, 0x52, 0x11, 0x9b, 0x0d, 0x20, 0xe9, 0x18, 0xc4, 0x7d, 0x12, 0xd6,
	0x70, 0xf7, 0x24, 0x49, 0xc6, 0xb3, 0xb5, 0x05, 0x7a, 0x1f, 0x62, 0xb6, 0xa3, 0x38, 0x15, 0x7b,
	0xb8, 0x67, 0x92, 0x24, 0xfb, 0x32, 0x29, 0x7e, 0xd3, 0x82, 0x2c, 0x37, 0x18, 0x26, 0x8b, 0x58,
	0xf1, 0x57, 0x02, 0xc9, 0xd6, 0x79, 0x61, 0x99, 0xf3, 0xd0, 0x1f, 0x2e, 0xb3, 0x3b, 0x30, 0x3d,
	0x9d, 0xd5, 0xb9, 0x2f, 0x54, 0x67, 0x9b, 0xbe, 0x1d, 0x2a, 0x5e, 0x37, 0x2b, 0xde, 0x6c, 0xcb,
	0xe2, 0x79, 0x04, 0x83, 0xd5, 0x13, 0x97, 0x20, 0xc1, 0x12, 0x7b, 0xd7, 0x28, 0xec, 0xa8, 0xc5,
	0x9c, 0x5e, 0x5c, 0x3d, 0x58, 0x29, 0x16, 0x2d, 0xd5, 0xae, 0xf6, 0x69, 0x10, 0x2e, 0x1a, 0xfb,
	0x3a, 0x0e, 0x4b, 0x3c, 0xeb, 0x3d, 0x88, 0x4f, 0x61, 0x82, 0x8b, 0xc3, 0x3a, 0x2c, 0x43, 0x4c,
	0x29, 0x1b, 0x15, 0xdd, 0xc1, 0xe6, 0x8e, 0x84, 0xf8, 0xf9, 0xcc, 0xde, 0x32, 0x34, 0xdd, 0x3f,
	0x29, 0x9e, 0xb9, 0x38, 0x02, 0x43, 0xcc, 0xf7, 0xa6, 0xe1, 0x28, 0xbb, 0x5e, 0x00, 0xff, 0x68,
	0x6e, 0xc0, 0x70, 0xe3, 0x56, 0xa7, 0xf1, 0x46, 0x61, 0xa4, 0xe6, 0x34, 0xa7, 0xef, 0x86, 0x22,
	0xe6, 0x40, 0x38, 0x6b, 0xb3, 0xd3, 0x98, 0x09, 0x18, 0xab, 0x1b, 0xa8, 0x8d, 0x8a, 0x69, 0xee,
	0x1e, 0xf8, 0x61, 0x15, 0x18, 0xe7, 0xec, 0x63, 0xe4, 0x7b, 0x10, 0xb3, 0xd9, 0x0a, 0x46, 0x16,
	0xb9, 0xc3, 0x95, 0xd3, 0x8b, 0x1e, 0xd6, 0xa7, 0xe0, 0xe1, 0x44, 0x25, 0x58, 0xe6, 0x50, 0xf4,
	0x97, 0x75, 0x36, 0xc5, 0x63, 0x12, 0xec, 0x57, 0x5d, 0x06, 0x85, 0x40, 0x06, 0x3d, 0xcd, 0x6b,
	0xb7, 0xe0, 0x12, 0xff, 0xee, 0xaf, 0x89, 0x64, 0x49, 0x73, 0xb6, 0x2b, 0x79, 0xa9, 0x60, 0x94,
	0x65, 0xcf, 0x18, 0xff, 0xcc, 0xbb, 0xb7, 0xbc, 0x73, 0x60, 0xaa, 0x36, 0x03, 0xd8, 0x7e, 0x92,
	0x2f, 0xef, 0xa0, 0xa4, 0x60, 0x90, 0x65, 0xe2, 0x25, 0xb1, 0xf6, 0x2c, 0x70, 0x3c, 0x8a, 0xaa,
	0x6e, 0x94, 0xfd, 0xe3, 0xc1, 0x1e, 0xc4, 0x75, 0xb8, 0x56, 0x67, 0xdd, 0xe9, 0xc0, 0x0c, 0xa1,
	0xc7, 0x27, 0xdb, 0x9a, 0xa3, 0xee, 0x6a, 0xb6, 0xe3, 0x4f, 0xca, 0x12, 0xbc, 0x5a, 0xbf, 0x81,
	0xb1, 0xc6, 0x20, 0xae, 0x78, 0x67, 0x52, 0xf5, 0xae, 0xa0, 0x78, 0xb6, 0xb6, 0x20, 0x2e, 0x62,
	0xfb, 0xab, 0xb8, 0xea, 0xcc, 0xd3, 0x61, 0xb8, 0x84, 0x76, 0x98, 0x95, 0xff, 0x28, 0xbe, 0x87,
	0xfd, 0x0c, 0x81, 0x30, 0x1c, 0x17, 0x45, 0x27, 0xa1, 0x77, 0xbf, 0x06, 0x60, 0x5d, 0xb8, 0x9c,
	0x0d, 0x2e, 0x89, 0x77, 0x1b, 0xc6, 0x7d, 0xa5, 0x50, 0x70, 0xf3, 0x6e, 0x4d, 0xc9, 0xc4, 0x1b,
	0xec, 0x0c, 0x28, 0x12, 0x7b, 0x04, 0x97, 0x14, 0x6f, 0x09, 0x8b, 0x2e, 0x45, 0xb9, 0x88, 0x6d,
	0xd5, 0x42, 0x47, 0xd8, 0x09, 0xdf, 0x89, 0x38, 0x0e, 0xa3, 0x81, 0xa1, 0x36, 0x55, 0xdd, 0x79,
	0xf0, 0x30, 0xf7, 0xe8, 0xbe, 0xdf, 0x90, 0x27, 0x78, 0xb4, 0x1b, 0xb6, 0x3b, 0x1d, 0x81, 0xd7,
	0xf1, 0xce, 0xad, 0xf9, 0x6c, 0xb8, 0xac, 0xf9, 0x65, 0x7a, 0x1f, 0x26, 0xf9, 0xe0, 0x0e, 0x99,
	0x65, 0xfe, 0xb8, 0x06, 0x17, 0x99, 0x77, 0xfa, 0x09, 0x81, 0x98, 0x27, 0x7f, 0xe8, 0x4d, 0x6e,
	0x95, 0x1b, 0x35, 0x97, 0x90, 0x8a, 0x66, 0xec, 0x11, 0x15, 0x67, 0x3f, 0xfa, 0xf9, 0x9f, 0xcf,
	0xba, 0xaf, 0xd3, 0x09, 0x99, 0x27, 0x07, 0x3d, 0xd1, 0x45, 0x7f, 0x27, 0x20, 0xf0, 0x5f, 0xae,
	0xf4, 0xcd, 0xe6, 0x51, 0x5b, 0x4a, 0x35, 0xe1, 0xde, 0xf9, 0x1d, 0x60, 0x2a, 0x77, 0x58, 0x2a,
	0x19, 0xba, 0xc0, 0x4f, 0xc5, 0xb0, 0xe5, 0xc3, 0x06, 0x41, 0x78, 0x44, 0x8f, 0x09, 0x8c, 0x36,
	0xd1, 0x23, 0xf4, 0xdc, 0xdc, 0xaa, 0x4d, 0x59, 0xe9, 0xc0, 0x03, 0xa6, 0x37, 0xcd, 0xd2, 0x4b,
	0xd0, 0xb1, 0x66, 0xe9, 0xd1, 0x1f, 0x09, 0xd0, 0x46, 0x25, 0x41, 0x97, 0x9b, 0xc7, 0xe7, 0x6a,
	0x16, 0xe1, 0x4e, 0xfb, 0x40, 0xe4, 0x2b, 0x33, 0xbe, 0x37, 0xe8, 0x2c, 0x97, 0xaf, 0xa7, 0x00,
	0xe4, 0x43, 0xa6, 0x83, 0x8e, 0xe8, 0x97, 0x04, 0x7a, 0x03, 0x6a, 0x84, 0x2e, 0x34, 0x0f, 0xdd,
	0xa8, 0x69, 0x84, 0x74, 0x1b, 0x88, 0xc8, 0xf3, 0xef, 0xb1, 0xa4, 0xdf, 0x10, 0xb8, 0x12, 0x52,
	0x2e, 0x34, 0x13, 0x21, 0x5a, 0x9d, 0x06, 0x12, 0x16, 0xdb, 0xc2, 0x20, 0xc7, 0x1b, 0x8c, 0xe3,
	0x14, 0xbd, 0xce, 0xe5, 0x58, 0xf1, 0x39, 0xfd, 0x40, 0xe0, 0x95, 0x7a, 0xa1, 0x43, 0x6f, 0x47,
	0x1d, 0xbe, 0x90, 0x74, 0x11, 0x96, 0xda, 0x85, 0x21, 0xdd, 0x9b, 0x8c, 0xee, 0x6b, 0x74, 0x4a,
	0x6e, 0xf2, 0x85, 0xb9, 0x85, 0xaa, 0xa2, 0xda, 0x74, 0xe4, 0x1a, 0xa5, 0xe9, 0x61, 0x9a, 0xe9,
	0x36, 0x10, 0x91, 0x9b, 0x8e, 0xec, 0xbe, 0x20, 0x70, 0xd9, 0x17, 0x1e, 0x74, 0xbe, 0x79, 0xa0,
	0x3a, 0x39, 0x23, 0x48, 0x51, 0xcd, 0x23, 0x9f, 0x17, 0x8f, 0x94, 0x7c, 0xc8, 0x84, 0xd1, 0x11,
	0xfd, 0x9a, 0xc0, 0x60, 0x20, 0xbb, 0xb5, 0x3d, 0xd5, 0xda, 0xb7, 0x34, 0x47, 0xfd, 0x7f, 0x6a,
	0x38, 0xc5, 0xe8, 0x8e, 0xd3, 0x51, 0x5f, 0x3e, 0xe6, 0x15, 0x7d, 0xa7, 0xfa, 0xcb, 0x00, 0xd6,
	0xef, 0x2b, 0x02, 0x03, 0x7e, 0xa2, 0x35, 0x7e, 0xff, 0x71, 0x21, 0x6b, 0xf3, 0xc7, 0x67, 0x56,
	0x2d, 0xe2, 0xe7, 0x04, 0xe2, 0x55, 0x09, 0x46, 0x5b, 0x84, 0xaa, 0x57, 0x8c, 0x82, 0x1c, 0xd9,
	0x1e, 0xb9, 0xcd, 0x31, 0x6e, 0xd3, 0x54, 0xe4, 0x36, 0xb9, 0xaa, 0xe5, 0xe8, 0xb7, 0x04, 0x7a,
	0x03, 0xea, 0xb0, 0x55, 0x5b, 0x1b, 0xd5, 0x67, 0xab, 0xb6, 0x9e, 0x21, 0x3d, 0xc5, 0x5b, 0x8c,
	0xa0, 0x44, 0x53, 0xad, 0x09, 0xca, 0x87, 0xa8, 0x88, 0x8e, 0xdc, 0xb7, 0xce, 0x40, 0x83, 0x6a,
	0xa4, 0x91, 0x2f, 0x90, 0xb0, 0x42, 0x15, 0x96, 0xdb, 0xc6, 0x21, 0xf9, 0x0c, 0x23, 0x9f, 0xa2,
	0x73, 0x5c, 0xf2, 0x28, 0x3c, 0x03, 0xd4, 0xbf, 0x27, 0xd0, 0x5f, 0xa7, 0x2f, 0xe9, 0xad, 0x28,
	0xc7, 0xa1, 0x5e, 0xad, 0x0a, 0xb7, 0xdb, 0x44, 0x21, 0xe9, 0x14, 0x23, 0x3d, 0x43, 0xa7, 0xb9,
	0xa4, 0x1d, 0x17, 0xb9, 0x65, 0xbb, 0x50, 0xfa, 0x13, 0x81, 0xab, 0x67, 0x08, 0x4f, 0xda, 0xe2,
	0x3d, 0xcd, 0x17, 0xba, 0xc2, 0xdd, 0x73, 0x20, 0x91, 0xfa, 0x02, 0xa3, 0x3e, 0x47, 0x93, 0xfc,
	0x2b, 0xcb, 0x45, 0xd7, 0xaa, 0xbd, 0xfa, 0xf8, 0xf8, 0x24, 0x41, 0x5e, 0x9c, 0x24, 0xc8, 0xdf,
	0x27, 0x09, 0xf2, 0xe9, 0x69, 0xa2, 0xeb, 0xc5, 0x69, 0xa2, 0xeb, 0xb7, 0xd3, 0x44, 0xd7, 0xd3,
	0xe5, 0xc0, 0x07, 0x69, 0x45, 0xd7, 0x9e, 0x69, 0x05, 0xf6, 0xb5, 0x38, 0xef, 0x3e, 0xd7, 0xbc,
	0x7f, 0x18, 0xf4, 0xcf, 0xbe, 0x52, 0xf3, 0x31, 0xf6, 0x03, 0xe4, 0xe2, 0xbf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x10, 0x65, 0xda, 0xab, 0x72, 0x15, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of x/enterprise module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// EnterpriseUndPurchaseOrder queries purchase order details based on PurchaseOrderId.
	EnterpriseUndPurchaseOrder(ctx context.Context, in *QueryEnterpriseUndPurchaseOrderRequest, opts ...grpc.CallOption) (*QueryEnterpriseUndPurchaseOrderResponse, error)
	// EnterpriseUndPurchaseOrders queries all current purchase orders.
	EnterpriseUndPurchaseOrders(ctx context.Context, in *QueryEnterpriseUndPurchaseOrdersRequest, opts ...grpc.CallOption) (*QueryEnterpriseUndPurchaseOrdersResponse, error)
	// LockedUndByAddress queries an account address for their locked FUND
	LockedUndByAddress(ctx context.Context, in *QueryLockedUndByAddressRequest, opts ...grpc.CallOption) (*QueryLockedUndByAddressResponse, error)
	// TotalLocked queries the total locked FUND
	TotalLocked(ctx context.Context, in *QueryTotalLockedRequest, opts ...grpc.CallOption) (*QueryTotalLockedResponse, error)
	// TotalUnlocked queries the total Unlocked FUND
	TotalUnlocked(ctx context.Context, in *QueryTotalUnlockedRequest, opts ...grpc.CallOption) (*QueryTotalUnlockedResponse, error)
	// EnterpriseSupply queries the chain's supply, including locked Ent. FUND. Only returns nund data
	EnterpriseSupply(ctx context.Context, in *QueryEnterpriseSupplyRequest, opts ...grpc.CallOption) (*QueryEnterpriseSupplyResponse, error)
	// TotalSupply should be used instead of /cosmos/bank/v1beta1/supply to get true total supply available
	// for general use, i.e. with locked eFUND removed from total for nund
	TotalSupply(ctx context.Context, in *QueryTotalSupplyRequest, opts ...grpc.CallOption) (*QueryTotalSupplyResponse, error)
	// SupplyOf should be used in place of /cosmos/bank/v1beta1/supply to get true total supply,
	// with locked eFUND removed from total for nund
	SupplyOf(ctx context.Context, in *QuerySupplyOfRequest, opts ...grpc.CallOption) (*QuerySupplyOfResponse, error)
	// TotalSupplyOverwrite should be used instead of /cosmos/bank/v1beta1/supply to get true total supply available
	// for general use, i.e. with locked eFUND removed from total for nund
	TotalSupplyOverwrite(ctx context.Context, in *QueryTotalSupplyRequest, opts ...grpc.CallOption) (*QueryTotalSupplyResponse, error)
	// SupplyOf should be used in place of /cosmos/bank/v1beta1/supply to get true total supply,
	// with locked eFUND removed from total for nund
	SupplyOfOverwrite(ctx context.Context, in *QuerySupplyOfRequest, opts ...grpc.CallOption) (*QuerySupplyOfResponse, error)
	// Whitelist queries whitelisted addresses authorised to raise new purchase orders
	Whitelist(ctx context.Context, in *QueryWhitelistRequest, opts ...grpc.CallOption) (*QueryWhitelistResponse, error)
	// Whitelisted queries whether or not the given address is authorised to raise new purchase orders
	Whitelisted(ctx context.Context, in *QueryWhitelistedRequest, opts ...grpc.CallOption) (*QueryWhitelistedResponse, error)
	// EnterpriseAccount queries an account address for their locked FUND and other data
	EnterpriseAccount(ctx context.Context, in *QueryEnterpriseAccountRequest, opts ...grpc.CallOption) (*QueryEnterpriseAccountResponse, error)
	// TotalSpentEFUND queries the total eFUND usage to date - i.e. the amount used to pay fees
	TotalSpentEFUND(ctx context.Context, in *QueryTotalSpentEFUNDRequest, opts ...grpc.CallOption) (*QueryTotalSpentEFUNDResponse, error)
	// SpentEFUNDByAddress queries the total eFUND usage to date for a given address, i.e. the amount used to pay fees
	SpentEFUNDByAddress(ctx context.Context, in *QuerySpentEFUNDByAddressRequest, opts ...grpc.CallOption) (*QuerySpentEFUNDByAddressResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/mainchain.enterprise.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EnterpriseUndPurchaseOrder(ctx context.Context, in *QueryEnterpriseUndPurchaseOrderRequest, opts ...grpc.CallOption) (*QueryEnterpriseUndPurchaseOrderResponse, error) {
	out := new(QueryEnterpriseUndPurchaseOrderResponse)
	err := c.cc.Invoke(ctx, "/mainchain.enterprise.v1.Query/EnterpriseUndPurchaseOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EnterpriseUndPurchaseOrders(ctx context.Context, in *QueryEnterpriseUndPurchaseOrdersRequest, opts ...grpc.CallOption) (*QueryEnterpriseUndPurchaseOrdersResponse, error) {
	out := new(QueryEnterpriseUndPurchaseOrdersResponse)
	err := c.cc.Invoke(ctx, "/mainchain.enterprise.v1.Query/EnterpriseUndPurchaseOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LockedUndByAddress(ctx context.Context, in *QueryLockedUndByAddressRequest, opts ...grpc.CallOption) (*QueryLockedUndByAddressResponse, error) {
	out := new(QueryLockedUndByAddressResponse)
	err := c.cc.Invoke(ctx, "/mainchain.enterprise.v1.Query/LockedUndByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalLocked(ctx context.Context, in *QueryTotalLockedRequest, opts ...grpc.CallOption) (*QueryTotalLockedResponse, error) {
	out := new(QueryTotalLockedResponse)
	err := c.cc.Invoke(ctx, "/mainchain.enterprise.v1.Query/TotalLocked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalUnlocked(ctx context.Context, in *QueryTotalUnlockedRequest, opts ...grpc.CallOption) (*QueryTotalUnlockedResponse, error) {
	out := new(QueryTotalUnlockedResponse)
	err := c.cc.Invoke(ctx, "/mainchain.enterprise.v1.Query/TotalUnlocked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EnterpriseSupply(ctx context.Context, in *QueryEnterpriseSupplyRequest, opts ...grpc.CallOption) (*QueryEnterpriseSupplyResponse, error) {
	out := new(QueryEnterpriseSupplyResponse)
	err := c.cc.Invoke(ctx, "/mainchain.enterprise.v1.Query/EnterpriseSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalSupply(ctx context.Context, in *QueryTotalSupplyRequest, opts ...grpc.CallOption) (*QueryTotalSupplyResponse, error) {
	out := new(QueryTotalSupplyResponse)
	err := c.cc.Invoke(ctx, "/mainchain.enterprise.v1.Query/TotalSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SupplyOf(ctx context.Context, in *QuerySupplyOfRequest, opts ...grpc.CallOption) (*QuerySupplyOfResponse, error) {
	out := new(QuerySupplyOfResponse)
	err := c.cc.Invoke(ctx, "/mainchain.enterprise.v1.Query/SupplyOf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalSupplyOverwrite(ctx context.Context, in *QueryTotalSupplyRequest, opts ...grpc.CallOption) (*QueryTotalSupplyResponse, error) {
	out := new(QueryTotalSupplyResponse)
	err := c.cc.Invoke(ctx, "/mainchain.enterprise.v1.Query/TotalSupplyOverwrite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SupplyOfOverwrite(ctx context.Context, in *QuerySupplyOfRequest, opts ...grpc.CallOption) (*QuerySupplyOfResponse, error) {
	out := new(QuerySupplyOfResponse)
	err := c.cc.Invoke(ctx, "/mainchain.enterprise.v1.Query/SupplyOfOverwrite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Whitelist(ctx context.Context, in *QueryWhitelistRequest, opts ...grpc.CallOption) (*QueryWhitelistResponse, error) {
	out := new(QueryWhitelistResponse)
	err := c.cc.Invoke(ctx, "/mainchain.enterprise.v1.Query/Whitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Whitelisted(ctx context.Context, in *QueryWhitelistedRequest, opts ...grpc.CallOption) (*QueryWhitelistedResponse, error) {
	out := new(QueryWhitelistedResponse)
	err := c.cc.Invoke(ctx, "/mainchain.enterprise.v1.Query/Whitelisted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EnterpriseAccount(ctx context.Context, in *QueryEnterpriseAccountRequest, opts ...grpc.CallOption) (*QueryEnterpriseAccountResponse, error) {
	out := new(QueryEnterpriseAccountResponse)
	err := c.cc.Invoke(ctx, "/mainchain.enterprise.v1.Query/EnterpriseAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalSpentEFUND(ctx context.Context, in *QueryTotalSpentEFUNDRequest, opts ...grpc.CallOption) (*QueryTotalSpentEFUNDResponse, error) {
	out := new(QueryTotalSpentEFUNDResponse)
	err := c.cc.Invoke(ctx, "/mainchain.enterprise.v1.Query/TotalSpentEFUND", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpentEFUNDByAddress(ctx context.Context, in *QuerySpentEFUNDByAddressRequest, opts ...grpc.CallOption) (*QuerySpentEFUNDByAddressResponse, error) {
	out := new(QuerySpentEFUNDByAddressResponse)
	err := c.cc.Invoke(ctx, "/mainchain.enterprise.v1.Query/SpentEFUNDByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of x/enterprise module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// EnterpriseUndPurchaseOrder queries purchase order details based on PurchaseOrderId.
	EnterpriseUndPurchaseOrder(context.Context, *QueryEnterpriseUndPurchaseOrderRequest) (*QueryEnterpriseUndPurchaseOrderResponse, error)
	// EnterpriseUndPurchaseOrders queries all current purchase orders.
	EnterpriseUndPurchaseOrders(context.Context, *QueryEnterpriseUndPurchaseOrdersRequest) (*QueryEnterpriseUndPurchaseOrdersResponse, error)
	// LockedUndByAddress queries an account address for their locked FUND
	LockedUndByAddress(context.Context, *QueryLockedUndByAddressRequest) (*QueryLockedUndByAddressResponse, error)
	// TotalLocked queries the total locked FUND
	TotalLocked(context.Context, *QueryTotalLockedRequest) (*QueryTotalLockedResponse, error)
	// TotalUnlocked queries the total Unlocked FUND
	TotalUnlocked(context.Context, *QueryTotalUnlockedRequest) (*QueryTotalUnlockedResponse, error)
	// EnterpriseSupply queries the chain's supply, including locked Ent. FUND. Only returns nund data
	EnterpriseSupply(context.Context, *QueryEnterpriseSupplyRequest) (*QueryEnterpriseSupplyResponse, error)
	// TotalSupply should be used instead of /cosmos/bank/v1beta1/supply to get true total supply available
	// for general use, i.e. with locked eFUND removed from total for nund
	TotalSupply(context.Context, *QueryTotalSupplyRequest) (*QueryTotalSupplyResponse, error)
	// SupplyOf should be used in place of /cosmos/bank/v1beta1/supply to get true total supply,
	// with locked eFUND removed from total for nund
	SupplyOf(context.Context, *QuerySupplyOfRequest) (*QuerySupplyOfResponse, error)
	// TotalSupplyOverwrite should be used instead of /cosmos/bank/v1beta1/supply to get true total supply available
	// for general use, i.e. with locked eFUND removed from total for nund
	TotalSupplyOverwrite(context.Context, *QueryTotalSupplyRequest) (*QueryTotalSupplyResponse, error)
	// SupplyOf should be used in place of /cosmos/bank/v1beta1/supply to get true total supply,
	// with locked eFUND removed from total for nund
	SupplyOfOverwrite(context.Context, *QuerySupplyOfRequest) (*QuerySupplyOfResponse, error)
	// Whitelist queries whitelisted addresses authorised to raise new purchase orders
	Whitelist(context.Context, *QueryWhitelistRequest) (*QueryWhitelistResponse, error)
	// Whitelisted queries whether or not the given address is authorised to raise new purchase orders
	Whitelisted(context.Context, *QueryWhitelistedRequest) (*QueryWhitelistedResponse, error)
	// EnterpriseAccount queries an account address for their locked FUND and other data
	EnterpriseAccount(context.Context, *QueryEnterpriseAccountRequest) (*QueryEnterpriseAccountResponse, error)
	// TotalSpentEFUND queries the total eFUND usage to date - i.e. the amount used to pay fees
	TotalSpentEFUND(context.Context, *QueryTotalSpentEFUNDRequest) (*QueryTotalSpentEFUNDResponse, error)
	// SpentEFUNDByAddress queries the total eFUND usage to date for a given address, i.e. the amount used to pay fees
	SpentEFUNDByAddress(context.Context, *QuerySpentEFUNDByAddressRequest) (*QuerySpentEFUNDByAddressResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) EnterpriseUndPurchaseOrder(ctx context.Context, req *QueryEnterpriseUndPurchaseOrderRequest) (*QueryEnterpriseUndPurchaseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterpriseUndPurchaseOrder not implemented")
}
func (*UnimplementedQueryServer) EnterpriseUndPurchaseOrders(ctx context.Context, req *QueryEnterpriseUndPurchaseOrdersRequest) (*QueryEnterpriseUndPurchaseOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterpriseUndPurchaseOrders not implemented")
}
func (*UnimplementedQueryServer) LockedUndByAddress(ctx context.Context, req *QueryLockedUndByAddressRequest) (*QueryLockedUndByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockedUndByAddress not implemented")
}
func (*UnimplementedQueryServer) TotalLocked(ctx context.Context, req *QueryTotalLockedRequest) (*QueryTotalLockedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalLocked not implemented")
}
func (*UnimplementedQueryServer) TotalUnlocked(ctx context.Context, req *QueryTotalUnlockedRequest) (*QueryTotalUnlockedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalUnlocked not implemented")
}
func (*UnimplementedQueryServer) EnterpriseSupply(ctx context.Context, req *QueryEnterpriseSupplyRequest) (*QueryEnterpriseSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterpriseSupply not implemented")
}
func (*UnimplementedQueryServer) TotalSupply(ctx context.Context, req *QueryTotalSupplyRequest) (*QueryTotalSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalSupply not implemented")
}
func (*UnimplementedQueryServer) SupplyOf(ctx context.Context, req *QuerySupplyOfRequest) (*QuerySupplyOfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupplyOf not implemented")
}
func (*UnimplementedQueryServer) TotalSupplyOverwrite(ctx context.Context, req *QueryTotalSupplyRequest) (*QueryTotalSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalSupplyOverwrite not implemented")
}
func (*UnimplementedQueryServer) SupplyOfOverwrite(ctx context.Context, req *QuerySupplyOfRequest) (*QuerySupplyOfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupplyOfOverwrite not implemented")
}
func (*UnimplementedQueryServer) Whitelist(ctx context.Context, req *QueryWhitelistRequest) (*QueryWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Whitelist not implemented")
}
func (*UnimplementedQueryServer) Whitelisted(ctx context.Context, req *QueryWhitelistedRequest) (*QueryWhitelistedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Whitelisted not implemented")
}
func (*UnimplementedQueryServer) EnterpriseAccount(ctx context.Context, req *QueryEnterpriseAccountRequest) (*QueryEnterpriseAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterpriseAccount not implemented")
}
func (*UnimplementedQueryServer) TotalSpentEFUND(ctx context.Context, req *QueryTotalSpentEFUNDRequest) (*QueryTotalSpentEFUNDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalSpentEFUND not implemented")
}
func (*UnimplementedQueryServer) SpentEFUNDByAddress(ctx context.Context, req *QuerySpentEFUNDByAddressRequest) (*QuerySpentEFUNDByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpentEFUNDByAddress not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.enterprise.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EnterpriseUndPurchaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEnterpriseUndPurchaseOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EnterpriseUndPurchaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.enterprise.v1.Query/EnterpriseUndPurchaseOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EnterpriseUndPurchaseOrder(ctx, req.(*QueryEnterpriseUndPurchaseOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EnterpriseUndPurchaseOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEnterpriseUndPurchaseOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EnterpriseUndPurchaseOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.enterprise.v1.Query/EnterpriseUndPurchaseOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EnterpriseUndPurchaseOrders(ctx, req.(*QueryEnterpriseUndPurchaseOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LockedUndByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockedUndByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LockedUndByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.enterprise.v1.Query/LockedUndByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LockedUndByAddress(ctx, req.(*QueryLockedUndByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalLocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalLockedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalLocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.enterprise.v1.Query/TotalLocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalLocked(ctx, req.(*QueryTotalLockedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalUnlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalUnlockedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalUnlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.enterprise.v1.Query/TotalUnlocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalUnlocked(ctx, req.(*QueryTotalUnlockedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EnterpriseSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEnterpriseSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EnterpriseSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.enterprise.v1.Query/EnterpriseSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EnterpriseSupply(ctx, req.(*QueryEnterpriseSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.enterprise.v1.Query/TotalSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalSupply(ctx, req.(*QueryTotalSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SupplyOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySupplyOfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SupplyOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.enterprise.v1.Query/SupplyOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SupplyOf(ctx, req.(*QuerySupplyOfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalSupplyOverwrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalSupplyOverwrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.enterprise.v1.Query/TotalSupplyOverwrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalSupplyOverwrite(ctx, req.(*QueryTotalSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SupplyOfOverwrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySupplyOfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SupplyOfOverwrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.enterprise.v1.Query/SupplyOfOverwrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SupplyOfOverwrite(ctx, req.(*QuerySupplyOfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Whitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Whitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.enterprise.v1.Query/Whitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Whitelist(ctx, req.(*QueryWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Whitelisted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWhitelistedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Whitelisted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.enterprise.v1.Query/Whitelisted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Whitelisted(ctx, req.(*QueryWhitelistedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EnterpriseAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEnterpriseAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EnterpriseAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.enterprise.v1.Query/EnterpriseAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EnterpriseAccount(ctx, req.(*QueryEnterpriseAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalSpentEFUND_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalSpentEFUNDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalSpentEFUND(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.enterprise.v1.Query/TotalSpentEFUND",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalSpentEFUND(ctx, req.(*QueryTotalSpentEFUNDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpentEFUNDByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpentEFUNDByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpentEFUNDByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.enterprise.v1.Query/SpentEFUNDByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpentEFUNDByAddress(ctx, req.(*QuerySpentEFUNDByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mainchain.enterprise.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "EnterpriseUndPurchaseOrder",
			Handler:    _Query_EnterpriseUndPurchaseOrder_Handler,
		},
		{
			MethodName: "EnterpriseUndPurchaseOrders",
			Handler:    _Query_EnterpriseUndPurchaseOrders_Handler,
		},
		{
			MethodName: "LockedUndByAddress",
			Handler:    _Query_LockedUndByAddress_Handler,
		},
		{
			MethodName: "TotalLocked",
			Handler:    _Query_TotalLocked_Handler,
		},
		{
			MethodName: "TotalUnlocked",
			Handler:    _Query_TotalUnlocked_Handler,
		},
		{
			MethodName: "EnterpriseSupply",
			Handler:    _Query_EnterpriseSupply_Handler,
		},
		{
			MethodName: "TotalSupply",
			Handler:    _Query_TotalSupply_Handler,
		},
		{
			MethodName: "SupplyOf",
			Handler:    _Query_SupplyOf_Handler,
		},
		{
			MethodName: "TotalSupplyOverwrite",
			Handler:    _Query_TotalSupplyOverwrite_Handler,
		},
		{
			MethodName: "SupplyOfOverwrite",
			Handler:    _Query_SupplyOfOverwrite_Handler,
		},
		{
			MethodName: "Whitelist",
			Handler:    _Query_Whitelist_Handler,
		},
		{
			MethodName: "Whitelisted",
			Handler:    _Query_Whitelisted_Handler,
		},
		{
			MethodName: "EnterpriseAccount",
			Handler:    _Query_EnterpriseAccount_Handler,
		},
		{
			MethodName: "TotalSpentEFUND",
			Handler:    _Query_TotalSpentEFUND_Handler,
		},
		{
			MethodName: "SpentEFUNDByAddress",
			Handler:    _Query_SpentEFUNDByAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mainchain/enterprise/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEnterpriseUndPurchaseOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEnterpriseUndPurchaseOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEnterpriseUndPurchaseOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PurchaseOrderId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PurchaseOrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryEnterpriseUndPurchaseOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEnterpriseUndPurchaseOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEnterpriseUndPurchaseOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PurchaseOrder.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEnterpriseUndPurchaseOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEnterpriseUndPurchaseOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEnterpriseUndPurchaseOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Purchaser) > 0 {
		i -= len(m.Purchaser)
		copy(dAtA[i:], m.Purchaser)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Purchaser)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEnterpriseUndPurchaseOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEnterpriseUndPurchaseOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEnterpriseUndPurchaseOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PurchaseOrders) > 0 {
		for iNdEx := len(m.PurchaseOrders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PurchaseOrders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockedUndByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockedUndByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockedUndByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockedUndByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockedUndByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockedUndByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTotalLockedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalLockedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalLockedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalLockedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalLockedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalLockedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTotalUnlockedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalUnlockedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalUnlockedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalUnlockedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalUnlockedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalUnlockedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEnterpriseSupplyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEnterpriseSupplyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEnterpriseSupplyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryEnterpriseSupplyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEnterpriseSupplyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEnterpriseSupplyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Supply.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTotalSupplyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalSupplyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalSupplyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalSupplyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalSupplyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalSupplyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Supply) > 0 {
		for iNdEx := len(m.Supply) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Supply[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySupplyOfRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySupplyOfRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySupplyOfRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySupplyOfResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySupplyOfResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySupplyOfResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryWhitelistRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWhitelistRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWhitelistRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryWhitelistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWhitelistResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWhitelistResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryWhitelistedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWhitelistedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWhitelistedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWhitelistedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWhitelistedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWhitelistedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Whitelisted {
		i--
		if m.Whitelisted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEnterpriseAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEnterpriseAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEnterpriseAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEnterpriseAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEnterpriseAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEnterpriseAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTotalSpentEFUNDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalSpentEFUNDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalSpentEFUNDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalSpentEFUNDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalSpentEFUNDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalSpentEFUNDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySpentEFUNDByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpentEFUNDByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpentEFUNDByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpentEFUNDByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpentEFUNDByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpentEFUNDByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEnterpriseUndPurchaseOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PurchaseOrderId != 0 {
		n += 1 + sovQuery(uint64(m.PurchaseOrderId))
	}
	return n
}

func (m *QueryEnterpriseUndPurchaseOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PurchaseOrder.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEnterpriseUndPurchaseOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Purchaser)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	return n
}

func (m *QueryEnterpriseUndPurchaseOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PurchaseOrders) > 0 {
		for _, e := range m.PurchaseOrders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLockedUndByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLockedUndByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTotalLockedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalLockedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTotalUnlockedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalUnlockedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEnterpriseSupplyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryEnterpriseSupplyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Supply.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTotalSupplyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTotalSupplyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Supply) > 0 {
		for _, e := range m.Supply {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySupplyOfRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySupplyOfResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryWhitelistRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryWhitelistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryWhitelistedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWhitelistedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Whitelisted {
		n += 2
	}
	return n
}

func (m *QueryEnterpriseAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEnterpriseAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Account.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTotalSpentEFUNDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalSpentEFUNDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySpentEFUNDByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpentEFUNDByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEnterpriseUndPurchaseOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEnterpriseUndPurchaseOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEnterpriseUndPurchaseOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseOrderId", wireType)
			}
			m.PurchaseOrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PurchaseOrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEnterpriseUndPurchaseOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEnterpriseUndPurchaseOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEnterpriseUndPurchaseOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PurchaseOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEnterpriseUndPurchaseOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEnterpriseUndPurchaseOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEnterpriseUndPurchaseOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purchaser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Purchaser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= PurchaseOrderStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEnterpriseUndPurchaseOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEnterpriseUndPurchaseOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEnterpriseUndPurchaseOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseOrders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PurchaseOrders = append(m.PurchaseOrders, EnterpriseUndPurchaseOrder{})
			if err := m.PurchaseOrders[len(m.PurchaseOrders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockedUndByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockedUndByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockedUndByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockedUndByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockedUndByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockedUndByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalLockedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalLockedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalLockedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalLockedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalLockedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalLockedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalUnlockedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalUnlockedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalUnlockedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalUnlockedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalUnlockedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalUnlockedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEnterpriseSupplyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEnterpriseSupplyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEnterpriseSupplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEnterpriseSupplyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEnterpriseSupplyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEnterpriseSupplyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Supply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalSupplyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalSupplyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalSupplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalSupplyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalSupplyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalSupplyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Supply = append(m.Supply, types.Coin{})
			if err := m.Supply[len(m.Supply)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySupplyOfRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySupplyOfRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySupplyOfRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySupplyOfResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySupplyOfResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySupplyOfResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWhitelistRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWhitelistRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWhitelistRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWhitelistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWhitelistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWhitelistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWhitelistedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWhitelistedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWhitelistedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWhitelistedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWhitelistedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWhitelistedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whitelisted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Whitelisted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEnterpriseAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEnterpriseAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEnterpriseAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEnterpriseAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEnterpriseAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEnterpriseAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalSpentEFUNDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalSpentEFUNDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalSpentEFUNDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalSpentEFUNDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalSpentEFUNDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalSpentEFUNDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpentEFUNDByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpentEFUNDByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpentEFUNDByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpentEFUNDByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpentEFUNDByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpentEFUNDByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
