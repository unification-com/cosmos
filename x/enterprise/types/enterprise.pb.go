// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mainchain/enterprise/v1/enterprise.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PurchaseOrderStatus int32

const (
	StatusNil       PurchaseOrderStatus = 0
	StatusRaised    PurchaseOrderStatus = 1
	StatusAccepted  PurchaseOrderStatus = 2
	StatusRejected  PurchaseOrderStatus = 3
	StatusCompleted PurchaseOrderStatus = 4
)

var PurchaseOrderStatus_name = map[int32]string{
	0: "STATUS_NIL",
	1: "STATUS_RAISED",
	2: "STATUS_ACCEPTED",
	3: "STATUS_REJECTED",
	4: "STATUS_COMPLETED",
}

var PurchaseOrderStatus_value = map[string]int32{
	"STATUS_NIL":       0,
	"STATUS_RAISED":    1,
	"STATUS_ACCEPTED":  2,
	"STATUS_REJECTED":  3,
	"STATUS_COMPLETED": 4,
}

func (x PurchaseOrderStatus) String() string {
	return proto.EnumName(PurchaseOrderStatus_name, int32(x))
}

func (PurchaseOrderStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0031edbd5eb0f2fc, []int{0}
}

type WhitelistAction int32

const (
	WhitelistActionNil    WhitelistAction = 0
	WhitelistActionAdd    WhitelistAction = 1
	WhitelistActionRemove WhitelistAction = 2
)

var WhitelistAction_name = map[int32]string{
	0: "WHITELIST_ACTION_NIL",
	1: "WHITELIST_ACTION_ADD",
	2: "WHITELIST_ACTION_REMOVE",
}

var WhitelistAction_value = map[string]int32{
	"WHITELIST_ACTION_NIL":    0,
	"WHITELIST_ACTION_ADD":    1,
	"WHITELIST_ACTION_REMOVE": 2,
}

func (x WhitelistAction) String() string {
	return proto.EnumName(WhitelistAction_name, int32(x))
}

func (WhitelistAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0031edbd5eb0f2fc, []int{1}
}

type PurchaseOrderDecision struct {
	Signer       string              `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Decision     PurchaseOrderStatus `protobuf:"varint,2,opt,name=decision,proto3,enum=mainchain.enterprise.v1.PurchaseOrderStatus" json:"decision,omitempty"`
	DecisionTime uint64              `protobuf:"varint,3,opt,name=decision_time,json=decisionTime,proto3" json:"decision_time,omitempty"`
}

func (m *PurchaseOrderDecision) Reset()         { *m = PurchaseOrderDecision{} }
func (m *PurchaseOrderDecision) String() string { return proto.CompactTextString(m) }
func (*PurchaseOrderDecision) ProtoMessage()    {}
func (*PurchaseOrderDecision) Descriptor() ([]byte, []int) {
	return fileDescriptor_0031edbd5eb0f2fc, []int{0}
}
func (m *PurchaseOrderDecision) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PurchaseOrderDecision) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PurchaseOrderDecision.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PurchaseOrderDecision) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PurchaseOrderDecision.Merge(m, src)
}
func (m *PurchaseOrderDecision) XXX_Size() int {
	return m.Size()
}
func (m *PurchaseOrderDecision) XXX_DiscardUnknown() {
	xxx_messageInfo_PurchaseOrderDecision.DiscardUnknown(m)
}

var xxx_messageInfo_PurchaseOrderDecision proto.InternalMessageInfo

func (m *PurchaseOrderDecision) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *PurchaseOrderDecision) GetDecision() PurchaseOrderStatus {
	if m != nil {
		return m.Decision
	}
	return StatusNil
}

func (m *PurchaseOrderDecision) GetDecisionTime() uint64 {
	if m != nil {
		return m.DecisionTime
	}
	return 0
}

type EnterpriseUndPurchaseOrder struct {
	Id             uint64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Purchaser      string                   `protobuf:"bytes,2,opt,name=purchaser,proto3" json:"purchaser,omitempty"`
	Amount         types.Coin               `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	Status         PurchaseOrderStatus      `protobuf:"varint,4,opt,name=status,proto3,enum=mainchain.enterprise.v1.PurchaseOrderStatus" json:"status,omitempty"`
	RaiseTime      uint64                   `protobuf:"varint,5,opt,name=raise_time,json=raiseTime,proto3" json:"raise_time,omitempty"`
	CompletionTime uint64                   `protobuf:"varint,6,opt,name=completion_time,json=completionTime,proto3" json:"completion_time,omitempty"`
	Decisions      []*PurchaseOrderDecision `protobuf:"bytes,7,rep,name=decisions,proto3" json:"decisions,omitempty"`
}

func (m *EnterpriseUndPurchaseOrder) Reset()         { *m = EnterpriseUndPurchaseOrder{} }
func (m *EnterpriseUndPurchaseOrder) String() string { return proto.CompactTextString(m) }
func (*EnterpriseUndPurchaseOrder) ProtoMessage()    {}
func (*EnterpriseUndPurchaseOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_0031edbd5eb0f2fc, []int{1}
}
func (m *EnterpriseUndPurchaseOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnterpriseUndPurchaseOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnterpriseUndPurchaseOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnterpriseUndPurchaseOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnterpriseUndPurchaseOrder.Merge(m, src)
}
func (m *EnterpriseUndPurchaseOrder) XXX_Size() int {
	return m.Size()
}
func (m *EnterpriseUndPurchaseOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_EnterpriseUndPurchaseOrder.DiscardUnknown(m)
}

var xxx_messageInfo_EnterpriseUndPurchaseOrder proto.InternalMessageInfo

func (m *EnterpriseUndPurchaseOrder) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EnterpriseUndPurchaseOrder) GetPurchaser() string {
	if m != nil {
		return m.Purchaser
	}
	return ""
}

func (m *EnterpriseUndPurchaseOrder) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *EnterpriseUndPurchaseOrder) GetStatus() PurchaseOrderStatus {
	if m != nil {
		return m.Status
	}
	return StatusNil
}

func (m *EnterpriseUndPurchaseOrder) GetRaiseTime() uint64 {
	if m != nil {
		return m.RaiseTime
	}
	return 0
}

func (m *EnterpriseUndPurchaseOrder) GetCompletionTime() uint64 {
	if m != nil {
		return m.CompletionTime
	}
	return 0
}

func (m *EnterpriseUndPurchaseOrder) GetDecisions() []*PurchaseOrderDecision {
	if m != nil {
		return m.Decisions
	}
	return nil
}

type PurchaseOrders struct {
	PurchaseOrders []*EnterpriseUndPurchaseOrder `protobuf:"bytes,1,rep,name=purchase_orders,json=purchaseOrders,proto3" json:"purchase_orders,omitempty"`
}

func (m *PurchaseOrders) Reset()         { *m = PurchaseOrders{} }
func (m *PurchaseOrders) String() string { return proto.CompactTextString(m) }
func (*PurchaseOrders) ProtoMessage()    {}
func (*PurchaseOrders) Descriptor() ([]byte, []int) {
	return fileDescriptor_0031edbd5eb0f2fc, []int{2}
}
func (m *PurchaseOrders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PurchaseOrders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PurchaseOrders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PurchaseOrders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PurchaseOrders.Merge(m, src)
}
func (m *PurchaseOrders) XXX_Size() int {
	return m.Size()
}
func (m *PurchaseOrders) XXX_DiscardUnknown() {
	xxx_messageInfo_PurchaseOrders.DiscardUnknown(m)
}

var xxx_messageInfo_PurchaseOrders proto.InternalMessageInfo

func (m *PurchaseOrders) GetPurchaseOrders() []*EnterpriseUndPurchaseOrder {
	if m != nil {
		return m.PurchaseOrders
	}
	return nil
}

type LockedUnd struct {
	Owner  string     `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Amount types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *LockedUnd) Reset()         { *m = LockedUnd{} }
func (m *LockedUnd) String() string { return proto.CompactTextString(m) }
func (*LockedUnd) ProtoMessage()    {}
func (*LockedUnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_0031edbd5eb0f2fc, []int{3}
}
func (m *LockedUnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockedUnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockedUnd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockedUnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockedUnd.Merge(m, src)
}
func (m *LockedUnd) XXX_Size() int {
	return m.Size()
}
func (m *LockedUnd) XXX_DiscardUnknown() {
	xxx_messageInfo_LockedUnd.DiscardUnknown(m)
}

var xxx_messageInfo_LockedUnd proto.InternalMessageInfo

func (m *LockedUnd) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *LockedUnd) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type EnterpriseUserAccount struct {
	Owner    string     `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Locked   types.Coin `protobuf:"bytes,2,opt,name=locked,proto3" json:"locked"`
	Unlocked types.Coin `protobuf:"bytes,3,opt,name=unlocked,proto3" json:"unlocked"`
	Total    types.Coin `protobuf:"bytes,4,opt,name=total,proto3" json:"total"`
}

func (m *EnterpriseUserAccount) Reset()         { *m = EnterpriseUserAccount{} }
func (m *EnterpriseUserAccount) String() string { return proto.CompactTextString(m) }
func (*EnterpriseUserAccount) ProtoMessage()    {}
func (*EnterpriseUserAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_0031edbd5eb0f2fc, []int{4}
}
func (m *EnterpriseUserAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnterpriseUserAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnterpriseUserAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnterpriseUserAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnterpriseUserAccount.Merge(m, src)
}
func (m *EnterpriseUserAccount) XXX_Size() int {
	return m.Size()
}
func (m *EnterpriseUserAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_EnterpriseUserAccount.DiscardUnknown(m)
}

var xxx_messageInfo_EnterpriseUserAccount proto.InternalMessageInfo

func (m *EnterpriseUserAccount) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EnterpriseUserAccount) GetLocked() types.Coin {
	if m != nil {
		return m.Locked
	}
	return types.Coin{}
}

func (m *EnterpriseUserAccount) GetUnlocked() types.Coin {
	if m != nil {
		return m.Unlocked
	}
	return types.Coin{}
}

func (m *EnterpriseUserAccount) GetTotal() types.Coin {
	if m != nil {
		return m.Total
	}
	return types.Coin{}
}

type UndSupply struct {
	Denom  string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Locked uint64 `protobuf:"varint,3,opt,name=locked,proto3" json:"locked,omitempty"`
	Total  uint64 `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *UndSupply) Reset()         { *m = UndSupply{} }
func (m *UndSupply) String() string { return proto.CompactTextString(m) }
func (*UndSupply) ProtoMessage()    {}
func (*UndSupply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0031edbd5eb0f2fc, []int{5}
}
func (m *UndSupply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UndSupply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UndSupply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UndSupply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndSupply.Merge(m, src)
}
func (m *UndSupply) XXX_Size() int {
	return m.Size()
}
func (m *UndSupply) XXX_DiscardUnknown() {
	xxx_messageInfo_UndSupply.DiscardUnknown(m)
}

var xxx_messageInfo_UndSupply proto.InternalMessageInfo

func (m *UndSupply) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *UndSupply) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *UndSupply) GetLocked() uint64 {
	if m != nil {
		return m.Locked
	}
	return 0
}

func (m *UndSupply) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type WhitelistAddresses struct {
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *WhitelistAddresses) Reset()         { *m = WhitelistAddresses{} }
func (m *WhitelistAddresses) String() string { return proto.CompactTextString(m) }
func (*WhitelistAddresses) ProtoMessage()    {}
func (*WhitelistAddresses) Descriptor() ([]byte, []int) {
	return fileDescriptor_0031edbd5eb0f2fc, []int{6}
}
func (m *WhitelistAddresses) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhitelistAddresses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WhitelistAddresses.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WhitelistAddresses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhitelistAddresses.Merge(m, src)
}
func (m *WhitelistAddresses) XXX_Size() int {
	return m.Size()
}
func (m *WhitelistAddresses) XXX_DiscardUnknown() {
	xxx_messageInfo_WhitelistAddresses.DiscardUnknown(m)
}

var xxx_messageInfo_WhitelistAddresses proto.InternalMessageInfo

func (m *WhitelistAddresses) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type Params struct {
	EntSigners        string `protobuf:"bytes,1,opt,name=ent_signers,json=entSigners,proto3" json:"ent_signers,omitempty"`
	Denom             string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	MinAccepts        uint64 `protobuf:"varint,3,opt,name=min_accepts,json=minAccepts,proto3" json:"min_accepts,omitempty"`
	DecisionTimeLimit uint64 `protobuf:"varint,4,opt,name=decision_time_limit,json=decisionTimeLimit,proto3" json:"decision_time_limit,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_0031edbd5eb0f2fc, []int{7}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetEntSigners() string {
	if m != nil {
		return m.EntSigners
	}
	return ""
}

func (m *Params) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Params) GetMinAccepts() uint64 {
	if m != nil {
		return m.MinAccepts
	}
	return 0
}

func (m *Params) GetDecisionTimeLimit() uint64 {
	if m != nil {
		return m.DecisionTimeLimit
	}
	return 0
}

func init() {
	proto.RegisterEnum("mainchain.enterprise.v1.PurchaseOrderStatus", PurchaseOrderStatus_name, PurchaseOrderStatus_value)
	proto.RegisterEnum("mainchain.enterprise.v1.WhitelistAction", WhitelistAction_name, WhitelistAction_value)
	proto.RegisterType((*PurchaseOrderDecision)(nil), "mainchain.enterprise.v1.PurchaseOrderDecision")
	proto.RegisterType((*EnterpriseUndPurchaseOrder)(nil), "mainchain.enterprise.v1.EnterpriseUndPurchaseOrder")
	proto.RegisterType((*PurchaseOrders)(nil), "mainchain.enterprise.v1.PurchaseOrders")
	proto.RegisterType((*LockedUnd)(nil), "mainchain.enterprise.v1.LockedUnd")
	proto.RegisterType((*EnterpriseUserAccount)(nil), "mainchain.enterprise.v1.EnterpriseUserAccount")
	proto.RegisterType((*UndSupply)(nil), "mainchain.enterprise.v1.UndSupply")
	proto.RegisterType((*WhitelistAddresses)(nil), "mainchain.enterprise.v1.WhitelistAddresses")
	proto.RegisterType((*Params)(nil), "mainchain.enterprise.v1.Params")
}

func init() {
	proto.RegisterFile("mainchain/enterprise/v1/enterprise.proto", fileDescriptor_0031edbd5eb0f2fc)
}

var fileDescriptor_0031edbd5eb0f2fc = []byte{
	// 869 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x16, 0x65, 0x59, 0x8d, 0xc6, 0x89, 0xac, 0xae, 0x7f, 0xa2, 0x10, 0xad, 0x4c, 0xa8, 0x87,
	0xaa, 0x41, 0x4b, 0xd5, 0x0e, 0xda, 0x1c, 0x7a, 0x62, 0x24, 0x02, 0x51, 0xa1, 0xd8, 0x2e, 0x25,
	0x37, 0x40, 0x50, 0x40, 0xa0, 0xc9, 0xad, 0xbc, 0x8d, 0xb8, 0x4b, 0x70, 0x57, 0x6e, 0xf3, 0x06,
	0x85, 0x4e, 0x79, 0x01, 0xf5, 0xd2, 0x47, 0xe8, 0x4b, 0xe4, 0x98, 0x63, 0x51, 0x14, 0x6d, 0x61,
	0xbf, 0x48, 0xb1, 0xbb, 0xa4, 0x44, 0xb9, 0x36, 0xe0, 0xe6, 0xc6, 0x99, 0xfd, 0xbe, 0x9d, 0x6f,
	0x66, 0x76, 0x86, 0xd0, 0x8a, 0x7c, 0x42, 0x83, 0x33, 0x9f, 0xd0, 0x36, 0xa6, 0x02, 0x27, 0x71,
	0x42, 0x38, 0x6e, 0x9f, 0xef, 0xe7, 0x2c, 0x3b, 0x4e, 0x98, 0x60, 0xe8, 0xfe, 0x02, 0x69, 0xe7,
	0xce, 0xce, 0xf7, 0xcd, 0x66, 0xc0, 0x78, 0xc4, 0xf8, 0x88, 0x87, 0x2f, 0xdb, 0xa7, 0xbe, 0x62,
	0x9f, 0x62, 0xe1, 0xef, 0xb7, 0x03, 0x46, 0xa8, 0x26, 0x9b, 0xdb, 0x63, 0x36, 0x66, 0xea, 0xb3,
	0x2d, 0xbf, 0xb4, 0xb7, 0xf9, 0x8b, 0x01, 0x3b, 0xc7, 0xd3, 0x24, 0x38, 0xf3, 0x39, 0x3e, 0x4a,
	0x42, 0x9c, 0x74, 0x71, 0x40, 0x38, 0x61, 0x14, 0xed, 0x42, 0x99, 0x93, 0x31, 0xc5, 0x49, 0xdd,
	0xb0, 0x8c, 0x56, 0xc5, 0x4b, 0x2d, 0xf4, 0x14, 0xee, 0x84, 0x29, 0xa6, 0x5e, 0xb4, 0x8c, 0x56,
	0xf5, 0xe0, 0x53, 0xfb, 0x06, 0x5d, 0xf6, 0xca, 0xcd, 0x03, 0xe1, 0x8b, 0x29, 0xf7, 0x16, 0x6c,
	0xf4, 0x11, 0xdc, 0xcb, 0xbe, 0x47, 0x82, 0x44, 0xb8, 0xbe, 0x66, 0x19, 0xad, 0x92, 0x77, 0x37,
	0x73, 0x0e, 0x49, 0x84, 0x9b, 0x7f, 0x17, 0xc1, 0x74, 0x17, 0x97, 0x9e, 0xd0, 0x70, 0xe5, 0x4e,
	0x54, 0x85, 0x22, 0x09, 0x95, 0xc2, 0x92, 0x57, 0x24, 0x21, 0xfa, 0x00, 0x2a, 0x71, 0x0a, 0x48,
	0x94, 0xbc, 0x8a, 0xb7, 0x74, 0xa0, 0xc7, 0x50, 0xf6, 0x23, 0x36, 0xa5, 0x42, 0x85, 0xda, 0x38,
	0x78, 0x60, 0xeb, 0xc2, 0xd9, 0xb2, 0x68, 0x76, 0x5a, 0x34, 0xbb, 0xc3, 0x08, 0x7d, 0x52, 0x7a,
	0xf3, 0xd7, 0x5e, 0xc1, 0x4b, 0xe1, 0xa8, 0x0b, 0x65, 0xae, 0xe4, 0xd7, 0x4b, 0xef, 0x90, 0x72,
	0xca, 0x45, 0x1f, 0x02, 0x24, 0x3e, 0xe1, 0x58, 0x67, 0xbb, 0xae, 0x44, 0x57, 0x94, 0x47, 0xa6,
	0x8a, 0x3e, 0x86, 0xcd, 0x80, 0x45, 0xf1, 0x04, 0x8b, 0x45, 0x45, 0xca, 0x0a, 0x53, 0x5d, 0xba,
	0x15, 0xb0, 0x0f, 0x95, 0xac, 0x46, 0xbc, 0xfe, 0x9e, 0xb5, 0xd6, 0xda, 0x38, 0xb0, 0x6f, 0x27,
	0x28, 0xeb, 0xae, 0xb7, 0xbc, 0xa0, 0x49, 0xa1, 0xba, 0x82, 0xe1, 0xe8, 0x3b, 0xd8, 0xcc, 0x6a,
	0x36, 0x62, 0xca, 0x55, 0x37, 0x54, 0x94, 0x47, 0x37, 0x46, 0xb9, 0xb9, 0x45, 0x5e, 0x35, 0x5e,
	0xb9, 0xbd, 0xf9, 0x02, 0x2a, 0x7d, 0x16, 0xbc, 0xc4, 0xe1, 0x09, 0x0d, 0xd1, 0x36, 0xac, 0xb3,
	0x1f, 0x97, 0x8f, 0x4c, 0x1b, 0xb9, 0x3e, 0x15, 0xff, 0x57, 0x9f, 0x9a, 0x7f, 0x18, 0xb0, 0x93,
	0x93, 0xc2, 0x71, 0xe2, 0x04, 0x81, 0xea, 0xe0, 0x8d, 0x81, 0x26, 0x4a, 0xcb, 0xad, 0x03, 0x69,
	0x38, 0xfa, 0x0a, 0xee, 0x4c, 0x69, 0x4a, 0xbd, 0xe5, 0x5b, 0x5a, 0x10, 0xd0, 0x17, 0xb0, 0x2e,
	0x98, 0xf0, 0x27, 0xea, 0x31, 0xdd, 0x82, 0xa9, 0xd1, 0xcd, 0x31, 0x54, 0x4e, 0x68, 0x38, 0x98,
	0xc6, 0xf1, 0xe4, 0x95, 0xcc, 0x27, 0xc4, 0x94, 0x45, 0x59, 0x3e, 0xca, 0x90, 0x43, 0x9b, 0x2b,
	0x5c, 0x69, 0xf1, 0x7e, 0x77, 0x17, 0x79, 0xea, 0x19, 0xcb, 0xd2, 0xd8, 0xce, 0x2b, 0x29, 0x65,
	0x81, 0x0e, 0x00, 0x3d, 0x3f, 0x23, 0x02, 0x4f, 0x08, 0x17, 0x4e, 0x18, 0x26, 0x98, 0x73, 0xcc,
	0xe5, 0x68, 0xf9, 0x99, 0xa1, 0xde, 0x43, 0xc5, 0x5b, 0x3a, 0x9a, 0xaf, 0x0d, 0x28, 0x1f, 0xfb,
	0x89, 0x1f, 0x71, 0xb4, 0x07, 0x1b, 0x98, 0x8a, 0x91, 0xde, 0x17, 0x3c, 0x15, 0x08, 0x98, 0x8a,
	0x81, 0xf6, 0x2c, 0xb5, 0x17, 0xf3, 0xda, 0xf7, 0x60, 0x23, 0x22, 0x74, 0xe4, 0x07, 0x01, 0x8e,
	0x05, 0x4f, 0x85, 0x42, 0x44, 0xa8, 0xa3, 0x3d, 0xc8, 0x86, 0xad, 0x95, 0x7d, 0x31, 0x9a, 0x90,
	0x88, 0x88, 0x54, 0xfa, 0xfb, 0xf9, 0xad, 0xd1, 0x97, 0x07, 0x0f, 0xff, 0x34, 0x60, 0xeb, 0x9a,
	0x71, 0x94, 0x63, 0x38, 0x18, 0x3a, 0xc3, 0x93, 0xc1, 0xe8, 0xb0, 0xd7, 0xaf, 0x15, 0xcc, 0x7b,
	0xb3, 0xb9, 0x55, 0xd1, 0x67, 0x87, 0x64, 0x22, 0xd7, 0x52, 0x7a, 0xec, 0x39, 0xbd, 0x81, 0xdb,
	0xad, 0x19, 0x66, 0x6d, 0x36, 0xb7, 0xee, 0xa6, 0xc3, 0x2c, 0xc7, 0x35, 0x94, 0xb3, 0x9a, 0x82,
	0x9c, 0x4e, 0xc7, 0x3d, 0x1e, 0xba, 0xdd, 0x5a, 0xd1, 0x44, 0xb3, 0xb9, 0x55, 0xd5, 0x30, 0xad,
	0x79, 0x05, 0xe8, 0xb9, 0x5f, 0xbb, 0x1d, 0x09, 0x5c, 0xcb, 0x03, 0x3d, 0xfc, 0x03, 0x0e, 0x24,
	0xf0, 0x13, 0xa8, 0xa5, 0xc0, 0xce, 0xd1, 0xb3, 0xe3, 0xbe, 0x2b, 0x91, 0x25, 0x73, 0x6b, 0x36,
	0xb7, 0x36, 0x35, 0xb2, 0xa3, 0x97, 0x00, 0x0e, 0xcd, 0xd2, 0xcf, 0xbf, 0x36, 0x0a, 0x0f, 0x7f,
	0x33, 0x60, 0x73, 0xd9, 0xa6, 0x40, 0x6e, 0x07, 0xf4, 0x39, 0x6c, 0x3f, 0x7f, 0xda, 0x1b, 0xba,
	0xfd, 0xde, 0x60, 0x38, 0x72, 0x3a, 0xc3, 0xde, 0xd1, 0x61, 0x9a, 0xe4, 0xee, 0x6c, 0x6e, 0xa1,
	0x2b, 0x70, 0x99, 0xed, 0x75, 0x0c, 0xa7, 0x2b, 0x93, 0xbe, 0x8e, 0xe1, 0x84, 0x21, 0xfa, 0x12,
	0xee, 0xff, 0x87, 0xe1, 0xb9, 0xcf, 0x8e, 0xbe, 0x75, 0x6b, 0x45, 0xf3, 0xc1, 0x6c, 0x6e, 0xed,
	0x5c, 0x21, 0x79, 0x38, 0x62, 0xe7, 0x58, 0xab, 0x7e, 0xf2, 0xcd, 0x9b, 0x8b, 0x86, 0xf1, 0xf6,
	0xa2, 0x61, 0xfc, 0x73, 0xd1, 0x30, 0x5e, 0x5f, 0x36, 0x0a, 0x6f, 0x2f, 0x1b, 0x85, 0xdf, 0x2f,
	0x1b, 0x85, 0x17, 0x8f, 0xc7, 0x44, 0x9c, 0x4d, 0x4f, 0xed, 0x80, 0x45, 0xed, 0x29, 0x25, 0xdf,
	0x93, 0xc0, 0x97, 0xec, 0xcf, 0xa4, 0xbd, 0xfc, 0x45, 0xfe, 0x94, 0xff, 0x49, 0x8a, 0x57, 0x31,
	0xe6, 0xa7, 0x65, 0xf5, 0x2b, 0x7b, 0xf4, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfd, 0x96, 0xcb,
	0xa8, 0x49, 0x07, 0x00, 0x00,
}

func (m *PurchaseOrderDecision) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PurchaseOrderDecision) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PurchaseOrderDecision) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DecisionTime != 0 {
		i = encodeVarintEnterprise(dAtA, i, uint64(m.DecisionTime))
		i--
		dAtA[i] = 0x18
	}
	if m.Decision != 0 {
		i = encodeVarintEnterprise(dAtA, i, uint64(m.Decision))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintEnterprise(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnterpriseUndPurchaseOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterpriseUndPurchaseOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnterpriseUndPurchaseOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Decisions) > 0 {
		for iNdEx := len(m.Decisions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Decisions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEnterprise(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.CompletionTime != 0 {
		i = encodeVarintEnterprise(dAtA, i, uint64(m.CompletionTime))
		i--
		dAtA[i] = 0x30
	}
	if m.RaiseTime != 0 {
		i = encodeVarintEnterprise(dAtA, i, uint64(m.RaiseTime))
		i--
		dAtA[i] = 0x28
	}
	if m.Status != 0 {
		i = encodeVarintEnterprise(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEnterprise(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Purchaser) > 0 {
		i -= len(m.Purchaser)
		copy(dAtA[i:], m.Purchaser)
		i = encodeVarintEnterprise(dAtA, i, uint64(len(m.Purchaser)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEnterprise(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PurchaseOrders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PurchaseOrders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PurchaseOrders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PurchaseOrders) > 0 {
		for iNdEx := len(m.PurchaseOrders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PurchaseOrders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEnterprise(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LockedUnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockedUnd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockedUnd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEnterprise(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEnterprise(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnterpriseUserAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterpriseUserAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnterpriseUserAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Total.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEnterprise(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Unlocked.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEnterprise(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Locked.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEnterprise(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEnterprise(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UndSupply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UndSupply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UndSupply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintEnterprise(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x20
	}
	if m.Locked != 0 {
		i = encodeVarintEnterprise(dAtA, i, uint64(m.Locked))
		i--
		dAtA[i] = 0x18
	}
	if m.Amount != 0 {
		i = encodeVarintEnterprise(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintEnterprise(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WhitelistAddresses) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhitelistAddresses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhitelistAddresses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintEnterprise(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DecisionTimeLimit != 0 {
		i = encodeVarintEnterprise(dAtA, i, uint64(m.DecisionTimeLimit))
		i--
		dAtA[i] = 0x20
	}
	if m.MinAccepts != 0 {
		i = encodeVarintEnterprise(dAtA, i, uint64(m.MinAccepts))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintEnterprise(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EntSigners) > 0 {
		i -= len(m.EntSigners)
		copy(dAtA[i:], m.EntSigners)
		i = encodeVarintEnterprise(dAtA, i, uint64(len(m.EntSigners)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEnterprise(dAtA []byte, offset int, v uint64) int {
	offset -= sovEnterprise(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PurchaseOrderDecision) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovEnterprise(uint64(l))
	}
	if m.Decision != 0 {
		n += 1 + sovEnterprise(uint64(m.Decision))
	}
	if m.DecisionTime != 0 {
		n += 1 + sovEnterprise(uint64(m.DecisionTime))
	}
	return n
}

func (m *EnterpriseUndPurchaseOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEnterprise(uint64(m.Id))
	}
	l = len(m.Purchaser)
	if l > 0 {
		n += 1 + l + sovEnterprise(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovEnterprise(uint64(l))
	if m.Status != 0 {
		n += 1 + sovEnterprise(uint64(m.Status))
	}
	if m.RaiseTime != 0 {
		n += 1 + sovEnterprise(uint64(m.RaiseTime))
	}
	if m.CompletionTime != 0 {
		n += 1 + sovEnterprise(uint64(m.CompletionTime))
	}
	if len(m.Decisions) > 0 {
		for _, e := range m.Decisions {
			l = e.Size()
			n += 1 + l + sovEnterprise(uint64(l))
		}
	}
	return n
}

func (m *PurchaseOrders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PurchaseOrders) > 0 {
		for _, e := range m.PurchaseOrders {
			l = e.Size()
			n += 1 + l + sovEnterprise(uint64(l))
		}
	}
	return n
}

func (m *LockedUnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEnterprise(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovEnterprise(uint64(l))
	return n
}

func (m *EnterpriseUserAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEnterprise(uint64(l))
	}
	l = m.Locked.Size()
	n += 1 + l + sovEnterprise(uint64(l))
	l = m.Unlocked.Size()
	n += 1 + l + sovEnterprise(uint64(l))
	l = m.Total.Size()
	n += 1 + l + sovEnterprise(uint64(l))
	return n
}

func (m *UndSupply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovEnterprise(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovEnterprise(uint64(m.Amount))
	}
	if m.Locked != 0 {
		n += 1 + sovEnterprise(uint64(m.Locked))
	}
	if m.Total != 0 {
		n += 1 + sovEnterprise(uint64(m.Total))
	}
	return n
}

func (m *WhitelistAddresses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovEnterprise(uint64(l))
		}
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EntSigners)
	if l > 0 {
		n += 1 + l + sovEnterprise(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovEnterprise(uint64(l))
	}
	if m.MinAccepts != 0 {
		n += 1 + sovEnterprise(uint64(m.MinAccepts))
	}
	if m.DecisionTimeLimit != 0 {
		n += 1 + sovEnterprise(uint64(m.DecisionTimeLimit))
	}
	return n
}

func sovEnterprise(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEnterprise(x uint64) (n int) {
	return sovEnterprise(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PurchaseOrderDecision) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnterprise
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PurchaseOrderDecision: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PurchaseOrderDecision: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnterprise
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnterprise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decision", wireType)
			}
			m.Decision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decision |= PurchaseOrderStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTime", wireType)
			}
			m.DecisionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEnterprise(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnterprise
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterpriseUndPurchaseOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnterprise
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterpriseUndPurchaseOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterpriseUndPurchaseOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purchaser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnterprise
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnterprise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Purchaser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEnterprise
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEnterprise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= PurchaseOrderStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaiseTime", wireType)
			}
			m.RaiseTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaiseTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
			}
			m.CompletionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompletionTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decisions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEnterprise
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEnterprise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Decisions = append(m.Decisions, &PurchaseOrderDecision{})
			if err := m.Decisions[len(m.Decisions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEnterprise(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnterprise
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PurchaseOrders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnterprise
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PurchaseOrders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PurchaseOrders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseOrders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEnterprise
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEnterprise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PurchaseOrders = append(m.PurchaseOrders, &EnterpriseUndPurchaseOrder{})
			if err := m.PurchaseOrders[len(m.PurchaseOrders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEnterprise(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnterprise
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockedUnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnterprise
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockedUnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockedUnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnterprise
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnterprise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEnterprise
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEnterprise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEnterprise(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnterprise
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterpriseUserAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnterprise
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterpriseUserAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterpriseUserAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnterprise
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnterprise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEnterprise
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEnterprise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Locked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unlocked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEnterprise
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEnterprise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Unlocked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEnterprise
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEnterprise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Total.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEnterprise(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnterprise
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UndSupply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnterprise
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UndSupply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UndSupply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnterprise
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnterprise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locked", wireType)
			}
			m.Locked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Locked |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEnterprise(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnterprise
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhitelistAddresses) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnterprise
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhitelistAddresses: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhitelistAddresses: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnterprise
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnterprise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEnterprise(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnterprise
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnterprise
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntSigners", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnterprise
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnterprise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntSigners = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnterprise
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnterprise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAccepts", wireType)
			}
			m.MinAccepts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinAccepts |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTimeLimit", wireType)
			}
			m.DecisionTimeLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionTimeLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEnterprise(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnterprise
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEnterprise(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEnterprise
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEnterprise
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEnterprise
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEnterprise
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEnterprise        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEnterprise          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEnterprise = fmt.Errorf("proto: unexpected end of group")
)
