// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mainchain/enterprise/v2/enterprise.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PurchaseOrderStatus enumerates the valid statuses for a given purchase order.
type PurchaseOrderStatus int32

const (
	// STATUS_NIL defines a no-op status.
	StatusNil PurchaseOrderStatus = 0
	// STATUS_RAISED defines a raised status.
	StatusRaised PurchaseOrderStatus = 1
	// STATUS_ACCEPTED defines an accepted status.
	StatusAccepted PurchaseOrderStatus = 2
	// STATUS_REJECTED defines a rejected status.
	StatusRejected PurchaseOrderStatus = 3
	// STATUS_COMPLETED defines a completed status.
	StatusCompleted PurchaseOrderStatus = 4
)

var PurchaseOrderStatus_name = map[int32]string{
	0: "STATUS_NIL",
	1: "STATUS_RAISED",
	2: "STATUS_ACCEPTED",
	3: "STATUS_REJECTED",
	4: "STATUS_COMPLETED",
}

var PurchaseOrderStatus_value = map[string]int32{
	"STATUS_NIL":       0,
	"STATUS_RAISED":    1,
	"STATUS_ACCEPTED":  2,
	"STATUS_REJECTED":  3,
	"STATUS_COMPLETED": 4,
}

func (x PurchaseOrderStatus) String() string {
	return proto.EnumName(PurchaseOrderStatus_name, int32(x))
}

func (PurchaseOrderStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2223606e9809fdeb, []int{0}
}

// WhitelistAction enumerates the valid actions for whitelisting addresses.
type WhitelistAction int32

const (
	// WHITELIST_ACTION_NIL defines a no-op action.
	WhitelistActionNil WhitelistAction = 0
	// WHITELIST_ACTION_ADD defines an add action.
	WhitelistActionAdd WhitelistAction = 1
	// WHITELIST_ACTION_REMOVE defines a remove action.
	WhitelistActionRemove WhitelistAction = 2
)

var WhitelistAction_name = map[int32]string{
	0: "WHITELIST_ACTION_NIL",
	1: "WHITELIST_ACTION_ADD",
	2: "WHITELIST_ACTION_REMOVE",
}

var WhitelistAction_value = map[string]int32{
	"WHITELIST_ACTION_NIL":    0,
	"WHITELIST_ACTION_ADD":    1,
	"WHITELIST_ACTION_REMOVE": 2,
}

func (x WhitelistAction) String() string {
	return proto.EnumName(WhitelistAction_name, int32(x))
}

func (WhitelistAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2223606e9809fdeb, []int{1}
}

// PurchaseOrderDecision defines a decision made for a given purchase order, ie,
// whether to accept or reject
type PurchaseOrderDecision struct {
	// signer is an authorised address for making decisions
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// decision is the decision made, i.e. accept/reject
	Decision PurchaseOrderStatus `protobuf:"varint,2,opt,name=decision,proto3,enum=mainchain.enterprise.v2.PurchaseOrderStatus" json:"decision,omitempty"`
	// decision_time is a unix epoch value of the decision submission time
	DecisionTime uint64 `protobuf:"varint,3,opt,name=decision_time,json=decisionTime,proto3" json:"decision_time,omitempty"`
}

func (m *PurchaseOrderDecision) Reset()         { *m = PurchaseOrderDecision{} }
func (m *PurchaseOrderDecision) String() string { return proto.CompactTextString(m) }
func (*PurchaseOrderDecision) ProtoMessage()    {}
func (*PurchaseOrderDecision) Descriptor() ([]byte, []int) {
	return fileDescriptor_2223606e9809fdeb, []int{0}
}
func (m *PurchaseOrderDecision) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PurchaseOrderDecision) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PurchaseOrderDecision.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PurchaseOrderDecision) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PurchaseOrderDecision.Merge(m, src)
}
func (m *PurchaseOrderDecision) XXX_Size() int {
	return m.Size()
}
func (m *PurchaseOrderDecision) XXX_DiscardUnknown() {
	xxx_messageInfo_PurchaseOrderDecision.DiscardUnknown(m)
}

var xxx_messageInfo_PurchaseOrderDecision proto.InternalMessageInfo

func (m *PurchaseOrderDecision) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *PurchaseOrderDecision) GetDecision() PurchaseOrderStatus {
	if m != nil {
		return m.Decision
	}
	return StatusNil
}

func (m *PurchaseOrderDecision) GetDecisionTime() uint64 {
	if m != nil {
		return m.DecisionTime
	}
	return 0
}

// EnterpriseUndPurchaseOrder defines a purchase order raised by a whitelisted address
type EnterpriseUndPurchaseOrder struct {
	// id is the purchase order ID
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// purchaser is the address of the user who raised the order
	Purchaser string `protobuf:"bytes,2,opt,name=purchaser,proto3" json:"purchaser,omitempty"`
	// amount is the amount being raised for
	Amount types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	// status is the current PurchaseOrderStatus
	Status PurchaseOrderStatus `protobuf:"varint,4,opt,name=status,proto3,enum=mainchain.enterprise.v2.PurchaseOrderStatus" json:"status,omitempty"`
	// raise_time is a unix epoch value of the order submission time
	RaiseTime uint64 `protobuf:"varint,5,opt,name=raise_time,json=raiseTime,proto3" json:"raise_time,omitempty"`
	// completion_time is a unix epoch value of the time the order was completed
	CompletionTime uint64 `protobuf:"varint,6,opt,name=completion_time,json=completionTime,proto3" json:"completion_time,omitempty"`
	// decisions is an array of decisions made by authorised addresses
	Decisions PurchaseOrderDecisions `protobuf:"bytes,7,rep,name=decisions,proto3,castrepeated=PurchaseOrderDecisions" json:"decisions"`
}

func (m *EnterpriseUndPurchaseOrder) Reset()         { *m = EnterpriseUndPurchaseOrder{} }
func (m *EnterpriseUndPurchaseOrder) String() string { return proto.CompactTextString(m) }
func (*EnterpriseUndPurchaseOrder) ProtoMessage()    {}
func (*EnterpriseUndPurchaseOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_2223606e9809fdeb, []int{1}
}
func (m *EnterpriseUndPurchaseOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnterpriseUndPurchaseOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnterpriseUndPurchaseOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnterpriseUndPurchaseOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnterpriseUndPurchaseOrder.Merge(m, src)
}
func (m *EnterpriseUndPurchaseOrder) XXX_Size() int {
	return m.Size()
}
func (m *EnterpriseUndPurchaseOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_EnterpriseUndPurchaseOrder.DiscardUnknown(m)
}

var xxx_messageInfo_EnterpriseUndPurchaseOrder proto.InternalMessageInfo

func (m *EnterpriseUndPurchaseOrder) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EnterpriseUndPurchaseOrder) GetPurchaser() string {
	if m != nil {
		return m.Purchaser
	}
	return ""
}

func (m *EnterpriseUndPurchaseOrder) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *EnterpriseUndPurchaseOrder) GetStatus() PurchaseOrderStatus {
	if m != nil {
		return m.Status
	}
	return StatusNil
}

func (m *EnterpriseUndPurchaseOrder) GetRaiseTime() uint64 {
	if m != nil {
		return m.RaiseTime
	}
	return 0
}

func (m *EnterpriseUndPurchaseOrder) GetCompletionTime() uint64 {
	if m != nil {
		return m.CompletionTime
	}
	return 0
}

func (m *EnterpriseUndPurchaseOrder) GetDecisions() PurchaseOrderDecisions {
	if m != nil {
		return m.Decisions
	}
	return nil
}

// PurchaseOrders defines a list of purchase orders
type PurchaseOrders struct {
	PurchaseOrders []*EnterpriseUndPurchaseOrder `protobuf:"bytes,1,rep,name=purchase_orders,json=purchaseOrders,proto3" json:"purchase_orders,omitempty"`
}

func (m *PurchaseOrders) Reset()         { *m = PurchaseOrders{} }
func (m *PurchaseOrders) String() string { return proto.CompactTextString(m) }
func (*PurchaseOrders) ProtoMessage()    {}
func (*PurchaseOrders) Descriptor() ([]byte, []int) {
	return fileDescriptor_2223606e9809fdeb, []int{2}
}
func (m *PurchaseOrders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PurchaseOrders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PurchaseOrders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PurchaseOrders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PurchaseOrders.Merge(m, src)
}
func (m *PurchaseOrders) XXX_Size() int {
	return m.Size()
}
func (m *PurchaseOrders) XXX_DiscardUnknown() {
	xxx_messageInfo_PurchaseOrders.DiscardUnknown(m)
}

var xxx_messageInfo_PurchaseOrders proto.InternalMessageInfo

func (m *PurchaseOrders) GetPurchaseOrders() []*EnterpriseUndPurchaseOrder {
	if m != nil {
		return m.PurchaseOrders
	}
	return nil
}

// LockedUnd defines the amount of locked FUND for an account
type LockedUnd struct {
	// owner is the address of the locked FUND owner
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// amount is the amount currently locked and available to pay for beacon/wrkchain fees
	Amount types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *LockedUnd) Reset()         { *m = LockedUnd{} }
func (m *LockedUnd) String() string { return proto.CompactTextString(m) }
func (*LockedUnd) ProtoMessage()    {}
func (*LockedUnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_2223606e9809fdeb, []int{3}
}
func (m *LockedUnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockedUnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockedUnd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockedUnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockedUnd.Merge(m, src)
}
func (m *LockedUnd) XXX_Size() int {
	return m.Size()
}
func (m *LockedUnd) XXX_DiscardUnknown() {
	xxx_messageInfo_LockedUnd.DiscardUnknown(m)
}

var xxx_messageInfo_LockedUnd proto.InternalMessageInfo

func (m *LockedUnd) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *LockedUnd) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

// EnterpriseUserAccount defines data about an enterprise user
type EnterpriseUserAccount struct {
	// owner is the address of the account
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// locked is the amount the account currently has locked and available to pay for beacon/wrkchain fees
	Locked types.Coin `protobuf:"bytes,2,opt,name=locked,proto3" json:"locked"`
	// unlocked is the amount currently unlocked - i.e. standard FUND in general supply
	Unlocked types.Coin `protobuf:"bytes,3,opt,name=unlocked,proto3" json:"unlocked"`
	// total is the sum of locked and unlocked FUND
	Total types.Coin `protobuf:"bytes,4,opt,name=total,proto3" json:"total"`
}

func (m *EnterpriseUserAccount) Reset()         { *m = EnterpriseUserAccount{} }
func (m *EnterpriseUserAccount) String() string { return proto.CompactTextString(m) }
func (*EnterpriseUserAccount) ProtoMessage()    {}
func (*EnterpriseUserAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_2223606e9809fdeb, []int{4}
}
func (m *EnterpriseUserAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnterpriseUserAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnterpriseUserAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnterpriseUserAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnterpriseUserAccount.Merge(m, src)
}
func (m *EnterpriseUserAccount) XXX_Size() int {
	return m.Size()
}
func (m *EnterpriseUserAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_EnterpriseUserAccount.DiscardUnknown(m)
}

var xxx_messageInfo_EnterpriseUserAccount proto.InternalMessageInfo

func (m *EnterpriseUserAccount) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EnterpriseUserAccount) GetLocked() types.Coin {
	if m != nil {
		return m.Locked
	}
	return types.Coin{}
}

func (m *EnterpriseUserAccount) GetUnlocked() types.Coin {
	if m != nil {
		return m.Unlocked
	}
	return types.Coin{}
}

func (m *EnterpriseUserAccount) GetTotal() types.Coin {
	if m != nil {
		return m.Total
	}
	return types.Coin{}
}

// UndSupply defines the current FUND supply, including locked
type UndSupply struct {
	// denom is the denomination, e.g. nund
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// amount is the amount of unlocked FUND in general supply
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// locked is the amount of locked FUND
	Locked uint64 `protobuf:"varint,3,opt,name=locked,proto3" json:"locked,omitempty"`
	// amount is the sum of locked and unlocked FUND
	Total uint64 `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *UndSupply) Reset()         { *m = UndSupply{} }
func (m *UndSupply) String() string { return proto.CompactTextString(m) }
func (*UndSupply) ProtoMessage()    {}
func (*UndSupply) Descriptor() ([]byte, []int) {
	return fileDescriptor_2223606e9809fdeb, []int{5}
}
func (m *UndSupply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UndSupply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UndSupply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UndSupply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndSupply.Merge(m, src)
}
func (m *UndSupply) XXX_Size() int {
	return m.Size()
}
func (m *UndSupply) XXX_DiscardUnknown() {
	xxx_messageInfo_UndSupply.DiscardUnknown(m)
}

var xxx_messageInfo_UndSupply proto.InternalMessageInfo

func (m *UndSupply) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *UndSupply) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *UndSupply) GetLocked() uint64 {
	if m != nil {
		return m.Locked
	}
	return 0
}

func (m *UndSupply) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

// WhitelistAddresses defines a list of whitelisted addresses authorised to raise enterprise purchase orders
type WhitelistAddresses struct {
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *WhitelistAddresses) Reset()         { *m = WhitelistAddresses{} }
func (m *WhitelistAddresses) String() string { return proto.CompactTextString(m) }
func (*WhitelistAddresses) ProtoMessage()    {}
func (*WhitelistAddresses) Descriptor() ([]byte, []int) {
	return fileDescriptor_2223606e9809fdeb, []int{6}
}
func (m *WhitelistAddresses) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhitelistAddresses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WhitelistAddresses.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WhitelistAddresses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhitelistAddresses.Merge(m, src)
}
func (m *WhitelistAddresses) XXX_Size() int {
	return m.Size()
}
func (m *WhitelistAddresses) XXX_DiscardUnknown() {
	xxx_messageInfo_WhitelistAddresses.DiscardUnknown(m)
}

var xxx_messageInfo_WhitelistAddresses proto.InternalMessageInfo

func (m *WhitelistAddresses) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

// Params defines the parameters for the enterprise module.
type Params struct {
	// ent_signers is a list of addresses authorised to make decisions on raised purchase orders
	EntSigners string `protobuf:"bytes,1,opt,name=ent_signers,json=entSigners,proto3" json:"ent_signers,omitempty"`
	// denom is the denomination of eFUND, e.g. nund
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	// min_accepts is the minumum number of ent_signers required to accept a PO before it is processed and efUND minted
	MinAccepts uint64 `protobuf:"varint,3,opt,name=min_accepts,json=minAccepts,proto3" json:"min_accepts,omitempty"`
	// decision_time_limit is the time limit within which all decisions must be made for a raised purchase order.
	DecisionTimeLimit uint64 `protobuf:"varint,4,opt,name=decision_time_limit,json=decisionTimeLimit,proto3" json:"decision_time_limit,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_2223606e9809fdeb, []int{7}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetEntSigners() string {
	if m != nil {
		return m.EntSigners
	}
	return ""
}

func (m *Params) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Params) GetMinAccepts() uint64 {
	if m != nil {
		return m.MinAccepts
	}
	return 0
}

func (m *Params) GetDecisionTimeLimit() uint64 {
	if m != nil {
		return m.DecisionTimeLimit
	}
	return 0
}

func init() {
	proto.RegisterEnum("mainchain.enterprise.v2.PurchaseOrderStatus", PurchaseOrderStatus_name, PurchaseOrderStatus_value)
	proto.RegisterEnum("mainchain.enterprise.v2.WhitelistAction", WhitelistAction_name, WhitelistAction_value)
	proto.RegisterType((*PurchaseOrderDecision)(nil), "mainchain.enterprise.v2.PurchaseOrderDecision")
	proto.RegisterType((*EnterpriseUndPurchaseOrder)(nil), "mainchain.enterprise.v2.EnterpriseUndPurchaseOrder")
	proto.RegisterType((*PurchaseOrders)(nil), "mainchain.enterprise.v2.PurchaseOrders")
	proto.RegisterType((*LockedUnd)(nil), "mainchain.enterprise.v2.LockedUnd")
	proto.RegisterType((*EnterpriseUserAccount)(nil), "mainchain.enterprise.v2.EnterpriseUserAccount")
	proto.RegisterType((*UndSupply)(nil), "mainchain.enterprise.v2.UndSupply")
	proto.RegisterType((*WhitelistAddresses)(nil), "mainchain.enterprise.v2.WhitelistAddresses")
	proto.RegisterType((*Params)(nil), "mainchain.enterprise.v2.Params")
}

func init() {
	proto.RegisterFile("mainchain/enterprise/v2/enterprise.proto", fileDescriptor_2223606e9809fdeb)
}

var fileDescriptor_2223606e9809fdeb = []byte{
	// 881 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0x3a, 0x8e, 0xe9, 0xbe, 0xb4, 0x8e, 0x99, 0xfc, 0xa9, 0xbb, 0x02, 0x67, 0x65, 0x0e,
	0x98, 0x0a, 0xd6, 0xd4, 0x15, 0xf4, 0xc0, 0x69, 0x63, 0xaf, 0x54, 0x23, 0x37, 0x09, 0x6b, 0x87,
	0x4a, 0x15, 0x92, 0xb5, 0xd9, 0x1d, 0x9c, 0xa1, 0xde, 0x99, 0xd5, 0xce, 0x38, 0xd0, 0x6f, 0x80,
	0x7c, 0xea, 0x17, 0x30, 0x17, 0x6e, 0x5c, 0xf9, 0x12, 0x3d, 0xf6, 0x88, 0x10, 0x02, 0x94, 0x7c,
	0x10, 0xd0, 0xec, 0xec, 0xda, 0xeb, 0x92, 0x48, 0xa6, 0xb7, 0x79, 0x6f, 0x7e, 0xbf, 0x99, 0xdf,
	0x7b, 0x6f, 0xde, 0x1b, 0x68, 0x86, 0x1e, 0xa1, 0xfe, 0xb9, 0x47, 0x68, 0x0b, 0x53, 0x81, 0xe3,
	0x28, 0x26, 0x1c, 0xb7, 0x2e, 0xda, 0x39, 0xcb, 0x8a, 0x62, 0x26, 0x18, 0xba, 0xbb, 0x40, 0x5a,
	0xb9, 0xbd, 0x8b, 0xb6, 0xd1, 0xf0, 0x19, 0x0f, 0x19, 0x1f, 0xf1, 0xe0, 0x79, 0xeb, 0xcc, 0x93,
	0xec, 0x07, 0x67, 0x58, 0x78, 0x0f, 0x5a, 0x3e, 0x23, 0x54, 0x91, 0x8d, 0xdd, 0x31, 0x1b, 0xb3,
	0x64, 0xd9, 0x92, 0x2b, 0xe5, 0x6d, 0xfc, 0xa4, 0xc1, 0xde, 0xc9, 0x34, 0xf6, 0xcf, 0x3d, 0x8e,
	0x8f, 0xe3, 0x00, 0xc7, 0x5d, 0xec, 0x13, 0x4e, 0x18, 0x45, 0xfb, 0x50, 0xe6, 0x64, 0x4c, 0x71,
	0x5c, 0xd3, 0x4c, 0xad, 0xa9, 0xbb, 0xa9, 0x85, 0x1e, 0xc3, 0xad, 0x20, 0xc5, 0xd4, 0x8a, 0xa6,
	0xd6, 0xac, 0xb4, 0x3f, 0xb6, 0x6e, 0xd0, 0x65, 0xad, 0x9c, 0x3c, 0x10, 0x9e, 0x98, 0x72, 0x77,
	0xc1, 0x46, 0x1f, 0xc0, 0x9d, 0x6c, 0x3d, 0x12, 0x24, 0xc4, 0xb5, 0x0d, 0x53, 0x6b, 0x96, 0xdc,
	0xdb, 0x99, 0x73, 0x48, 0x42, 0xdc, 0xf8, 0xa7, 0x08, 0x86, 0xb3, 0x38, 0xf4, 0x94, 0x06, 0x2b,
	0x67, 0xa2, 0x0a, 0x14, 0x49, 0x90, 0x28, 0x2c, 0xb9, 0x45, 0x12, 0xa0, 0xf7, 0x40, 0x8f, 0x52,
	0x40, 0x9c, 0xc8, 0xd3, 0xdd, 0xa5, 0x03, 0x3d, 0x82, 0xb2, 0x17, 0xb2, 0x29, 0x15, 0xc9, 0x55,
	0x5b, 0xed, 0x7b, 0x96, 0x4a, 0x9c, 0x25, 0x93, 0x66, 0xa5, 0x49, 0xb3, 0x3a, 0x8c, 0xd0, 0xc3,
	0xd2, 0xab, 0x3f, 0x0f, 0x0a, 0x6e, 0x0a, 0x47, 0x5d, 0x28, 0xf3, 0x44, 0x7e, 0xad, 0xf4, 0x16,
	0x21, 0xa7, 0x5c, 0xf4, 0x3e, 0x40, 0xec, 0x11, 0x8e, 0x55, 0xb4, 0x9b, 0x89, 0x68, 0x3d, 0xf1,
	0xc8, 0x50, 0xd1, 0x87, 0xb0, 0xed, 0xb3, 0x30, 0x9a, 0x60, 0xb1, 0xc8, 0x48, 0x39, 0xc1, 0x54,
	0x96, 0xee, 0x04, 0x38, 0x01, 0x3d, 0xcb, 0x11, 0xaf, 0xbd, 0x63, 0x6e, 0x34, 0xb7, 0xda, 0xd6,
	0x7a, 0x82, 0xb2, 0xea, 0x1e, 0xd6, 0x65, 0x78, 0xbf, 0xfc, 0x75, 0xb0, 0x7f, 0xed, 0x36, 0x77,
	0x97, 0x17, 0x34, 0x28, 0x54, 0x56, 0x40, 0x1c, 0x7d, 0x03, 0xdb, 0x59, 0x4e, 0x47, 0x2c, 0x71,
	0xd5, 0xb4, 0x44, 0xc5, 0xc3, 0x1b, 0x55, 0xdc, 0x5c, 0x42, 0xb7, 0x12, 0xad, 0x9c, 0xde, 0x78,
	0x06, 0x7a, 0x9f, 0xf9, 0xcf, 0x71, 0x70, 0x4a, 0x03, 0xb4, 0x0b, 0x9b, 0xec, 0xfb, 0xe5, 0x23,
	0x54, 0x46, 0xae, 0x8e, 0xc5, 0xff, 0x55, 0xc7, 0xc6, 0xef, 0x1a, 0xec, 0xe5, 0xa4, 0x70, 0x1c,
	0xdb, 0xbe, 0x9f, 0x54, 0xf8, 0xc6, 0x8b, 0x26, 0x89, 0x96, 0xb5, 0x2f, 0x52, 0x70, 0xf4, 0x05,
	0xdc, 0x9a, 0xd2, 0x94, 0xba, 0xe6, 0x5b, 0x5b, 0x10, 0xd0, 0x67, 0xb0, 0x29, 0x98, 0xf0, 0x26,
	0xc9, 0x63, 0x5b, 0x83, 0xa9, 0xd0, 0x8d, 0x31, 0xe8, 0xa7, 0x34, 0x18, 0x4c, 0xa3, 0x68, 0xf2,
	0x42, 0xc6, 0x13, 0x60, 0xca, 0xc2, 0x2c, 0x9e, 0xc4, 0x90, 0x4d, 0x9d, 0x4b, 0x5c, 0x69, 0xf1,
	0xbe, 0xf7, 0x17, 0x71, 0xaa, 0x1e, 0xcc, 0xc2, 0xd8, 0xcd, 0x2b, 0x29, 0x65, 0x17, 0xb5, 0x01,
	0x3d, 0x3d, 0x27, 0x02, 0x4f, 0x08, 0x17, 0x76, 0x10, 0xc4, 0x98, 0x73, 0xcc, 0x65, 0xeb, 0x79,
	0x99, 0x91, 0xbc, 0x07, 0xdd, 0x5d, 0x3a, 0x1a, 0x2f, 0x35, 0x28, 0x9f, 0x78, 0xb1, 0x17, 0x72,
	0x74, 0x00, 0x5b, 0x98, 0x8a, 0x91, 0x9a, 0x27, 0x3c, 0x15, 0x08, 0x98, 0x8a, 0x81, 0xf2, 0x2c,
	0xb5, 0x17, 0xf3, 0xda, 0x0f, 0x60, 0x2b, 0x24, 0x74, 0xe4, 0xf9, 0x3e, 0x8e, 0x04, 0x4f, 0x85,
	0x42, 0x48, 0xa8, 0xad, 0x3c, 0xc8, 0x82, 0x9d, 0x95, 0x79, 0x32, 0x9a, 0x90, 0x90, 0x88, 0x54,
	0xfa, 0xbb, 0xf9, 0xa9, 0xd2, 0x97, 0x1b, 0xf7, 0xff, 0xd0, 0x60, 0xe7, 0x9a, 0x76, 0x95, 0x6d,
	0x3a, 0x18, 0xda, 0xc3, 0xd3, 0xc1, 0xe8, 0xa8, 0xd7, 0xaf, 0x16, 0x8c, 0x3b, 0xb3, 0xb9, 0xa9,
	0xab, 0xbd, 0x23, 0x32, 0x91, 0x63, 0x2b, 0xdd, 0x76, 0xed, 0xde, 0xc0, 0xe9, 0x56, 0x35, 0xa3,
	0x3a, 0x9b, 0x9b, 0xb7, 0xd3, 0x66, 0x97, 0xed, 0x1c, 0xc8, 0x5e, 0x4e, 0x41, 0x76, 0xa7, 0xe3,
	0x9c, 0x0c, 0x9d, 0x6e, 0xb5, 0x68, 0xa0, 0xd9, 0xdc, 0xac, 0x28, 0x98, 0xd2, 0xbc, 0x02, 0x74,
	0x9d, 0x2f, 0x9d, 0x8e, 0x04, 0x6e, 0xe4, 0x81, 0x2e, 0xfe, 0x0e, 0xfb, 0x12, 0xf8, 0x11, 0x54,
	0x53, 0x60, 0xe7, 0xf8, 0xc9, 0x49, 0xdf, 0x91, 0xc8, 0x92, 0xb1, 0x33, 0x9b, 0x9b, 0xdb, 0x0a,
	0xd9, 0x51, 0x43, 0x02, 0x07, 0x46, 0xe9, 0xc7, 0x9f, 0xeb, 0x85, 0xfb, 0xbf, 0x6a, 0xb0, 0xbd,
	0x2c, 0x93, 0x2f, 0xa7, 0x07, 0xfa, 0x14, 0x76, 0x9f, 0x3e, 0xee, 0x0d, 0x9d, 0x7e, 0x6f, 0x30,
	0x1c, 0xd9, 0x9d, 0x61, 0xef, 0xf8, 0x28, 0x0d, 0x72, 0x7f, 0x36, 0x37, 0xd1, 0x1b, 0x70, 0x19,
	0xed, 0x75, 0x0c, 0xbb, 0x2b, 0x83, 0xbe, 0x8e, 0x61, 0x07, 0x01, 0xfa, 0x1c, 0xee, 0xfe, 0x87,
	0xe1, 0x3a, 0x4f, 0x8e, 0xbf, 0x76, 0xaa, 0x45, 0xe3, 0xde, 0x6c, 0x6e, 0xee, 0xbd, 0x41, 0x72,
	0x71, 0xc8, 0x2e, 0xb0, 0x52, 0x7d, 0xf8, 0xd5, 0xab, 0xcb, 0xba, 0xf6, 0xfa, 0xb2, 0xae, 0xfd,
	0x7d, 0x59, 0xd7, 0x5e, 0x5e, 0xd5, 0x0b, 0xaf, 0xaf, 0xea, 0x85, 0xdf, 0xae, 0xea, 0x85, 0x67,
	0x8f, 0xc6, 0x44, 0x9c, 0x4f, 0xcf, 0x2c, 0x9f, 0x85, 0xad, 0x29, 0x25, 0xdf, 0x12, 0xdf, 0x93,
	0xec, 0x4f, 0xa4, 0xbd, 0xfc, 0x42, 0x7f, 0xc8, 0x7f, 0xa2, 0xe2, 0x45, 0x84, 0xf9, 0x59, 0x39,
	0xf9, 0xea, 0x1e, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x36, 0x01, 0xa2, 0x69, 0x07, 0x00,
	0x00,
}

func (m *PurchaseOrderDecision) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PurchaseOrderDecision) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PurchaseOrderDecision) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DecisionTime != 0 {
		i = encodeVarintEnterprise(dAtA, i, uint64(m.DecisionTime))
		i--
		dAtA[i] = 0x18
	}
	if m.Decision != 0 {
		i = encodeVarintEnterprise(dAtA, i, uint64(m.Decision))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintEnterprise(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnterpriseUndPurchaseOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterpriseUndPurchaseOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnterpriseUndPurchaseOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Decisions) > 0 {
		for iNdEx := len(m.Decisions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Decisions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEnterprise(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.CompletionTime != 0 {
		i = encodeVarintEnterprise(dAtA, i, uint64(m.CompletionTime))
		i--
		dAtA[i] = 0x30
	}
	if m.RaiseTime != 0 {
		i = encodeVarintEnterprise(dAtA, i, uint64(m.RaiseTime))
		i--
		dAtA[i] = 0x28
	}
	if m.Status != 0 {
		i = encodeVarintEnterprise(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEnterprise(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Purchaser) > 0 {
		i -= len(m.Purchaser)
		copy(dAtA[i:], m.Purchaser)
		i = encodeVarintEnterprise(dAtA, i, uint64(len(m.Purchaser)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEnterprise(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PurchaseOrders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PurchaseOrders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PurchaseOrders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PurchaseOrders) > 0 {
		for iNdEx := len(m.PurchaseOrders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PurchaseOrders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEnterprise(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LockedUnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockedUnd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockedUnd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEnterprise(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEnterprise(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnterpriseUserAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterpriseUserAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnterpriseUserAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Total.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEnterprise(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Unlocked.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEnterprise(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Locked.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEnterprise(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEnterprise(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UndSupply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UndSupply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UndSupply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintEnterprise(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x20
	}
	if m.Locked != 0 {
		i = encodeVarintEnterprise(dAtA, i, uint64(m.Locked))
		i--
		dAtA[i] = 0x18
	}
	if m.Amount != 0 {
		i = encodeVarintEnterprise(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintEnterprise(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WhitelistAddresses) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhitelistAddresses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhitelistAddresses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintEnterprise(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DecisionTimeLimit != 0 {
		i = encodeVarintEnterprise(dAtA, i, uint64(m.DecisionTimeLimit))
		i--
		dAtA[i] = 0x20
	}
	if m.MinAccepts != 0 {
		i = encodeVarintEnterprise(dAtA, i, uint64(m.MinAccepts))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintEnterprise(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EntSigners) > 0 {
		i -= len(m.EntSigners)
		copy(dAtA[i:], m.EntSigners)
		i = encodeVarintEnterprise(dAtA, i, uint64(len(m.EntSigners)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEnterprise(dAtA []byte, offset int, v uint64) int {
	offset -= sovEnterprise(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PurchaseOrderDecision) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovEnterprise(uint64(l))
	}
	if m.Decision != 0 {
		n += 1 + sovEnterprise(uint64(m.Decision))
	}
	if m.DecisionTime != 0 {
		n += 1 + sovEnterprise(uint64(m.DecisionTime))
	}
	return n
}

func (m *EnterpriseUndPurchaseOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEnterprise(uint64(m.Id))
	}
	l = len(m.Purchaser)
	if l > 0 {
		n += 1 + l + sovEnterprise(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovEnterprise(uint64(l))
	if m.Status != 0 {
		n += 1 + sovEnterprise(uint64(m.Status))
	}
	if m.RaiseTime != 0 {
		n += 1 + sovEnterprise(uint64(m.RaiseTime))
	}
	if m.CompletionTime != 0 {
		n += 1 + sovEnterprise(uint64(m.CompletionTime))
	}
	if len(m.Decisions) > 0 {
		for _, e := range m.Decisions {
			l = e.Size()
			n += 1 + l + sovEnterprise(uint64(l))
		}
	}
	return n
}

func (m *PurchaseOrders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PurchaseOrders) > 0 {
		for _, e := range m.PurchaseOrders {
			l = e.Size()
			n += 1 + l + sovEnterprise(uint64(l))
		}
	}
	return n
}

func (m *LockedUnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEnterprise(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovEnterprise(uint64(l))
	return n
}

func (m *EnterpriseUserAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEnterprise(uint64(l))
	}
	l = m.Locked.Size()
	n += 1 + l + sovEnterprise(uint64(l))
	l = m.Unlocked.Size()
	n += 1 + l + sovEnterprise(uint64(l))
	l = m.Total.Size()
	n += 1 + l + sovEnterprise(uint64(l))
	return n
}

func (m *UndSupply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovEnterprise(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovEnterprise(uint64(m.Amount))
	}
	if m.Locked != 0 {
		n += 1 + sovEnterprise(uint64(m.Locked))
	}
	if m.Total != 0 {
		n += 1 + sovEnterprise(uint64(m.Total))
	}
	return n
}

func (m *WhitelistAddresses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovEnterprise(uint64(l))
		}
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EntSigners)
	if l > 0 {
		n += 1 + l + sovEnterprise(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovEnterprise(uint64(l))
	}
	if m.MinAccepts != 0 {
		n += 1 + sovEnterprise(uint64(m.MinAccepts))
	}
	if m.DecisionTimeLimit != 0 {
		n += 1 + sovEnterprise(uint64(m.DecisionTimeLimit))
	}
	return n
}

func sovEnterprise(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEnterprise(x uint64) (n int) {
	return sovEnterprise(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PurchaseOrderDecision) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnterprise
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PurchaseOrderDecision: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PurchaseOrderDecision: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnterprise
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnterprise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decision", wireType)
			}
			m.Decision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decision |= PurchaseOrderStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTime", wireType)
			}
			m.DecisionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEnterprise(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnterprise
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterpriseUndPurchaseOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnterprise
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterpriseUndPurchaseOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterpriseUndPurchaseOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purchaser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnterprise
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnterprise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Purchaser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEnterprise
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEnterprise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= PurchaseOrderStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaiseTime", wireType)
			}
			m.RaiseTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaiseTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
			}
			m.CompletionTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompletionTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decisions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEnterprise
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEnterprise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Decisions = append(m.Decisions, PurchaseOrderDecision{})
			if err := m.Decisions[len(m.Decisions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEnterprise(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnterprise
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PurchaseOrders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnterprise
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PurchaseOrders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PurchaseOrders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseOrders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEnterprise
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEnterprise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PurchaseOrders = append(m.PurchaseOrders, &EnterpriseUndPurchaseOrder{})
			if err := m.PurchaseOrders[len(m.PurchaseOrders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEnterprise(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnterprise
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockedUnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnterprise
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockedUnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockedUnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnterprise
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnterprise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEnterprise
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEnterprise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEnterprise(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnterprise
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterpriseUserAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnterprise
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterpriseUserAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterpriseUserAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnterprise
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnterprise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEnterprise
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEnterprise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Locked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unlocked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEnterprise
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEnterprise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Unlocked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEnterprise
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEnterprise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Total.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEnterprise(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnterprise
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UndSupply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnterprise
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UndSupply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UndSupply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnterprise
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnterprise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locked", wireType)
			}
			m.Locked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Locked |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEnterprise(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnterprise
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhitelistAddresses) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnterprise
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhitelistAddresses: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhitelistAddresses: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnterprise
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnterprise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEnterprise(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnterprise
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnterprise
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntSigners", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnterprise
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnterprise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EntSigners = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnterprise
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnterprise
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAccepts", wireType)
			}
			m.MinAccepts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinAccepts |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecisionTimeLimit", wireType)
			}
			m.DecisionTimeLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecisionTimeLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEnterprise(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnterprise
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEnterprise(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEnterprise
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEnterprise
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEnterprise
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEnterprise
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEnterprise
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEnterprise        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEnterprise          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEnterprise = fmt.Errorf("proto: unexpected end of group")
)
