// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mainchain/wrkchain/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3eb2b58804705e6, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3eb2b58804705e6, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryWrkChainRequest is the request type for the Query/WrkChain RPC method
type QueryWrkChainRequest struct {
	// wrkchain_id is the id of the wrkchain to query for
	WrkchainId uint64 `protobuf:"varint,1,opt,name=wrkchain_id,json=wrkchainId,proto3" json:"wrkchain_id,omitempty"`
}

func (m *QueryWrkChainRequest) Reset()         { *m = QueryWrkChainRequest{} }
func (m *QueryWrkChainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWrkChainRequest) ProtoMessage()    {}
func (*QueryWrkChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3eb2b58804705e6, []int{2}
}
func (m *QueryWrkChainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWrkChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWrkChainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWrkChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWrkChainRequest.Merge(m, src)
}
func (m *QueryWrkChainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWrkChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWrkChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWrkChainRequest proto.InternalMessageInfo

func (m *QueryWrkChainRequest) GetWrkchainId() uint64 {
	if m != nil {
		return m.WrkchainId
	}
	return 0
}

// QueryWrkChainResponse is the response type for the Query/WrkChain RPC method
type QueryWrkChainResponse struct {
	Wrkchain *WrkChain `protobuf:"bytes,1,opt,name=wrkchain,proto3" json:"wrkchain,omitempty"`
}

func (m *QueryWrkChainResponse) Reset()         { *m = QueryWrkChainResponse{} }
func (m *QueryWrkChainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWrkChainResponse) ProtoMessage()    {}
func (*QueryWrkChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3eb2b58804705e6, []int{3}
}
func (m *QueryWrkChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWrkChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWrkChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWrkChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWrkChainResponse.Merge(m, src)
}
func (m *QueryWrkChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWrkChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWrkChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWrkChainResponse proto.InternalMessageInfo

func (m *QueryWrkChainResponse) GetWrkchain() *WrkChain {
	if m != nil {
		return m.Wrkchain
	}
	return nil
}

// QueryWrkChainBlockRequest is the request type for the Query/WrkChainBlock RPC method
type QueryWrkChainBlockRequest struct {
	// wrkchain_id is the id of the wrkchain to query for
	WrkchainId uint64 `protobuf:"varint,1,opt,name=wrkchain_id,json=wrkchainId,proto3" json:"wrkchain_id,omitempty"`
	// height is the block number of the hash to query for
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryWrkChainBlockRequest) Reset()         { *m = QueryWrkChainBlockRequest{} }
func (m *QueryWrkChainBlockRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWrkChainBlockRequest) ProtoMessage()    {}
func (*QueryWrkChainBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3eb2b58804705e6, []int{4}
}
func (m *QueryWrkChainBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWrkChainBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWrkChainBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWrkChainBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWrkChainBlockRequest.Merge(m, src)
}
func (m *QueryWrkChainBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWrkChainBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWrkChainBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWrkChainBlockRequest proto.InternalMessageInfo

func (m *QueryWrkChainBlockRequest) GetWrkchainId() uint64 {
	if m != nil {
		return m.WrkchainId
	}
	return 0
}

func (m *QueryWrkChainBlockRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// QueryWrkChainBlockResponse is the response type for the Query/WrkChainBlock RPC method
type QueryWrkChainBlockResponse struct {
	Block      *WrkChainBlock `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	WrkchainId uint64         `protobuf:"varint,2,opt,name=wrkchain_id,json=wrkchainId,proto3" json:"wrkchain_id,omitempty"`
	Owner      string         `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryWrkChainBlockResponse) Reset()         { *m = QueryWrkChainBlockResponse{} }
func (m *QueryWrkChainBlockResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWrkChainBlockResponse) ProtoMessage()    {}
func (*QueryWrkChainBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3eb2b58804705e6, []int{5}
}
func (m *QueryWrkChainBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWrkChainBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWrkChainBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWrkChainBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWrkChainBlockResponse.Merge(m, src)
}
func (m *QueryWrkChainBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWrkChainBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWrkChainBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWrkChainBlockResponse proto.InternalMessageInfo

func (m *QueryWrkChainBlockResponse) GetBlock() *WrkChainBlock {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *QueryWrkChainBlockResponse) GetWrkchainId() uint64 {
	if m != nil {
		return m.WrkchainId
	}
	return 0
}

func (m *QueryWrkChainBlockResponse) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// QueryWrkChainsFilteredRequest is the request type for the Query/WrkChainsFiltered RPC method
type QueryWrkChainsFilteredRequest struct {
	// moniker is the moniker of the wrkchain to search for
	Moniker string `protobuf:"bytes,1,opt,name=moniker,proto3" json:"moniker,omitempty"`
	// owner is an address to search for
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryWrkChainsFilteredRequest) Reset()         { *m = QueryWrkChainsFilteredRequest{} }
func (m *QueryWrkChainsFilteredRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWrkChainsFilteredRequest) ProtoMessage()    {}
func (*QueryWrkChainsFilteredRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3eb2b58804705e6, []int{6}
}
func (m *QueryWrkChainsFilteredRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWrkChainsFilteredRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWrkChainsFilteredRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWrkChainsFilteredRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWrkChainsFilteredRequest.Merge(m, src)
}
func (m *QueryWrkChainsFilteredRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWrkChainsFilteredRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWrkChainsFilteredRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWrkChainsFilteredRequest proto.InternalMessageInfo

// QueryWrkChainsFilteredResponse is the response type for the Query/WrkChainsFiltered RPC method
type QueryWrkChainsFilteredResponse struct {
	Wrkchains []WrkChain `protobuf:"bytes,1,rep,name=wrkchains,proto3" json:"wrkchains"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryWrkChainsFilteredResponse) Reset()         { *m = QueryWrkChainsFilteredResponse{} }
func (m *QueryWrkChainsFilteredResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWrkChainsFilteredResponse) ProtoMessage()    {}
func (*QueryWrkChainsFilteredResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3eb2b58804705e6, []int{7}
}
func (m *QueryWrkChainsFilteredResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWrkChainsFilteredResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWrkChainsFilteredResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWrkChainsFilteredResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWrkChainsFilteredResponse.Merge(m, src)
}
func (m *QueryWrkChainsFilteredResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWrkChainsFilteredResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWrkChainsFilteredResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWrkChainsFilteredResponse proto.InternalMessageInfo

func (m *QueryWrkChainsFilteredResponse) GetWrkchains() []WrkChain {
	if m != nil {
		return m.Wrkchains
	}
	return nil
}

func (m *QueryWrkChainsFilteredResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryWrkChainStorageRequest is the request type for the Query/WrkChainStorage RPC method
type QueryWrkChainStorageRequest struct {
	// wrkchain_id is the id of the wrkchain to query for
	WrkchainId uint64 `protobuf:"varint,1,opt,name=wrkchain_id,json=wrkchainId,proto3" json:"wrkchain_id,omitempty"`
}

func (m *QueryWrkChainStorageRequest) Reset()         { *m = QueryWrkChainStorageRequest{} }
func (m *QueryWrkChainStorageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWrkChainStorageRequest) ProtoMessage()    {}
func (*QueryWrkChainStorageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3eb2b58804705e6, []int{8}
}
func (m *QueryWrkChainStorageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWrkChainStorageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWrkChainStorageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWrkChainStorageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWrkChainStorageRequest.Merge(m, src)
}
func (m *QueryWrkChainStorageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWrkChainStorageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWrkChainStorageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWrkChainStorageRequest proto.InternalMessageInfo

func (m *QueryWrkChainStorageRequest) GetWrkchainId() uint64 {
	if m != nil {
		return m.WrkchainId
	}
	return 0
}

// QueryWrkChainStorageResponse is the response type for the Query/WrkChainStorage RPC method
type QueryWrkChainStorageResponse struct {
	WrkchainId uint64 `protobuf:"varint,1,opt,name=wrkchain_id,json=wrkchainId,proto3" json:"wrkchain_id,omitempty"`
	Owner      string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// current_limit is the current in-state storage limit for this wrkchain
	CurrentLimit uint64 `protobuf:"varint,3,opt,name=current_limit,json=currentLimit,proto3" json:"current_limit,omitempty"`
	// current_used is the number of in-state slots currently used
	CurrentUsed uint64 `protobuf:"varint,4,opt,name=current_used,json=currentUsed,proto3" json:"current_used,omitempty"`
	// max is the maximum possible slots a wrkchain can have, as defined by the wrkchain module params
	Max uint64 `protobuf:"varint,5,opt,name=max,proto3" json:"max,omitempty"`
	// max_purchasable is the maximum number a wrkchain can purchase without exceeding max
	MaxPurchasable uint64 `protobuf:"varint,6,opt,name=max_purchasable,json=maxPurchasable,proto3" json:"max_purchasable,omitempty"`
}

func (m *QueryWrkChainStorageResponse) Reset()         { *m = QueryWrkChainStorageResponse{} }
func (m *QueryWrkChainStorageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWrkChainStorageResponse) ProtoMessage()    {}
func (*QueryWrkChainStorageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3eb2b58804705e6, []int{9}
}
func (m *QueryWrkChainStorageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWrkChainStorageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWrkChainStorageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWrkChainStorageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWrkChainStorageResponse.Merge(m, src)
}
func (m *QueryWrkChainStorageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWrkChainStorageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWrkChainStorageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWrkChainStorageResponse proto.InternalMessageInfo

func (m *QueryWrkChainStorageResponse) GetWrkchainId() uint64 {
	if m != nil {
		return m.WrkchainId
	}
	return 0
}

func (m *QueryWrkChainStorageResponse) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryWrkChainStorageResponse) GetCurrentLimit() uint64 {
	if m != nil {
		return m.CurrentLimit
	}
	return 0
}

func (m *QueryWrkChainStorageResponse) GetCurrentUsed() uint64 {
	if m != nil {
		return m.CurrentUsed
	}
	return 0
}

func (m *QueryWrkChainStorageResponse) GetMax() uint64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *QueryWrkChainStorageResponse) GetMaxPurchasable() uint64 {
	if m != nil {
		return m.MaxPurchasable
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "mainchain.wrkchain.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "mainchain.wrkchain.v1.QueryParamsResponse")
	proto.RegisterType((*QueryWrkChainRequest)(nil), "mainchain.wrkchain.v1.QueryWrkChainRequest")
	proto.RegisterType((*QueryWrkChainResponse)(nil), "mainchain.wrkchain.v1.QueryWrkChainResponse")
	proto.RegisterType((*QueryWrkChainBlockRequest)(nil), "mainchain.wrkchain.v1.QueryWrkChainBlockRequest")
	proto.RegisterType((*QueryWrkChainBlockResponse)(nil), "mainchain.wrkchain.v1.QueryWrkChainBlockResponse")
	proto.RegisterType((*QueryWrkChainsFilteredRequest)(nil), "mainchain.wrkchain.v1.QueryWrkChainsFilteredRequest")
	proto.RegisterType((*QueryWrkChainsFilteredResponse)(nil), "mainchain.wrkchain.v1.QueryWrkChainsFilteredResponse")
	proto.RegisterType((*QueryWrkChainStorageRequest)(nil), "mainchain.wrkchain.v1.QueryWrkChainStorageRequest")
	proto.RegisterType((*QueryWrkChainStorageResponse)(nil), "mainchain.wrkchain.v1.QueryWrkChainStorageResponse")
}

func init() { proto.RegisterFile("mainchain/wrkchain/v1/query.proto", fileDescriptor_f3eb2b58804705e6) }

var fileDescriptor_f3eb2b58804705e6 = []byte{
	// 808 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x96, 0xcf, 0x4f, 0xdb, 0x48,
	0x14, 0xc7, 0xe3, 0x90, 0x64, 0xe1, 0x65, 0x59, 0x76, 0x67, 0xc3, 0x2a, 0xeb, 0x85, 0x04, 0xbc,
	0xec, 0xc2, 0x6e, 0x8b, 0xdd, 0x84, 0x46, 0x48, 0xb4, 0xe5, 0x00, 0x15, 0x55, 0xa5, 0x4a, 0xa5,
	0x2e, 0x55, 0xa5, 0x5e, 0xa2, 0x49, 0x32, 0x75, 0xac, 0xc4, 0x9e, 0xe0, 0x71, 0x20, 0x08, 0x71,
	0xe9, 0xa1, 0xea, 0xad, 0x95, 0x7a, 0xed, 0x81, 0x5e, 0x7b, 0xe8, 0xbd, 0xfd, 0x0b, 0x38, 0x22,
	0x55, 0x95, 0x38, 0x55, 0x15, 0xf4, 0xd0, 0x3f, 0xa3, 0xf2, 0x78, 0x9c, 0x5f, 0x04, 0x92, 0xdc,
	0x3c, 0x6f, 0xde, 0xf7, 0xbd, 0xcf, 0x9b, 0x79, 0xf3, 0x64, 0x98, 0xb5, 0xb0, 0x69, 0x17, 0xcb,
	0xd8, 0xb4, 0xb5, 0x5d, 0xa7, 0xe2, 0x7f, 0xec, 0x64, 0xb4, 0xed, 0x3a, 0x71, 0xf6, 0xd4, 0x9a,
	0x43, 0x5d, 0x8a, 0x26, 0x9b, 0x2e, 0x6a, 0xe0, 0xa2, 0xee, 0x64, 0xe4, 0x84, 0x41, 0x0d, 0xca,
	0x3d, 0x34, 0xef, 0xcb, 0x77, 0x96, 0xa7, 0x0c, 0x4a, 0x8d, 0x2a, 0xd1, 0x70, 0xcd, 0xd4, 0xb0,
	0x6d, 0x53, 0x17, 0xbb, 0x26, 0xb5, 0x99, 0xd8, 0x55, 0x8b, 0x94, 0x59, 0x94, 0xe5, 0x59, 0xa9,
	0xa2, 0x15, 0x30, 0x23, 0x7e, 0x1e, 0x6d, 0x27, 0x53, 0x20, 0x2e, 0xce, 0x68, 0x35, 0x6c, 0x98,
	0x36, 0x17, 0x08, 0xff, 0xb9, 0xde, 0x74, 0x4d, 0x0c, 0xee, 0xa5, 0x24, 0x00, 0x3d, 0xf0, 0xe2,
	0x6c, 0x62, 0x07, 0x5b, 0x4c, 0x27, 0xdb, 0x75, 0xc2, 0x5c, 0x45, 0x87, 0xdf, 0x3b, 0xac, 0xac,
	0x46, 0x6d, 0x46, 0xd0, 0x0d, 0x88, 0xd5, 0xb8, 0x25, 0x29, 0xcd, 0x48, 0x0b, 0xf1, 0xec, 0xb4,
	0xda, 0xb3, 0x3c, 0xd5, 0x97, 0xad, 0x45, 0x8e, 0xbe, 0xa4, 0x43, 0xba, 0x90, 0x28, 0xcb, 0x90,
	0xe0, 0x31, 0x1f, 0x3b, 0x95, 0x75, 0xcf, 0x51, 0xe4, 0x42, 0x69, 0x88, 0x07, 0xda, 0xbc, 0x59,
	0xe2, 0x91, 0x23, 0x3a, 0x04, 0xa6, 0xbb, 0x25, 0x65, 0x0b, 0x26, 0xbb, 0x84, 0x4d, 0x9c, 0xd1,
	0xc0, 0x4d, 0x00, 0xa5, 0x2f, 0x00, 0x6a, 0x4a, 0x9b, 0x02, 0x65, 0x0b, 0xfe, 0xec, 0x88, 0xba,
	0x56, 0xa5, 0xc5, 0xca, 0xa0, 0x4c, 0xe8, 0x0f, 0x88, 0x95, 0x89, 0x69, 0x94, 0xdd, 0x64, 0x98,
	0xef, 0x89, 0x95, 0xf2, 0x52, 0x02, 0xb9, 0x57, 0x58, 0x41, 0xbc, 0x02, 0xd1, 0x82, 0x67, 0x10,
	0xb8, 0x73, 0x7d, 0x70, 0x7d, 0xb1, 0x2f, 0xe9, 0x66, 0x0a, 0x9f, 0x63, 0x4a, 0x40, 0x94, 0xee,
	0xda, 0xc4, 0x49, 0x8e, 0xcc, 0x48, 0x0b, 0x63, 0xba, 0xbf, 0x50, 0xde, 0x4a, 0x30, 0xdd, 0x41,
	0xc4, 0x36, 0xcc, 0xaa, 0x4b, 0x1c, 0x52, 0x0a, 0x8a, 0x4d, 0xc2, 0x4f, 0x16, 0xb5, 0xcd, 0x0a,
	0x71, 0x38, 0xd6, 0x98, 0x1e, 0x2c, 0x5b, 0x11, 0xc3, 0x6d, 0x11, 0xd1, 0x06, 0x40, 0xab, 0xd9,
	0x78, 0xb2, 0x78, 0xf6, 0x5f, 0xd1, 0x9d, 0xaa, 0xd7, 0x99, 0xaa, 0xff, 0x02, 0x44, 0x67, 0xaa,
	0x9b, 0xd8, 0x20, 0x22, 0x97, 0xde, 0xa6, 0x5c, 0x19, 0x7d, 0x71, 0x98, 0x0e, 0x7d, 0x3f, 0x4c,
	0x87, 0x94, 0xf7, 0x12, 0xa4, 0x2e, 0x62, 0x14, 0x27, 0xb7, 0x0e, 0x63, 0x41, 0xa9, 0x5e, 0xf7,
	0x8d, 0x0c, 0x70, 0xd9, 0xa2, 0xff, 0x5a, 0x3a, 0x74, 0xa7, 0x83, 0x3c, 0xcc, 0xc9, 0xe7, 0xfb,
	0x92, 0xfb, 0x04, 0xed, 0xe8, 0xca, 0x2a, 0xfc, 0xd5, 0xc1, 0xfb, 0xd0, 0xa5, 0x4e, 0xab, 0xca,
	0xfe, 0x2d, 0x7d, 0x22, 0xc1, 0x54, 0xef, 0x00, 0xa2, 0xdc, 0xbe, 0x0d, 0xd8, 0xfb, 0x6a, 0xfe,
	0x86, 0xf1, 0x62, 0xdd, 0x71, 0x88, 0xed, 0xe6, 0xab, 0xa6, 0x65, 0xba, 0xfc, 0x76, 0x22, 0xfa,
	0xcf, 0xc2, 0x78, 0xcf, 0xb3, 0xa1, 0x59, 0x08, 0xd6, 0xf9, 0x3a, 0x23, 0xa5, 0x64, 0x84, 0xfb,
	0xc4, 0x85, 0xed, 0x11, 0x23, 0x25, 0xf4, 0x2b, 0x8c, 0x58, 0xb8, 0x91, 0x8c, 0xf2, 0x1d, 0xef,
	0x13, 0xcd, 0xc3, 0x84, 0x85, 0x1b, 0xf9, 0x5a, 0xdd, 0x29, 0x96, 0x31, 0xc3, 0x85, 0x2a, 0x49,
	0xc6, 0xf8, 0xee, 0x2f, 0x16, 0x6e, 0x6c, 0xb6, 0xac, 0xd9, 0xcf, 0x31, 0x88, 0xf2, 0xd2, 0xd0,
	0x73, 0x09, 0x62, 0xfe, 0x24, 0x40, 0xff, 0x5d, 0x70, 0x55, 0xe7, 0x47, 0x8f, 0xfc, 0xff, 0x20,
	0xae, 0xfe, 0x29, 0x29, 0xff, 0x3c, 0xfb, 0xf4, 0xed, 0x75, 0x38, 0x8d, 0xa6, 0xb5, 0xde, 0xb3,
	0xce, 0x9f, 0x3c, 0xe8, 0x8d, 0x04, 0xa3, 0xc1, 0x41, 0xa3, 0x2b, 0x97, 0xc5, 0xef, 0x9a, 0x4d,
	0xf2, 0xd5, 0xc1, 0x9c, 0x05, 0x4e, 0x8e, 0xe3, 0x68, 0x68, 0x51, 0xbb, 0x7c, 0xf4, 0x6a, 0xfb,
	0x6d, 0x77, 0x7b, 0x80, 0x3e, 0x4a, 0x30, 0xde, 0xf1, 0xe2, 0xd1, 0xb5, 0x41, 0xd2, 0xb6, 0x0f,
	0x2c, 0x39, 0x33, 0x84, 0x42, 0xd0, 0xde, 0xe6, 0xb4, 0xab, 0xe8, 0xe6, 0x50, 0xb4, 0x1a, 0x1f,
	0x46, 0xda, 0xbe, 0x3f, 0xef, 0x0e, 0xd0, 0x3b, 0x09, 0x7e, 0x3b, 0xf7, 0x6a, 0xd1, 0xf5, 0x41,
	0x70, 0xba, 0x07, 0x91, 0x9c, 0x1b, 0x52, 0x25, 0x0a, 0x59, 0xe0, 0x85, 0x28, 0x68, 0xa6, 0x4f,
	0x21, 0x0c, 0x7d, 0x90, 0x60, 0xa2, 0xeb, 0xc5, 0xa1, 0xec, 0x20, 0x49, 0x3b, 0xdf, 0xb7, 0xbc,
	0x34, 0x94, 0x46, 0x60, 0xde, 0xe2, 0x98, 0xcb, 0x28, 0x37, 0xdc, 0x79, 0x33, 0x3f, 0xcc, 0xda,
	0xfd, 0xa3, 0xd3, 0x94, 0x74, 0x7c, 0x9a, 0x92, 0xbe, 0x9e, 0xa6, 0xa4, 0x57, 0x67, 0xa9, 0xd0,
	0xf1, 0x59, 0x2a, 0x74, 0x72, 0x96, 0x0a, 0x3d, 0xc9, 0x19, 0xa6, 0x5b, 0xae, 0x17, 0xd4, 0x22,
	0xb5, 0xb4, 0xba, 0x6d, 0x3e, 0x35, 0x8b, 0x7c, 0x48, 0x2d, 0x7a, 0xeb, 0x56, 0xaa, 0x46, 0x2b,
	0x81, 0xbb, 0x57, 0x23, 0xac, 0x10, 0xe3, 0x3f, 0x00, 0x4b, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x63, 0xe3, 0xc4, 0xb6, 0xc6, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of x/wrkchain module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// WrkChain queries the metadata of a wrkchain.
	WrkChain(ctx context.Context, in *QueryWrkChainRequest, opts ...grpc.CallOption) (*QueryWrkChainResponse, error)
	// WrkChainBlock queries a submitted hash of a wrkchain
	WrkChainBlock(ctx context.Context, in *QueryWrkChainBlockRequest, opts ...grpc.CallOption) (*QueryWrkChainBlockResponse, error)
	// WrkChainsFiltered queries all wrkchain metadata for given search parameters
	WrkChainsFiltered(ctx context.Context, in *QueryWrkChainsFilteredRequest, opts ...grpc.CallOption) (*QueryWrkChainsFilteredResponse, error)
	WrkChainStorage(ctx context.Context, in *QueryWrkChainStorageRequest, opts ...grpc.CallOption) (*QueryWrkChainStorageResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/mainchain.wrkchain.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WrkChain(ctx context.Context, in *QueryWrkChainRequest, opts ...grpc.CallOption) (*QueryWrkChainResponse, error) {
	out := new(QueryWrkChainResponse)
	err := c.cc.Invoke(ctx, "/mainchain.wrkchain.v1.Query/WrkChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WrkChainBlock(ctx context.Context, in *QueryWrkChainBlockRequest, opts ...grpc.CallOption) (*QueryWrkChainBlockResponse, error) {
	out := new(QueryWrkChainBlockResponse)
	err := c.cc.Invoke(ctx, "/mainchain.wrkchain.v1.Query/WrkChainBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WrkChainsFiltered(ctx context.Context, in *QueryWrkChainsFilteredRequest, opts ...grpc.CallOption) (*QueryWrkChainsFilteredResponse, error) {
	out := new(QueryWrkChainsFilteredResponse)
	err := c.cc.Invoke(ctx, "/mainchain.wrkchain.v1.Query/WrkChainsFiltered", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WrkChainStorage(ctx context.Context, in *QueryWrkChainStorageRequest, opts ...grpc.CallOption) (*QueryWrkChainStorageResponse, error) {
	out := new(QueryWrkChainStorageResponse)
	err := c.cc.Invoke(ctx, "/mainchain.wrkchain.v1.Query/WrkChainStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of x/wrkchain module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// WrkChain queries the metadata of a wrkchain.
	WrkChain(context.Context, *QueryWrkChainRequest) (*QueryWrkChainResponse, error)
	// WrkChainBlock queries a submitted hash of a wrkchain
	WrkChainBlock(context.Context, *QueryWrkChainBlockRequest) (*QueryWrkChainBlockResponse, error)
	// WrkChainsFiltered queries all wrkchain metadata for given search parameters
	WrkChainsFiltered(context.Context, *QueryWrkChainsFilteredRequest) (*QueryWrkChainsFilteredResponse, error)
	WrkChainStorage(context.Context, *QueryWrkChainStorageRequest) (*QueryWrkChainStorageResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) WrkChain(ctx context.Context, req *QueryWrkChainRequest) (*QueryWrkChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrkChain not implemented")
}
func (*UnimplementedQueryServer) WrkChainBlock(ctx context.Context, req *QueryWrkChainBlockRequest) (*QueryWrkChainBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrkChainBlock not implemented")
}
func (*UnimplementedQueryServer) WrkChainsFiltered(ctx context.Context, req *QueryWrkChainsFilteredRequest) (*QueryWrkChainsFilteredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrkChainsFiltered not implemented")
}
func (*UnimplementedQueryServer) WrkChainStorage(ctx context.Context, req *QueryWrkChainStorageRequest) (*QueryWrkChainStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrkChainStorage not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.wrkchain.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WrkChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWrkChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WrkChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.wrkchain.v1.Query/WrkChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WrkChain(ctx, req.(*QueryWrkChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WrkChainBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWrkChainBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WrkChainBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.wrkchain.v1.Query/WrkChainBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WrkChainBlock(ctx, req.(*QueryWrkChainBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WrkChainsFiltered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWrkChainsFilteredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WrkChainsFiltered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.wrkchain.v1.Query/WrkChainsFiltered",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WrkChainsFiltered(ctx, req.(*QueryWrkChainsFilteredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WrkChainStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWrkChainStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WrkChainStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.wrkchain.v1.Query/WrkChainStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WrkChainStorage(ctx, req.(*QueryWrkChainStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mainchain.wrkchain.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "WrkChain",
			Handler:    _Query_WrkChain_Handler,
		},
		{
			MethodName: "WrkChainBlock",
			Handler:    _Query_WrkChainBlock_Handler,
		},
		{
			MethodName: "WrkChainsFiltered",
			Handler:    _Query_WrkChainsFiltered_Handler,
		},
		{
			MethodName: "WrkChainStorage",
			Handler:    _Query_WrkChainStorage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mainchain/wrkchain/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryWrkChainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWrkChainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWrkChainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WrkchainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.WrkchainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryWrkChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWrkChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWrkChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Wrkchain != nil {
		{
			size, err := m.Wrkchain.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWrkChainBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWrkChainBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWrkChainBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.WrkchainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.WrkchainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryWrkChainBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWrkChainBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWrkChainBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.WrkchainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.WrkchainId))
		i--
		dAtA[i] = 0x10
	}
	if m.Block != nil {
		{
			size, err := m.Block.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWrkChainsFilteredRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWrkChainsFilteredRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWrkChainsFilteredRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWrkChainsFilteredResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWrkChainsFilteredResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWrkChainsFilteredResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Wrkchains) > 0 {
		for iNdEx := len(m.Wrkchains) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Wrkchains[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryWrkChainStorageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWrkChainStorageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWrkChainStorageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WrkchainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.WrkchainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryWrkChainStorageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWrkChainStorageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWrkChainStorageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxPurchasable != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MaxPurchasable))
		i--
		dAtA[i] = 0x30
	}
	if m.Max != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Max))
		i--
		dAtA[i] = 0x28
	}
	if m.CurrentUsed != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrentUsed))
		i--
		dAtA[i] = 0x20
	}
	if m.CurrentLimit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrentLimit))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.WrkchainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.WrkchainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryWrkChainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WrkchainId != 0 {
		n += 1 + sovQuery(uint64(m.WrkchainId))
	}
	return n
}

func (m *QueryWrkChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wrkchain != nil {
		l = m.Wrkchain.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWrkChainBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WrkchainId != 0 {
		n += 1 + sovQuery(uint64(m.WrkchainId))
	}
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryWrkChainBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.WrkchainId != 0 {
		n += 1 + sovQuery(uint64(m.WrkchainId))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWrkChainsFilteredRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWrkChainsFilteredResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Wrkchains) > 0 {
		for _, e := range m.Wrkchains {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWrkChainStorageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WrkchainId != 0 {
		n += 1 + sovQuery(uint64(m.WrkchainId))
	}
	return n
}

func (m *QueryWrkChainStorageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WrkchainId != 0 {
		n += 1 + sovQuery(uint64(m.WrkchainId))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.CurrentLimit != 0 {
		n += 1 + sovQuery(uint64(m.CurrentLimit))
	}
	if m.CurrentUsed != 0 {
		n += 1 + sovQuery(uint64(m.CurrentUsed))
	}
	if m.Max != 0 {
		n += 1 + sovQuery(uint64(m.Max))
	}
	if m.MaxPurchasable != 0 {
		n += 1 + sovQuery(uint64(m.MaxPurchasable))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWrkChainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWrkChainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWrkChainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WrkchainId", wireType)
			}
			m.WrkchainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WrkchainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWrkChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWrkChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWrkChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wrkchain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Wrkchain == nil {
				m.Wrkchain = &WrkChain{}
			}
			if err := m.Wrkchain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWrkChainBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWrkChainBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWrkChainBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WrkchainId", wireType)
			}
			m.WrkchainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WrkchainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWrkChainBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWrkChainBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWrkChainBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &WrkChainBlock{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WrkchainId", wireType)
			}
			m.WrkchainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WrkchainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWrkChainsFilteredRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWrkChainsFilteredRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWrkChainsFilteredRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWrkChainsFilteredResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWrkChainsFilteredResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWrkChainsFilteredResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wrkchains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wrkchains = append(m.Wrkchains, WrkChain{})
			if err := m.Wrkchains[len(m.Wrkchains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWrkChainStorageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWrkChainStorageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWrkChainStorageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WrkchainId", wireType)
			}
			m.WrkchainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WrkchainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWrkChainStorageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWrkChainStorageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWrkChainStorageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WrkchainId", wireType)
			}
			m.WrkchainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WrkchainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentLimit", wireType)
			}
			m.CurrentLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUsed", wireType)
			}
			m.CurrentUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			m.Max = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Max |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPurchasable", wireType)
			}
			m.MaxPurchasable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPurchasable |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
