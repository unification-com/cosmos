// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mainchain/wrkchain/v2/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRegisterWrkChain represents a message to register a new wrkchain
type MsgRegisterWrkChain struct {
	// moniker is a short identifier for a wrkchain
	Moniker string `protobuf:"bytes,2,opt,name=moniker,proto3" json:"moniker,omitempty"`
	// name is a long name for a wrkchain
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// genesis_hash is a hash of the genesis block of the wrkchain
	GenesisHash string `protobuf:"bytes,4,opt,name=genesis_hash,json=genesisHash,proto3" json:"genesis" yaml:"genesis"`
	// base_type is the type of wrkchain, e.g. geth, cosmos etc.
	BaseType string `protobuf:"bytes,5,opt,name=base_type,json=baseType,proto3" json:"type" yaml:"type"`
	// owner is the address of the owner of the wrkchain
	Owner string `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *MsgRegisterWrkChain) Reset()         { *m = MsgRegisterWrkChain{} }
func (m *MsgRegisterWrkChain) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterWrkChain) ProtoMessage()    {}
func (*MsgRegisterWrkChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8984f09a4eb29f3, []int{0}
}
func (m *MsgRegisterWrkChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterWrkChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterWrkChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterWrkChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterWrkChain.Merge(m, src)
}
func (m *MsgRegisterWrkChain) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterWrkChain) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterWrkChain.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterWrkChain proto.InternalMessageInfo

// MsgRegisterWrkChainResponse defines the Msg/RegisterWrkChain response type.
type MsgRegisterWrkChainResponse struct {
	// wrkchain_id is the id of the new wrkchain
	WrkchainId uint64 `protobuf:"varint,1,opt,name=wrkchain_id,json=wrkchainId,proto3" json:"wrkchain_id,omitempty"`
}

func (m *MsgRegisterWrkChainResponse) Reset()         { *m = MsgRegisterWrkChainResponse{} }
func (m *MsgRegisterWrkChainResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterWrkChainResponse) ProtoMessage()    {}
func (*MsgRegisterWrkChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8984f09a4eb29f3, []int{1}
}
func (m *MsgRegisterWrkChainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterWrkChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterWrkChainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterWrkChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterWrkChainResponse.Merge(m, src)
}
func (m *MsgRegisterWrkChainResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterWrkChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterWrkChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterWrkChainResponse proto.InternalMessageInfo

func (m *MsgRegisterWrkChainResponse) GetWrkchainId() uint64 {
	if m != nil {
		return m.WrkchainId
	}
	return 0
}

// MsgRecordWrkChainBlock represents a message to submit a set of block hashes for a registered wrkchain
type MsgRecordWrkChainBlock struct {
	// wrkchain_id is the id of the wrkchain the hashes are being submitted for
	WrkchainId uint64 `protobuf:"varint,1,opt,name=wrkchain_id,json=wrkchainId,proto3" json:"wrkchain_id,omitempty"`
	// height is the block height/number of the hashes being submitted
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// block_hash is the main block hash
	BlockHash string `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"blockhash" yaml:"blockhash"`
	// parent_hash is an optional parent block hash for the given height/block number
	ParentHash string `protobuf:"bytes,4,opt,name=parent_hash,json=parentHash,proto3" json:"parenthash" yaml:"parenthash"`
	// hash1 is an optional supplementary hash to be submitted, for example TxHash
	Hash1 string `protobuf:"bytes,5,opt,name=hash1,proto3" json:"hash1,omitempty"`
	// hash2 is an optional supplementary hash to be submitted, for example TxHash
	Hash2 string `protobuf:"bytes,6,opt,name=hash2,proto3" json:"hash2,omitempty"`
	// hash3 is an optional supplementary hash to be submitted, for example TxHash
	Hash3 string `protobuf:"bytes,7,opt,name=hash3,proto3" json:"hash3,omitempty"`
	// owner is the address of the owner of the wrkchain
	Owner string `protobuf:"bytes,8,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *MsgRecordWrkChainBlock) Reset()         { *m = MsgRecordWrkChainBlock{} }
func (m *MsgRecordWrkChainBlock) String() string { return proto.CompactTextString(m) }
func (*MsgRecordWrkChainBlock) ProtoMessage()    {}
func (*MsgRecordWrkChainBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8984f09a4eb29f3, []int{2}
}
func (m *MsgRecordWrkChainBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRecordWrkChainBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRecordWrkChainBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRecordWrkChainBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRecordWrkChainBlock.Merge(m, src)
}
func (m *MsgRecordWrkChainBlock) XXX_Size() int {
	return m.Size()
}
func (m *MsgRecordWrkChainBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRecordWrkChainBlock.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRecordWrkChainBlock proto.InternalMessageInfo

// MsgRecordWrkChainBlockResponse defines the Msg/RecordWrkChainBlock response type.
type MsgRecordWrkChainBlockResponse struct {
	// wrkchain_id is the id of the wrkchain
	WrkchainId uint64 `protobuf:"varint,1,opt,name=wrkchain_id,json=wrkchainId,proto3" json:"wrkchain_id,omitempty"`
	// height is the height of the submitted block hashes
	Height uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *MsgRecordWrkChainBlockResponse) Reset()         { *m = MsgRecordWrkChainBlockResponse{} }
func (m *MsgRecordWrkChainBlockResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRecordWrkChainBlockResponse) ProtoMessage()    {}
func (*MsgRecordWrkChainBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8984f09a4eb29f3, []int{3}
}
func (m *MsgRecordWrkChainBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRecordWrkChainBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRecordWrkChainBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRecordWrkChainBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRecordWrkChainBlockResponse.Merge(m, src)
}
func (m *MsgRecordWrkChainBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRecordWrkChainBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRecordWrkChainBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRecordWrkChainBlockResponse proto.InternalMessageInfo

func (m *MsgRecordWrkChainBlockResponse) GetWrkchainId() uint64 {
	if m != nil {
		return m.WrkchainId
	}
	return 0
}

func (m *MsgRecordWrkChainBlockResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type MsgPurchaseWrkChainStateStorage struct {
	// wrkchain_id is the id of the wrkchain the storage is being purchased for
	WrkchainId uint64 `protobuf:"varint,1,opt,name=wrkchain_id,json=wrkchainId,proto3" json:"wrkchain_id,omitempty"`
	// number is the number of state storage spaces to purchase
	Number uint64 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	// owner is the address of the owner of the wrkchain
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *MsgPurchaseWrkChainStateStorage) Reset()         { *m = MsgPurchaseWrkChainStateStorage{} }
func (m *MsgPurchaseWrkChainStateStorage) String() string { return proto.CompactTextString(m) }
func (*MsgPurchaseWrkChainStateStorage) ProtoMessage()    {}
func (*MsgPurchaseWrkChainStateStorage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8984f09a4eb29f3, []int{4}
}
func (m *MsgPurchaseWrkChainStateStorage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPurchaseWrkChainStateStorage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPurchaseWrkChainStateStorage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPurchaseWrkChainStateStorage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPurchaseWrkChainStateStorage.Merge(m, src)
}
func (m *MsgPurchaseWrkChainStateStorage) XXX_Size() int {
	return m.Size()
}
func (m *MsgPurchaseWrkChainStateStorage) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPurchaseWrkChainStateStorage.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPurchaseWrkChainStateStorage proto.InternalMessageInfo

type MsgPurchaseWrkChainStateStorageResponse struct {
	// wrkchain_id is the id of the wrkchain the storage is being purchased for
	WrkchainId uint64 `protobuf:"varint,1,opt,name=wrkchain_id,json=wrkchainId,proto3" json:"wrkchain_id,omitempty"`
	// number_purchased is the number of state storage spaces purchased
	NumberPurchased uint64 `protobuf:"varint,2,opt,name=number_purchased,json=numberPurchased,proto3" json:"number_purchased,omitempty"`
	// num_can_purchase is the number of remaining slots available for purchase
	NumCanPurchase uint64 `protobuf:"varint,3,opt,name=num_can_purchase,json=numCanPurchase,proto3" json:"num_can_purchase,omitempty"`
}

func (m *MsgPurchaseWrkChainStateStorageResponse) Reset() {
	*m = MsgPurchaseWrkChainStateStorageResponse{}
}
func (m *MsgPurchaseWrkChainStateStorageResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPurchaseWrkChainStateStorageResponse) ProtoMessage()    {}
func (*MsgPurchaseWrkChainStateStorageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8984f09a4eb29f3, []int{5}
}
func (m *MsgPurchaseWrkChainStateStorageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPurchaseWrkChainStateStorageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPurchaseWrkChainStateStorageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPurchaseWrkChainStateStorageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPurchaseWrkChainStateStorageResponse.Merge(m, src)
}
func (m *MsgPurchaseWrkChainStateStorageResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPurchaseWrkChainStateStorageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPurchaseWrkChainStateStorageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPurchaseWrkChainStateStorageResponse proto.InternalMessageInfo

func (m *MsgPurchaseWrkChainStateStorageResponse) GetWrkchainId() uint64 {
	if m != nil {
		return m.WrkchainId
	}
	return 0
}

func (m *MsgPurchaseWrkChainStateStorageResponse) GetNumberPurchased() uint64 {
	if m != nil {
		return m.NumberPurchased
	}
	return 0
}

func (m *MsgPurchaseWrkChainStateStorageResponse) GetNumCanPurchase() uint64 {
	if m != nil {
		return m.NumCanPurchase
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgRegisterWrkChain)(nil), "mainchain.wrkchain.v2.MsgRegisterWrkChain")
	proto.RegisterType((*MsgRegisterWrkChainResponse)(nil), "mainchain.wrkchain.v2.MsgRegisterWrkChainResponse")
	proto.RegisterType((*MsgRecordWrkChainBlock)(nil), "mainchain.wrkchain.v2.MsgRecordWrkChainBlock")
	proto.RegisterType((*MsgRecordWrkChainBlockResponse)(nil), "mainchain.wrkchain.v2.MsgRecordWrkChainBlockResponse")
	proto.RegisterType((*MsgPurchaseWrkChainStateStorage)(nil), "mainchain.wrkchain.v2.MsgPurchaseWrkChainStateStorage")
	proto.RegisterType((*MsgPurchaseWrkChainStateStorageResponse)(nil), "mainchain.wrkchain.v2.MsgPurchaseWrkChainStateStorageResponse")
}

func init() { proto.RegisterFile("mainchain/wrkchain/v2/tx.proto", fileDescriptor_a8984f09a4eb29f3) }

var fileDescriptor_a8984f09a4eb29f3 = []byte{
	// 642 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x8d, 0x1b, 0xf7, 0x75, 0x83, 0x4a, 0x71, 0x4b, 0xb1, 0x02, 0xd8, 0xc5, 0x20, 0x51, 0x90,
	0x9a, 0x88, 0x94, 0xb2, 0xe8, 0xa2, 0xaa, 0x52, 0x16, 0xb0, 0xa8, 0x40, 0x53, 0x24, 0x04, 0x9b,
	0x68, 0xe2, 0x0c, 0xb6, 0x95, 0x7a, 0x26, 0xf2, 0x38, 0x7d, 0xc0, 0x0f, 0xb0, 0x83, 0x15, 0x5b,
	0xfa, 0x1f, 0xfc, 0x00, 0xcb, 0x2e, 0x91, 0x90, 0x2c, 0xd4, 0x6e, 0x50, 0x96, 0xfd, 0x02, 0xe4,
	0x19, 0x4f, 0x8c, 0x54, 0xb7, 0x0d, 0xec, 0xe6, 0x9c, 0x39, 0xf7, 0xcc, 0xdc, 0x63, 0xcf, 0x05,
	0x2b, 0xc4, 0x01, 0x75, 0x7d, 0x1c, 0xd0, 0xfa, 0x5e, 0xd4, 0x95, 0x8b, 0xdd, 0x46, 0x3d, 0xde,
	0xaf, 0xf5, 0x22, 0x16, 0x33, 0xe3, 0xfa, 0x70, 0xbf, 0xa6, 0xf6, 0x6b, 0xbb, 0x8d, 0xea, 0xbc,
	0xc7, 0x3c, 0x26, 0x14, 0xf5, 0x74, 0x25, 0xc5, 0xd5, 0x7b, 0xc5, 0x66, 0xc3, 0x42, 0xa1, 0x72,
	0x7e, 0x6a, 0x30, 0xb7, 0xc5, 0x3d, 0x44, 0xbc, 0x80, 0xc7, 0x24, 0x7a, 0x1d, 0x75, 0x37, 0xd3,
	0x5d, 0xc3, 0x84, 0xc9, 0x90, 0xd1, 0xa0, 0x4b, 0x22, 0x73, 0x6c, 0x51, 0x5b, 0x9a, 0x46, 0x0a,
	0x1a, 0x06, 0xe8, 0x14, 0x87, 0xc4, 0x2c, 0x0b, 0x5a, 0xac, 0x8d, 0x0d, 0xb8, 0xe2, 0x11, 0x4a,
	0x78, 0xc0, 0x5b, 0x3e, 0xe6, 0xbe, 0xa9, 0xa7, 0x7b, 0xcd, 0xdb, 0x83, 0xc4, 0x9e, 0xcc, 0xf8,
	0xd3, 0xc4, 0x9e, 0x39, 0xc0, 0xe1, 0xce, 0x9a, 0x93, 0x11, 0x0e, 0xaa, 0x64, 0xab, 0x67, 0x98,
	0xfb, 0xc6, 0x63, 0x98, 0x6e, 0x63, 0x4e, 0x5a, 0xf1, 0x41, 0x8f, 0x98, 0xe3, 0xa2, 0xfc, 0xc6,
	0x20, 0xb1, 0xf5, 0x14, 0x9f, 0x26, 0x76, 0x45, 0xd6, 0xa6, 0xc8, 0x41, 0x53, 0xa9, 0xf2, 0xd5,
	0x41, 0x8f, 0x18, 0xf3, 0x30, 0xce, 0xf6, 0x28, 0x89, 0xcc, 0x09, 0x71, 0x19, 0x09, 0xd6, 0xa6,
	0x3e, 0x1e, 0xda, 0xa5, 0xdf, 0x87, 0x76, 0xc9, 0x59, 0x87, 0x9b, 0x05, 0xcd, 0x21, 0xc2, 0x7b,
	0x8c, 0x72, 0x62, 0xd8, 0x50, 0x51, 0x71, 0xb4, 0x82, 0x8e, 0xa9, 0x2d, 0x6a, 0x4b, 0x3a, 0x02,
	0x45, 0x3d, 0xef, 0x38, 0xdf, 0xc6, 0x60, 0x41, 0x18, 0xb8, 0x2c, 0xea, 0xa8, 0xf2, 0xe6, 0x0e,
	0x73, 0xbb, 0x97, 0xd6, 0x1a, 0x0b, 0x30, 0xe1, 0x93, 0xc0, 0xf3, 0x63, 0x11, 0xa0, 0x8e, 0x32,
	0x64, 0x6c, 0x00, 0xb4, 0x53, 0x07, 0x99, 0x94, 0x48, 0xb1, 0x79, 0x67, 0x90, 0xd8, 0xd3, 0x82,
	0x4d, 0xc9, 0xd3, 0xc4, 0x9e, 0x95, 0xfd, 0x0e, 0x29, 0x07, 0xc9, 0x6d, 0x91, 0xd5, 0x53, 0xa8,
	0xf4, 0x70, 0x44, 0x68, 0xfc, 0x77, 0xd8, 0x77, 0x07, 0x89, 0x0d, 0x92, 0xce, 0x3c, 0xae, 0x49,
	0x8f, 0x9c, 0x73, 0x50, 0x26, 0x10, 0x2e, 0xf3, 0x30, 0x9e, 0x92, 0x8f, 0x64, 0xda, 0x48, 0x02,
	0xc5, 0x36, 0x54, 0xa2, 0x02, 0x28, 0x76, 0xc5, 0x9c, 0xcc, 0xd9, 0x95, 0x3c, 0xfd, 0xa9, 0xe2,
	0xf4, 0xdf, 0x80, 0x55, 0x1c, 0xde, 0xc8, 0x1f, 0xe0, 0xbc, 0x10, 0x9d, 0xf7, 0x60, 0x6f, 0x71,
	0xef, 0x65, 0x3f, 0x72, 0x7d, 0xcc, 0x89, 0x32, 0xdf, 0x8e, 0x71, 0x4c, 0xb6, 0x63, 0x16, 0x61,
	0x6f, 0x34, 0x6f, 0xda, 0x0f, 0xdb, 0xd9, 0x1f, 0xae, 0xa3, 0x0c, 0xe5, 0x6d, 0x95, 0x8b, 0xdb,
	0xfa, 0xaa, 0xc1, 0xfd, 0x4b, 0x0e, 0x1f, 0xbd, 0xc1, 0x07, 0x30, 0x2b, 0x8f, 0x6d, 0xf5, 0x32,
	0xbf, 0x4e, 0x76, 0x9d, 0xab, 0x92, 0x57, 0xc7, 0x74, 0x8c, 0x25, 0x21, 0x6d, 0xb9, 0x98, 0x0e,
	0xb5, 0xe2, 0x8a, 0x3a, 0x9a, 0xa1, 0xfd, 0x70, 0x13, 0x53, 0x25, 0x6d, 0x7c, 0x2a, 0x43, 0x79,
	0x8b, 0x7b, 0x46, 0x04, 0xb3, 0x67, 0x1e, 0xf6, 0xc3, 0x5a, 0xe1, 0x10, 0xa9, 0x15, 0xbc, 0x93,
	0x6a, 0x63, 0x74, 0xed, 0xb0, 0xe3, 0x0f, 0x30, 0x57, 0xf4, 0x5c, 0x96, 0x2f, 0xb2, 0x3a, 0x23,
	0xaf, 0xae, 0xfe, 0x93, 0x7c, 0x78, 0xf8, 0x17, 0x0d, 0x6e, 0x5d, 0xf8, 0x53, 0x3c, 0x39, 0xdf,
	0xf7, 0xa2, 0xba, 0xea, 0xfa, 0xff, 0xd5, 0xa9, 0x8b, 0x35, 0x5f, 0x7c, 0x3f, 0xb6, 0xb4, 0xa3,
	0x63, 0x4b, 0xfb, 0x75, 0x6c, 0x69, 0x9f, 0x4f, 0xac, 0xd2, 0xd1, 0x89, 0x55, 0xfa, 0x71, 0x62,
	0x95, 0xde, 0xae, 0x7a, 0x41, 0xec, 0xf7, 0xdb, 0x35, 0x97, 0x85, 0xf5, 0x3e, 0x0d, 0xde, 0x05,
	0x2e, 0x8e, 0x03, 0x46, 0x97, 0x53, 0x9c, 0x4f, 0xf0, 0xfd, 0x7c, 0x86, 0xa7, 0x33, 0x90, 0xb7,
	0x27, 0xc4, 0xf8, 0x5e, 0xf9, 0x13, 0x00, 0x00, 0xff, 0xff, 0x60, 0xa4, 0x63, 0x77, 0x33, 0x06,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RegisterWrkChain defines a method to register a new wrkchain
	RegisterWrkChain(ctx context.Context, in *MsgRegisterWrkChain, opts ...grpc.CallOption) (*MsgRegisterWrkChainResponse, error)
	// RecordWrkChainBlock defines a method to record a block hash set for a registered wrkchain
	RecordWrkChainBlock(ctx context.Context, in *MsgRecordWrkChainBlock, opts ...grpc.CallOption) (*MsgRecordWrkChainBlockResponse, error)
	// PurchaseWrkChainStateStorage defines the method to purchase more state storage
	PurchaseWrkChainStateStorage(ctx context.Context, in *MsgPurchaseWrkChainStateStorage, opts ...grpc.CallOption) (*MsgPurchaseWrkChainStateStorageResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterWrkChain(ctx context.Context, in *MsgRegisterWrkChain, opts ...grpc.CallOption) (*MsgRegisterWrkChainResponse, error) {
	out := new(MsgRegisterWrkChainResponse)
	err := c.cc.Invoke(ctx, "/mainchain.wrkchain.v2.Msg/RegisterWrkChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RecordWrkChainBlock(ctx context.Context, in *MsgRecordWrkChainBlock, opts ...grpc.CallOption) (*MsgRecordWrkChainBlockResponse, error) {
	out := new(MsgRecordWrkChainBlockResponse)
	err := c.cc.Invoke(ctx, "/mainchain.wrkchain.v2.Msg/RecordWrkChainBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PurchaseWrkChainStateStorage(ctx context.Context, in *MsgPurchaseWrkChainStateStorage, opts ...grpc.CallOption) (*MsgPurchaseWrkChainStateStorageResponse, error) {
	out := new(MsgPurchaseWrkChainStateStorageResponse)
	err := c.cc.Invoke(ctx, "/mainchain.wrkchain.v2.Msg/PurchaseWrkChainStateStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RegisterWrkChain defines a method to register a new wrkchain
	RegisterWrkChain(context.Context, *MsgRegisterWrkChain) (*MsgRegisterWrkChainResponse, error)
	// RecordWrkChainBlock defines a method to record a block hash set for a registered wrkchain
	RecordWrkChainBlock(context.Context, *MsgRecordWrkChainBlock) (*MsgRecordWrkChainBlockResponse, error)
	// PurchaseWrkChainStateStorage defines the method to purchase more state storage
	PurchaseWrkChainStateStorage(context.Context, *MsgPurchaseWrkChainStateStorage) (*MsgPurchaseWrkChainStateStorageResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterWrkChain(ctx context.Context, req *MsgRegisterWrkChain) (*MsgRegisterWrkChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWrkChain not implemented")
}
func (*UnimplementedMsgServer) RecordWrkChainBlock(ctx context.Context, req *MsgRecordWrkChainBlock) (*MsgRecordWrkChainBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordWrkChainBlock not implemented")
}
func (*UnimplementedMsgServer) PurchaseWrkChainStateStorage(ctx context.Context, req *MsgPurchaseWrkChainStateStorage) (*MsgPurchaseWrkChainStateStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseWrkChainStateStorage not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterWrkChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterWrkChain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterWrkChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.wrkchain.v2.Msg/RegisterWrkChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterWrkChain(ctx, req.(*MsgRegisterWrkChain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RecordWrkChainBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRecordWrkChainBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RecordWrkChainBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.wrkchain.v2.Msg/RecordWrkChainBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RecordWrkChainBlock(ctx, req.(*MsgRecordWrkChainBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PurchaseWrkChainStateStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPurchaseWrkChainStateStorage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PurchaseWrkChainStateStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.wrkchain.v2.Msg/PurchaseWrkChainStateStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PurchaseWrkChainStateStorage(ctx, req.(*MsgPurchaseWrkChainStateStorage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mainchain.wrkchain.v2.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterWrkChain",
			Handler:    _Msg_RegisterWrkChain_Handler,
		},
		{
			MethodName: "RecordWrkChainBlock",
			Handler:    _Msg_RecordWrkChainBlock_Handler,
		},
		{
			MethodName: "PurchaseWrkChainStateStorage",
			Handler:    _Msg_PurchaseWrkChainStateStorage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mainchain/wrkchain/v2/tx.proto",
}

func (m *MsgRegisterWrkChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterWrkChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterWrkChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BaseType) > 0 {
		i -= len(m.BaseType)
		copy(dAtA[i:], m.BaseType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BaseType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GenesisHash) > 0 {
		i -= len(m.GenesisHash)
		copy(dAtA[i:], m.GenesisHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GenesisHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterWrkChainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterWrkChainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterWrkChainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WrkchainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.WrkchainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgRecordWrkChainBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRecordWrkChainBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRecordWrkChainBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Hash3) > 0 {
		i -= len(m.Hash3)
		copy(dAtA[i:], m.Hash3)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hash3)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Hash2) > 0 {
		i -= len(m.Hash2)
		copy(dAtA[i:], m.Hash2)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hash2)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Hash1) > 0 {
		i -= len(m.Hash1)
		copy(dAtA[i:], m.Hash1)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hash1)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ParentHash) > 0 {
		i -= len(m.ParentHash)
		copy(dAtA[i:], m.ParentHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ParentHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.WrkchainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.WrkchainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgRecordWrkChainBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRecordWrkChainBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRecordWrkChainBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.WrkchainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.WrkchainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgPurchaseWrkChainStateStorage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPurchaseWrkChainStateStorage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPurchaseWrkChainStateStorage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Number != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x10
	}
	if m.WrkchainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.WrkchainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgPurchaseWrkChainStateStorageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPurchaseWrkChainStateStorageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPurchaseWrkChainStateStorageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumCanPurchase != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NumCanPurchase))
		i--
		dAtA[i] = 0x18
	}
	if m.NumberPurchased != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NumberPurchased))
		i--
		dAtA[i] = 0x10
	}
	if m.WrkchainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.WrkchainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterWrkChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GenesisHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BaseType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterWrkChainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WrkchainId != 0 {
		n += 1 + sovTx(uint64(m.WrkchainId))
	}
	return n
}

func (m *MsgRecordWrkChainBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WrkchainId != 0 {
		n += 1 + sovTx(uint64(m.WrkchainId))
	}
	if m.Height != 0 {
		n += 1 + sovTx(uint64(m.Height))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ParentHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Hash1)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Hash2)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Hash3)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRecordWrkChainBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WrkchainId != 0 {
		n += 1 + sovTx(uint64(m.WrkchainId))
	}
	if m.Height != 0 {
		n += 1 + sovTx(uint64(m.Height))
	}
	return n
}

func (m *MsgPurchaseWrkChainStateStorage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WrkchainId != 0 {
		n += 1 + sovTx(uint64(m.WrkchainId))
	}
	if m.Number != 0 {
		n += 1 + sovTx(uint64(m.Number))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPurchaseWrkChainStateStorageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WrkchainId != 0 {
		n += 1 + sovTx(uint64(m.WrkchainId))
	}
	if m.NumberPurchased != 0 {
		n += 1 + sovTx(uint64(m.NumberPurchased))
	}
	if m.NumCanPurchase != 0 {
		n += 1 + sovTx(uint64(m.NumCanPurchase))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterWrkChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterWrkChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterWrkChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterWrkChainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterWrkChainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterWrkChainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WrkchainId", wireType)
			}
			m.WrkchainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WrkchainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRecordWrkChainBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRecordWrkChainBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRecordWrkChainBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WrkchainId", wireType)
			}
			m.WrkchainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WrkchainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRecordWrkChainBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRecordWrkChainBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRecordWrkChainBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WrkchainId", wireType)
			}
			m.WrkchainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WrkchainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPurchaseWrkChainStateStorage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPurchaseWrkChainStateStorage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPurchaseWrkChainStateStorage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WrkchainId", wireType)
			}
			m.WrkchainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WrkchainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPurchaseWrkChainStateStorageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPurchaseWrkChainStateStorageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPurchaseWrkChainStateStorageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WrkchainId", wireType)
			}
			m.WrkchainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WrkchainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberPurchased", wireType)
			}
			m.NumberPurchased = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberPurchased |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumCanPurchase", wireType)
			}
			m.NumCanPurchase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumCanPurchase |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
