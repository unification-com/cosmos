// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mainchain/wrkchain/v1/wrkchain.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// WrkChain holds metadata about a registered wrkchain
type WrkChain struct {
	// wrkchain_id is the id of the wrkchain
	WrkchainId uint64 `protobuf:"varint,1,opt,name=wrkchain_id,json=wrkchainId,proto3" json:"wrkchain_id,omitempty"`
	// moniker is the readable id of the wrkchain
	Moniker string `protobuf:"bytes,2,opt,name=moniker,proto3" json:"moniker,omitempty"`
	// name is the human friendly name of the wrkchain
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// genesis is an optional hash of the wrkchain's genesis block
	Genesis string `protobuf:"bytes,4,opt,name=genesis,proto3" json:"genesis,omitempty"`
	// type is the wrkchain type, e.g. geth, cosmos etc.
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// lastblock is the current highest recorded height for the wrkchain
	Lastblock uint64 `protobuf:"varint,6,opt,name=lastblock,proto3" json:"lastblock,omitempty"`
	// num_blocks is the current number of block hashes stored in state for the wrkchain
	NumBlocks uint64 `protobuf:"varint,7,opt,name=num_blocks,json=numBlocks,proto3" json:"num_blocks,omitempty"`
	// lowest_height is the lowest recorded height currently held in state for the wrkchain
	LowestHeight uint64 `protobuf:"varint,8,opt,name=lowest_height,json=lowestHeight,proto3" json:"lowest_height,omitempty"`
	// reg_time is the unix epoch of the wrkchain's registration time
	RegTime uint64 `protobuf:"varint,9,opt,name=reg_time,json=regTime,proto3" json:"reg_time,omitempty"`
	// owner is the owner address of the wrkchain
	Owner string `protobuf:"bytes,10,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *WrkChain) Reset()         { *m = WrkChain{} }
func (m *WrkChain) String() string { return proto.CompactTextString(m) }
func (*WrkChain) ProtoMessage()    {}
func (*WrkChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_02a2970309ba545c, []int{0}
}
func (m *WrkChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WrkChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WrkChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WrkChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WrkChain.Merge(m, src)
}
func (m *WrkChain) XXX_Size() int {
	return m.Size()
}
func (m *WrkChain) XXX_DiscardUnknown() {
	xxx_messageInfo_WrkChain.DiscardUnknown(m)
}

var xxx_messageInfo_WrkChain proto.InternalMessageInfo

func (m *WrkChain) GetWrkchainId() uint64 {
	if m != nil {
		return m.WrkchainId
	}
	return 0
}

func (m *WrkChain) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *WrkChain) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WrkChain) GetGenesis() string {
	if m != nil {
		return m.Genesis
	}
	return ""
}

func (m *WrkChain) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *WrkChain) GetLastblock() uint64 {
	if m != nil {
		return m.Lastblock
	}
	return 0
}

func (m *WrkChain) GetNumBlocks() uint64 {
	if m != nil {
		return m.NumBlocks
	}
	return 0
}

func (m *WrkChain) GetLowestHeight() uint64 {
	if m != nil {
		return m.LowestHeight
	}
	return 0
}

func (m *WrkChain) GetRegTime() uint64 {
	if m != nil {
		return m.RegTime
	}
	return 0
}

func (m *WrkChain) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// WrkChainStorageLimit holds tata about the wrkchain's current in-state storage limit
type WrkChainStorageLimit struct {
	// wrkchain_id is the id of the wrkchain
	WrkchainId uint64 `protobuf:"varint,1,opt,name=wrkchain_id,json=wrkchainId,proto3" json:"wrkchain_id,omitempty"`
	// in_state_limit is the current maximum number of blocks that will be held in state for the wrkchain
	InStateLimit uint64 `protobuf:"varint,2,opt,name=in_state_limit,json=inStateLimit,proto3" json:"in_state_limit,omitempty"`
}

func (m *WrkChainStorageLimit) Reset()         { *m = WrkChainStorageLimit{} }
func (m *WrkChainStorageLimit) String() string { return proto.CompactTextString(m) }
func (*WrkChainStorageLimit) ProtoMessage()    {}
func (*WrkChainStorageLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_02a2970309ba545c, []int{1}
}
func (m *WrkChainStorageLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WrkChainStorageLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WrkChainStorageLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WrkChainStorageLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WrkChainStorageLimit.Merge(m, src)
}
func (m *WrkChainStorageLimit) XXX_Size() int {
	return m.Size()
}
func (m *WrkChainStorageLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_WrkChainStorageLimit.DiscardUnknown(m)
}

var xxx_messageInfo_WrkChainStorageLimit proto.InternalMessageInfo

func (m *WrkChainStorageLimit) GetWrkchainId() uint64 {
	if m != nil {
		return m.WrkchainId
	}
	return 0
}

func (m *WrkChainStorageLimit) GetInStateLimit() uint64 {
	if m != nil {
		return m.InStateLimit
	}
	return 0
}

// WrkChainBlock holds data about a wrkchain's block hash submission
type WrkChainBlock struct {
	// height is the block number/height of the stored wrkchain block hash
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	// blockhash is the block hash of the stored wrkchain block
	Blockhash string `protobuf:"bytes,2,opt,name=blockhash,proto3" json:"blockhash,omitempty"`
	// parenthash is the optional hash of the parent block of the stored wrkchain block hash
	Parenthash string `protobuf:"bytes,3,opt,name=parenthash,proto3" json:"parenthash,omitempty"`
	// hash1 is an optional hash of any type of the stored wrkchain block hash
	Hash1 string `protobuf:"bytes,4,opt,name=hash1,proto3" json:"hash1,omitempty"`
	// hash2 is an optional hash of any type of the stored wrkchain block hash
	Hash2 string `protobuf:"bytes,5,opt,name=hash2,proto3" json:"hash2,omitempty"`
	// hash3 is an optional hash of any type of the stored wrkchain block hash
	Hash3 string `protobuf:"bytes,6,opt,name=hash3,proto3" json:"hash3,omitempty"`
	// sub_time is the unix epoch of the wkrchain hash submission
	SubTime uint64 `protobuf:"varint,7,opt,name=sub_time,json=subTime,proto3" json:"sub_time,omitempty"`
}

func (m *WrkChainBlock) Reset()         { *m = WrkChainBlock{} }
func (m *WrkChainBlock) String() string { return proto.CompactTextString(m) }
func (*WrkChainBlock) ProtoMessage()    {}
func (*WrkChainBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_02a2970309ba545c, []int{2}
}
func (m *WrkChainBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WrkChainBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WrkChainBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WrkChainBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WrkChainBlock.Merge(m, src)
}
func (m *WrkChainBlock) XXX_Size() int {
	return m.Size()
}
func (m *WrkChainBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_WrkChainBlock.DiscardUnknown(m)
}

var xxx_messageInfo_WrkChainBlock proto.InternalMessageInfo

func (m *WrkChainBlock) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *WrkChainBlock) GetBlockhash() string {
	if m != nil {
		return m.Blockhash
	}
	return ""
}

func (m *WrkChainBlock) GetParenthash() string {
	if m != nil {
		return m.Parenthash
	}
	return ""
}

func (m *WrkChainBlock) GetHash1() string {
	if m != nil {
		return m.Hash1
	}
	return ""
}

func (m *WrkChainBlock) GetHash2() string {
	if m != nil {
		return m.Hash2
	}
	return ""
}

func (m *WrkChainBlock) GetHash3() string {
	if m != nil {
		return m.Hash3
	}
	return ""
}

func (m *WrkChainBlock) GetSubTime() uint64 {
	if m != nil {
		return m.SubTime
	}
	return 0
}

// Params defines the parameters for the wrkchain module.
type Params struct {
	// fee_register is the cost to register a wkrchain
	FeeRegister uint64 `protobuf:"varint,1,opt,name=fee_register,json=feeRegister,proto3" json:"fee_register,omitempty"`
	// fee_record is the cost to record a single wkrchain hash
	FeeRecord uint64 `protobuf:"varint,2,opt,name=fee_record,json=feeRecord,proto3" json:"fee_record,omitempty"`
	// fee_purchase_storage is the cost to purchase a single additional unit of in-state storage
	FeePurchaseStorage uint64 `protobuf:"varint,3,opt,name=fee_purchase_storage,json=feePurchaseStorage,proto3" json:"fee_purchase_storage,omitempty"`
	// denom is the expected denomination to pay for fees, e.g. nund
	Denom string `protobuf:"bytes,4,opt,name=denom,proto3" json:"denom,omitempty"`
	// default_storage_limit is the default in-state storage limit for all new wkrchains
	DefaultStorageLimit uint64 `protobuf:"varint,5,opt,name=default_storage_limit,json=defaultStorageLimit,proto3" json:"default_storage_limit,omitempty"`
	// max_storage_limit is the maximum in-state storage slots any one wkrchain can have
	MaxStorageLimit uint64 `protobuf:"varint,6,opt,name=max_storage_limit,json=maxStorageLimit,proto3" json:"max_storage_limit,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_02a2970309ba545c, []int{3}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetFeeRegister() uint64 {
	if m != nil {
		return m.FeeRegister
	}
	return 0
}

func (m *Params) GetFeeRecord() uint64 {
	if m != nil {
		return m.FeeRecord
	}
	return 0
}

func (m *Params) GetFeePurchaseStorage() uint64 {
	if m != nil {
		return m.FeePurchaseStorage
	}
	return 0
}

func (m *Params) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Params) GetDefaultStorageLimit() uint64 {
	if m != nil {
		return m.DefaultStorageLimit
	}
	return 0
}

func (m *Params) GetMaxStorageLimit() uint64 {
	if m != nil {
		return m.MaxStorageLimit
	}
	return 0
}

func init() {
	proto.RegisterType((*WrkChain)(nil), "mainchain.wrkchain.v1.WrkChain")
	proto.RegisterType((*WrkChainStorageLimit)(nil), "mainchain.wrkchain.v1.WrkChainStorageLimit")
	proto.RegisterType((*WrkChainBlock)(nil), "mainchain.wrkchain.v1.WrkChainBlock")
	proto.RegisterType((*Params)(nil), "mainchain.wrkchain.v1.Params")
}

func init() {
	proto.RegisterFile("mainchain/wrkchain/v1/wrkchain.proto", fileDescriptor_02a2970309ba545c)
}

var fileDescriptor_02a2970309ba545c = []byte{
	// 579 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xcd, 0x4e, 0x14, 0x4d,
	0x14, 0xa5, 0xf9, 0xe6, 0x87, 0xb9, 0xc0, 0x67, 0x2c, 0x07, 0x53, 0x18, 0x6d, 0x71, 0x64, 0x41,
	0x4c, 0x18, 0x04, 0xe2, 0x03, 0x88, 0x1b, 0x4d, 0x4c, 0x24, 0x83, 0x89, 0x89, 0x89, 0xe9, 0xd4,
	0x74, 0xdf, 0xe9, 0xae, 0xcc, 0x54, 0xd5, 0xa4, 0xaa, 0x1a, 0xf0, 0x2d, 0x7c, 0x18, 0x9e, 0xc0,
	0x95, 0x4b, 0xe2, 0xca, 0xa5, 0x81, 0x37, 0xf0, 0x09, 0x4c, 0xfd, 0x34, 0x83, 0x6e, 0x5c, 0x4d,
	0x9d, 0x73, 0x4f, 0xdd, 0xa9, 0x7b, 0x4e, 0x5f, 0xd8, 0x16, 0x8c, 0xcb, 0xbc, 0x62, 0x5c, 0xee,
	0x9d, 0xe9, 0x69, 0x38, 0x9c, 0xee, 0xdf, 0x9c, 0x87, 0x73, 0xad, 0xac, 0x22, 0x1b, 0x37, 0xaa,
	0xe1, 0x4d, 0xe5, 0x74, 0xff, 0xc1, 0x66, 0xae, 0x8c, 0x50, 0x26, 0xf3, 0xa2, 0xbd, 0x00, 0xc2,
	0x8d, 0xc1, 0xc5, 0x32, 0xac, 0x7c, 0xd0, 0xd3, 0x57, 0x4e, 0x4a, 0x1e, 0xc3, 0x6a, 0x73, 0x2d,
	0xe3, 0x05, 0x4d, 0xb6, 0x92, 0x9d, 0xd6, 0x08, 0x1a, 0xea, 0x4d, 0x41, 0x28, 0x74, 0x85, 0x92,
	0x7c, 0x8a, 0x9a, 0x2e, 0x6f, 0x25, 0x3b, 0xbd, 0x51, 0x03, 0x09, 0x81, 0x96, 0x64, 0x02, 0xe9,
	0x7f, 0x9e, 0xf6, 0x67, 0xa7, 0x2e, 0x51, 0xa2, 0xe1, 0x86, 0xb6, 0x82, 0x3a, 0x42, 0xa7, 0xb6,
	0x9f, 0xe7, 0x48, 0xdb, 0x41, 0xed, 0xce, 0xe4, 0x21, 0xf4, 0x66, 0xcc, 0xd8, 0xf1, 0x4c, 0xe5,
	0x53, 0xda, 0xf1, 0x7f, 0xbd, 0x20, 0xc8, 0x23, 0x00, 0x59, 0x8b, 0xcc, 0x03, 0x43, 0xbb, 0xa1,
	0x2c, 0x6b, 0x71, 0xe4, 0x09, 0xf2, 0x14, 0xd6, 0x67, 0xea, 0x0c, 0x8d, 0xcd, 0x2a, 0xe4, 0x65,
	0x65, 0xe9, 0x8a, 0x57, 0xac, 0x05, 0xf2, 0xb5, 0xe7, 0xc8, 0x26, 0xac, 0x68, 0x2c, 0x33, 0xcb,
	0x05, 0xd2, 0x9e, 0xaf, 0x77, 0x35, 0x96, 0xef, 0xb9, 0x40, 0x32, 0x84, 0xb6, 0x3a, 0x93, 0xa8,
	0x29, 0xb8, 0x17, 0x1d, 0xd1, 0xef, 0x17, 0xbb, 0xfd, 0xe8, 0xd3, 0xcb, 0xa2, 0xd0, 0x68, 0xcc,
	0x89, 0xd5, 0x5c, 0x96, 0xa3, 0x20, 0x1b, 0x7c, 0x82, 0x7e, 0xe3, 0xda, 0x89, 0x55, 0x9a, 0x95,
	0xf8, 0x96, 0x0b, 0x6e, 0xff, 0xed, 0xe0, 0x36, 0xfc, 0xcf, 0x65, 0x66, 0x2c, 0xb3, 0x98, 0xcd,
	0xdc, 0x15, 0x6f, 0x64, 0x6b, 0xb4, 0xe6, 0x1a, 0x31, 0x1b, 0xda, 0x0c, 0xbe, 0x26, 0xb0, 0xde,
	0xf4, 0xf7, 0x13, 0x92, 0xfb, 0xd0, 0x89, 0x93, 0x85, 0x9e, 0x11, 0x39, 0xd7, 0xbc, 0x27, 0x15,
	0x33, 0x55, 0xcc, 0x64, 0x41, 0x90, 0x14, 0x60, 0xce, 0x34, 0x4a, 0xeb, 0xcb, 0x21, 0x9b, 0x5b,
	0x0c, 0xe9, 0x43, 0xdb, 0xfd, 0xee, 0xc7, 0x7c, 0x02, 0x68, 0xd8, 0x83, 0x18, 0x4f, 0x00, 0x0d,
	0x7b, 0xe8, 0xb3, 0x89, 0xec, 0xa1, 0xf3, 0xd4, 0xd4, 0xe3, 0xe0, 0x69, 0x48, 0xa5, 0x6b, 0xea,
	0xb1, 0xf3, 0x74, 0xf0, 0x2b, 0x81, 0xce, 0x31, 0xd3, 0x4c, 0x18, 0xf2, 0x04, 0xd6, 0x26, 0x88,
	0x99, 0xc6, 0x92, 0x1b, 0x8b, 0x3a, 0xce, 0xb0, 0x3a, 0x41, 0x1c, 0x45, 0xca, 0x05, 0x1c, 0x24,
	0xb9, 0xd2, 0x45, 0x34, 0xa5, 0xe7, 0x05, 0x8e, 0x20, 0xcf, 0xa1, 0xef, 0xca, 0xf3, 0x5a, 0xe7,
	0x15, 0x33, 0x98, 0x99, 0xe0, 0xba, 0x9f, 0xa9, 0x35, 0x22, 0x13, 0xc4, 0xe3, 0x58, 0x8a, 0x79,
	0xb8, 0xf7, 0x16, 0x28, 0x95, 0x68, 0x66, 0xf3, 0x80, 0x1c, 0xc0, 0x46, 0x81, 0x13, 0x56, 0xcf,
	0x6c, 0xd3, 0x22, 0xc6, 0xd0, 0xf6, 0x8d, 0xee, 0xc5, 0xe2, 0x1f, 0xa1, 0x3e, 0x83, 0xbb, 0x82,
	0x9d, 0xff, 0xa5, 0x0f, 0x5f, 0xe8, 0x1d, 0xc1, 0xce, 0x6f, 0x6b, 0x8f, 0xde, 0x7d, 0xbb, 0x4a,
	0x93, 0xcb, 0xab, 0x34, 0xf9, 0x79, 0x95, 0x26, 0x5f, 0xae, 0xd3, 0xa5, 0xcb, 0xeb, 0x74, 0xe9,
	0xc7, 0x75, 0xba, 0xf4, 0xf1, 0x45, 0xc9, 0x6d, 0x55, 0x8f, 0x87, 0xb9, 0x12, 0x7b, 0xb5, 0xe4,
	0x13, 0x9e, 0x33, 0xcb, 0x95, 0xdc, 0x75, 0x78, 0xb1, 0xdc, 0xe7, 0x8b, 0xf5, 0x76, 0x5b, 0x61,
	0xc6, 0x1d, 0xbf, 0xa7, 0x87, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x15, 0x4b, 0xa6, 0x0b, 0x01,
	0x04, 0x00, 0x00,
}

func (m *WrkChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WrkChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WrkChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintWrkchain(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x52
	}
	if m.RegTime != 0 {
		i = encodeVarintWrkchain(dAtA, i, uint64(m.RegTime))
		i--
		dAtA[i] = 0x48
	}
	if m.LowestHeight != 0 {
		i = encodeVarintWrkchain(dAtA, i, uint64(m.LowestHeight))
		i--
		dAtA[i] = 0x40
	}
	if m.NumBlocks != 0 {
		i = encodeVarintWrkchain(dAtA, i, uint64(m.NumBlocks))
		i--
		dAtA[i] = 0x38
	}
	if m.Lastblock != 0 {
		i = encodeVarintWrkchain(dAtA, i, uint64(m.Lastblock))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintWrkchain(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Genesis) > 0 {
		i -= len(m.Genesis)
		copy(dAtA[i:], m.Genesis)
		i = encodeVarintWrkchain(dAtA, i, uint64(len(m.Genesis)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintWrkchain(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintWrkchain(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0x12
	}
	if m.WrkchainId != 0 {
		i = encodeVarintWrkchain(dAtA, i, uint64(m.WrkchainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WrkChainStorageLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WrkChainStorageLimit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WrkChainStorageLimit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InStateLimit != 0 {
		i = encodeVarintWrkchain(dAtA, i, uint64(m.InStateLimit))
		i--
		dAtA[i] = 0x10
	}
	if m.WrkchainId != 0 {
		i = encodeVarintWrkchain(dAtA, i, uint64(m.WrkchainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WrkChainBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WrkChainBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WrkChainBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubTime != 0 {
		i = encodeVarintWrkchain(dAtA, i, uint64(m.SubTime))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Hash3) > 0 {
		i -= len(m.Hash3)
		copy(dAtA[i:], m.Hash3)
		i = encodeVarintWrkchain(dAtA, i, uint64(len(m.Hash3)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Hash2) > 0 {
		i -= len(m.Hash2)
		copy(dAtA[i:], m.Hash2)
		i = encodeVarintWrkchain(dAtA, i, uint64(len(m.Hash2)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Hash1) > 0 {
		i -= len(m.Hash1)
		copy(dAtA[i:], m.Hash1)
		i = encodeVarintWrkchain(dAtA, i, uint64(len(m.Hash1)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Parenthash) > 0 {
		i -= len(m.Parenthash)
		copy(dAtA[i:], m.Parenthash)
		i = encodeVarintWrkchain(dAtA, i, uint64(len(m.Parenthash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Blockhash) > 0 {
		i -= len(m.Blockhash)
		copy(dAtA[i:], m.Blockhash)
		i = encodeVarintWrkchain(dAtA, i, uint64(len(m.Blockhash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintWrkchain(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxStorageLimit != 0 {
		i = encodeVarintWrkchain(dAtA, i, uint64(m.MaxStorageLimit))
		i--
		dAtA[i] = 0x30
	}
	if m.DefaultStorageLimit != 0 {
		i = encodeVarintWrkchain(dAtA, i, uint64(m.DefaultStorageLimit))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintWrkchain(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x22
	}
	if m.FeePurchaseStorage != 0 {
		i = encodeVarintWrkchain(dAtA, i, uint64(m.FeePurchaseStorage))
		i--
		dAtA[i] = 0x18
	}
	if m.FeeRecord != 0 {
		i = encodeVarintWrkchain(dAtA, i, uint64(m.FeeRecord))
		i--
		dAtA[i] = 0x10
	}
	if m.FeeRegister != 0 {
		i = encodeVarintWrkchain(dAtA, i, uint64(m.FeeRegister))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintWrkchain(dAtA []byte, offset int, v uint64) int {
	offset -= sovWrkchain(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WrkChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WrkchainId != 0 {
		n += 1 + sovWrkchain(uint64(m.WrkchainId))
	}
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovWrkchain(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovWrkchain(uint64(l))
	}
	l = len(m.Genesis)
	if l > 0 {
		n += 1 + l + sovWrkchain(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovWrkchain(uint64(l))
	}
	if m.Lastblock != 0 {
		n += 1 + sovWrkchain(uint64(m.Lastblock))
	}
	if m.NumBlocks != 0 {
		n += 1 + sovWrkchain(uint64(m.NumBlocks))
	}
	if m.LowestHeight != 0 {
		n += 1 + sovWrkchain(uint64(m.LowestHeight))
	}
	if m.RegTime != 0 {
		n += 1 + sovWrkchain(uint64(m.RegTime))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovWrkchain(uint64(l))
	}
	return n
}

func (m *WrkChainStorageLimit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WrkchainId != 0 {
		n += 1 + sovWrkchain(uint64(m.WrkchainId))
	}
	if m.InStateLimit != 0 {
		n += 1 + sovWrkchain(uint64(m.InStateLimit))
	}
	return n
}

func (m *WrkChainBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovWrkchain(uint64(m.Height))
	}
	l = len(m.Blockhash)
	if l > 0 {
		n += 1 + l + sovWrkchain(uint64(l))
	}
	l = len(m.Parenthash)
	if l > 0 {
		n += 1 + l + sovWrkchain(uint64(l))
	}
	l = len(m.Hash1)
	if l > 0 {
		n += 1 + l + sovWrkchain(uint64(l))
	}
	l = len(m.Hash2)
	if l > 0 {
		n += 1 + l + sovWrkchain(uint64(l))
	}
	l = len(m.Hash3)
	if l > 0 {
		n += 1 + l + sovWrkchain(uint64(l))
	}
	if m.SubTime != 0 {
		n += 1 + sovWrkchain(uint64(m.SubTime))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FeeRegister != 0 {
		n += 1 + sovWrkchain(uint64(m.FeeRegister))
	}
	if m.FeeRecord != 0 {
		n += 1 + sovWrkchain(uint64(m.FeeRecord))
	}
	if m.FeePurchaseStorage != 0 {
		n += 1 + sovWrkchain(uint64(m.FeePurchaseStorage))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovWrkchain(uint64(l))
	}
	if m.DefaultStorageLimit != 0 {
		n += 1 + sovWrkchain(uint64(m.DefaultStorageLimit))
	}
	if m.MaxStorageLimit != 0 {
		n += 1 + sovWrkchain(uint64(m.MaxStorageLimit))
	}
	return n
}

func sovWrkchain(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWrkchain(x uint64) (n int) {
	return sovWrkchain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WrkChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWrkchain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WrkChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WrkChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WrkchainId", wireType)
			}
			m.WrkchainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WrkchainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWrkchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWrkchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWrkchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWrkchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Genesis", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWrkchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWrkchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Genesis = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWrkchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWrkchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lastblock", wireType)
			}
			m.Lastblock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lastblock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumBlocks", wireType)
			}
			m.NumBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowestHeight", wireType)
			}
			m.LowestHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowestHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegTime", wireType)
			}
			m.RegTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWrkchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWrkchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWrkchain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWrkchain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WrkChainStorageLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWrkchain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WrkChainStorageLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WrkChainStorageLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WrkchainId", wireType)
			}
			m.WrkchainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WrkchainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InStateLimit", wireType)
			}
			m.InStateLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InStateLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWrkchain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWrkchain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WrkChainBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWrkchain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WrkChainBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WrkChainBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockhash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWrkchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWrkchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blockhash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parenthash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWrkchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWrkchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parenthash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWrkchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWrkchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWrkchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWrkchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWrkchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWrkchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTime", wireType)
			}
			m.SubTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWrkchain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWrkchain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWrkchain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRegister", wireType)
			}
			m.FeeRegister = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeRegister |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRecord", wireType)
			}
			m.FeeRecord = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeRecord |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePurchaseStorage", wireType)
			}
			m.FeePurchaseStorage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeePurchaseStorage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWrkchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWrkchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultStorageLimit", wireType)
			}
			m.DefaultStorageLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultStorageLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxStorageLimit", wireType)
			}
			m.MaxStorageLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxStorageLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWrkchain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWrkchain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWrkchain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWrkchain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWrkchain
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWrkchain
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWrkchain
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWrkchain        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWrkchain          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWrkchain = fmt.Errorf("proto: unexpected end of group")
)
