// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mainchain/wrkchain/legacy/wrkchain.proto

package v040

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// WrkChain holds metadata about a registered wrkchain
type WrkChain struct {
	WrkchainId   uint64 `protobuf:"varint,1,opt,name=wrkchain_id,json=wrkchainId,proto3" json:"wrkchain_id,omitempty"`
	Moniker      string `protobuf:"bytes,2,opt,name=moniker,proto3" json:"moniker,omitempty"`
	Name         string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Genesis      string `protobuf:"bytes,4,opt,name=genesis,proto3" json:"genesis,omitempty"`
	Type         string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Lastblock    uint64 `protobuf:"varint,6,opt,name=lastblock,proto3" json:"lastblock,omitempty"`
	NumBlocks    uint64 `protobuf:"varint,7,opt,name=num_blocks,json=numBlocks,proto3" json:"num_blocks,omitempty"`
	LowestHeight uint64 `protobuf:"varint,8,opt,name=lowest_height,json=lowestHeight,proto3" json:"lowest_height,omitempty"`
	RegTime      uint64 `protobuf:"varint,9,opt,name=reg_time,json=regTime,proto3" json:"reg_time,omitempty"`
	Owner        string `protobuf:"bytes,10,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *WrkChain) Reset()         { *m = WrkChain{} }
func (m *WrkChain) String() string { return proto.CompactTextString(m) }
func (*WrkChain) ProtoMessage()    {}
func (*WrkChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e24b621a6e09507, []int{0}
}
func (m *WrkChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WrkChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WrkChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WrkChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WrkChain.Merge(m, src)
}
func (m *WrkChain) XXX_Size() int {
	return m.Size()
}
func (m *WrkChain) XXX_DiscardUnknown() {
	xxx_messageInfo_WrkChain.DiscardUnknown(m)
}

var xxx_messageInfo_WrkChain proto.InternalMessageInfo

func (m *WrkChain) GetWrkchainId() uint64 {
	if m != nil {
		return m.WrkchainId
	}
	return 0
}

func (m *WrkChain) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *WrkChain) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WrkChain) GetGenesis() string {
	if m != nil {
		return m.Genesis
	}
	return ""
}

func (m *WrkChain) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *WrkChain) GetLastblock() uint64 {
	if m != nil {
		return m.Lastblock
	}
	return 0
}

func (m *WrkChain) GetNumBlocks() uint64 {
	if m != nil {
		return m.NumBlocks
	}
	return 0
}

func (m *WrkChain) GetLowestHeight() uint64 {
	if m != nil {
		return m.LowestHeight
	}
	return 0
}

func (m *WrkChain) GetRegTime() uint64 {
	if m != nil {
		return m.RegTime
	}
	return 0
}

func (m *WrkChain) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// WrkChainBlock holds data about a wrkchain's block hash submission
type WrkChainBlock struct {
	Height     uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Blockhash  string `protobuf:"bytes,2,opt,name=blockhash,proto3" json:"blockhash,omitempty"`
	Parenthash string `protobuf:"bytes,3,opt,name=parenthash,proto3" json:"parenthash,omitempty"`
	Hash1      string `protobuf:"bytes,4,opt,name=hash1,proto3" json:"hash1,omitempty"`
	Hash2      string `protobuf:"bytes,5,opt,name=hash2,proto3" json:"hash2,omitempty"`
	Hash3      string `protobuf:"bytes,6,opt,name=hash3,proto3" json:"hash3,omitempty"`
	SubTime    uint64 `protobuf:"varint,7,opt,name=sub_time,json=subTime,proto3" json:"sub_time,omitempty"`
}

func (m *WrkChainBlock) Reset()         { *m = WrkChainBlock{} }
func (m *WrkChainBlock) String() string { return proto.CompactTextString(m) }
func (*WrkChainBlock) ProtoMessage()    {}
func (*WrkChainBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e24b621a6e09507, []int{1}
}
func (m *WrkChainBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WrkChainBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WrkChainBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WrkChainBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WrkChainBlock.Merge(m, src)
}
func (m *WrkChainBlock) XXX_Size() int {
	return m.Size()
}
func (m *WrkChainBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_WrkChainBlock.DiscardUnknown(m)
}

var xxx_messageInfo_WrkChainBlock proto.InternalMessageInfo

func (m *WrkChainBlock) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *WrkChainBlock) GetBlockhash() string {
	if m != nil {
		return m.Blockhash
	}
	return ""
}

func (m *WrkChainBlock) GetParenthash() string {
	if m != nil {
		return m.Parenthash
	}
	return ""
}

func (m *WrkChainBlock) GetHash1() string {
	if m != nil {
		return m.Hash1
	}
	return ""
}

func (m *WrkChainBlock) GetHash2() string {
	if m != nil {
		return m.Hash2
	}
	return ""
}

func (m *WrkChainBlock) GetHash3() string {
	if m != nil {
		return m.Hash3
	}
	return ""
}

func (m *WrkChainBlock) GetSubTime() uint64 {
	if m != nil {
		return m.SubTime
	}
	return 0
}

// Params defines the parameters for the wrkchain module.
type Params struct {
	FeeRegister uint64 `protobuf:"varint,1,opt,name=fee_register,json=feeRegister,proto3" json:"fee_register,omitempty"`
	FeeRecord   uint64 `protobuf:"varint,2,opt,name=fee_record,json=feeRecord,proto3" json:"fee_record,omitempty"`
	Denom       string `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e24b621a6e09507, []int{2}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetFeeRegister() uint64 {
	if m != nil {
		return m.FeeRegister
	}
	return 0
}

func (m *Params) GetFeeRecord() uint64 {
	if m != nil {
		return m.FeeRecord
	}
	return 0
}

func (m *Params) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func init() {
	proto.RegisterType((*WrkChain)(nil), "mainchain.wrkchain.legacy.WrkChain")
	proto.RegisterType((*WrkChainBlock)(nil), "mainchain.wrkchain.legacy.WrkChainBlock")
	proto.RegisterType((*Params)(nil), "mainchain.wrkchain.legacy.Params")
}

func init() {
	proto.RegisterFile("mainchain/wrkchain/legacy/wrkchain.proto", fileDescriptor_7e24b621a6e09507)
}

var fileDescriptor_7e24b621a6e09507 = []byte{
	// 455 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0x3d, 0x8f, 0x13, 0x3f,
	0x10, 0xc6, 0xb3, 0xf7, 0xcf, 0xe5, 0x65, 0xee, 0xae, 0xb1, 0x4e, 0x7f, 0xf9, 0x10, 0x2c, 0x47,
	0x68, 0xd2, 0x90, 0x1c, 0x84, 0x8e, 0xee, 0x68, 0xa0, 0x43, 0x11, 0x08, 0x89, 0x66, 0xf1, 0x6e,
	0x26, 0x5e, 0x2b, 0xb1, 0x1d, 0xd9, 0x5e, 0xc2, 0x7d, 0x0b, 0x6a, 0x3e, 0x0e, 0x15, 0xe5, 0x95,
	0x94, 0x28, 0xf9, 0x22, 0xc8, 0x2f, 0x9b, 0x20, 0x51, 0xed, 0x3c, 0xbf, 0x79, 0x56, 0xe3, 0x79,
	0x34, 0x30, 0x96, 0x4c, 0xa8, 0xaa, 0x66, 0x42, 0x4d, 0xb7, 0x66, 0x15, 0x8b, 0x35, 0x72, 0x56,
	0xdd, 0x1d, 0xf4, 0x64, 0x63, 0xb4, 0xd3, 0xe4, 0xea, 0xe0, 0x9c, 0x1c, 0x3a, 0xd1, 0xf9, 0xe0,
	0x92, 0x6b, 0xae, 0x83, 0x6b, 0xea, 0xab, 0xf8, 0xc3, 0xe8, 0xfb, 0x09, 0x0c, 0x3e, 0x9a, 0xd5,
	0x6b, 0xef, 0x24, 0x8f, 0xe1, 0xac, 0xfd, 0xab, 0x10, 0x0b, 0x9a, 0x5d, 0x67, 0xe3, 0xee, 0x1c,
	0x5a, 0xf4, 0x76, 0x41, 0x28, 0xf4, 0xa5, 0x56, 0x62, 0x85, 0x86, 0x9e, 0x5c, 0x67, 0xe3, 0xe1,
	0xbc, 0x95, 0x84, 0x40, 0x57, 0x31, 0x89, 0xf4, 0xbf, 0x80, 0x43, 0xed, 0xdd, 0x1c, 0x15, 0x5a,
	0x61, 0x69, 0x37, 0xba, 0x93, 0xf4, 0x6e, 0x77, 0xb7, 0x41, 0x7a, 0x1a, 0xdd, 0xbe, 0x26, 0x0f,
	0x61, 0xb8, 0x66, 0xd6, 0x95, 0x6b, 0x5d, 0xad, 0x68, 0x2f, 0x8c, 0x3e, 0x02, 0xf2, 0x08, 0x40,
	0x35, 0xb2, 0x08, 0xc2, 0xd2, 0x7e, 0x6c, 0xab, 0x46, 0xde, 0x06, 0x40, 0x9e, 0xc2, 0xc5, 0x5a,
	0x6f, 0xd1, 0xba, 0xa2, 0x46, 0xc1, 0x6b, 0x47, 0x07, 0xc1, 0x71, 0x1e, 0xe1, 0x9b, 0xc0, 0xc8,
	0x15, 0x0c, 0x0c, 0xf2, 0xc2, 0x09, 0x89, 0x74, 0x18, 0xfa, 0x7d, 0x83, 0xfc, 0xbd, 0x90, 0x48,
	0x2e, 0xe1, 0x54, 0x6f, 0x15, 0x1a, 0x0a, 0xe1, 0x45, 0x51, 0x8c, 0x7e, 0x64, 0x70, 0xd1, 0x86,
	0x13, 0x06, 0x91, 0xff, 0xa1, 0x97, 0x06, 0xc4, 0x70, 0x92, 0xf2, 0x8f, 0x0f, 0x4f, 0xab, 0x99,
	0xad, 0x53, 0x34, 0x47, 0x40, 0x72, 0x80, 0x0d, 0x33, 0xa8, 0x5c, 0x68, 0xc7, 0x88, 0xfe, 0x22,
	0x7e, 0xba, 0xff, 0x3e, 0x4f, 0x31, 0x45, 0xd1, 0xd2, 0x17, 0x29, 0xa5, 0x28, 0x5a, 0x3a, 0x0b,
	0x11, 0x25, 0x3a, 0xf3, 0xab, 0xd9, 0xa6, 0x8c, 0xab, 0xc5, 0x70, 0xfa, 0xb6, 0x29, 0xfd, 0x6a,
	0xa3, 0xcf, 0xd0, 0x7b, 0xc7, 0x0c, 0x93, 0x96, 0x3c, 0x81, 0xf3, 0x25, 0x62, 0x61, 0x90, 0x0b,
	0xeb, 0xd0, 0xa4, 0x15, 0xce, 0x96, 0x88, 0xf3, 0x84, 0x7c, 0xcc, 0xd1, 0x52, 0x69, 0xb3, 0x08,
	0x8b, 0x74, 0xe7, 0xc3, 0x60, 0xf0, 0xc0, 0x0f, 0x5f, 0xa0, 0xd2, 0x32, 0xed, 0x10, 0xc5, 0xed,
	0x87, 0x9f, 0xbb, 0x3c, 0xbb, 0xdf, 0xe5, 0xd9, 0xef, 0x5d, 0x9e, 0x7d, 0xdb, 0xe7, 0x9d, 0xfb,
	0x7d, 0xde, 0xf9, 0xb5, 0xcf, 0x3b, 0x9f, 0x5e, 0x71, 0xe1, 0xea, 0xa6, 0x9c, 0x54, 0x5a, 0x4e,
	0x1b, 0x25, 0x96, 0xa2, 0x62, 0x4e, 0x68, 0xf5, 0xcc, 0xeb, 0xe3, 0x4d, 0x7f, 0xfd, 0xe7, 0xaa,
	0xbf, 0xdc, 0xbc, 0xbc, 0x29, 0x7b, 0xe1, 0x42, 0x67, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc7,
	0xff, 0x26, 0xda, 0xfe, 0x02, 0x00, 0x00,
}

func (m *WrkChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WrkChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WrkChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintWrkchain(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x52
	}
	if m.RegTime != 0 {
		i = encodeVarintWrkchain(dAtA, i, uint64(m.RegTime))
		i--
		dAtA[i] = 0x48
	}
	if m.LowestHeight != 0 {
		i = encodeVarintWrkchain(dAtA, i, uint64(m.LowestHeight))
		i--
		dAtA[i] = 0x40
	}
	if m.NumBlocks != 0 {
		i = encodeVarintWrkchain(dAtA, i, uint64(m.NumBlocks))
		i--
		dAtA[i] = 0x38
	}
	if m.Lastblock != 0 {
		i = encodeVarintWrkchain(dAtA, i, uint64(m.Lastblock))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintWrkchain(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Genesis) > 0 {
		i -= len(m.Genesis)
		copy(dAtA[i:], m.Genesis)
		i = encodeVarintWrkchain(dAtA, i, uint64(len(m.Genesis)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintWrkchain(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintWrkchain(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0x12
	}
	if m.WrkchainId != 0 {
		i = encodeVarintWrkchain(dAtA, i, uint64(m.WrkchainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WrkChainBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WrkChainBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WrkChainBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubTime != 0 {
		i = encodeVarintWrkchain(dAtA, i, uint64(m.SubTime))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Hash3) > 0 {
		i -= len(m.Hash3)
		copy(dAtA[i:], m.Hash3)
		i = encodeVarintWrkchain(dAtA, i, uint64(len(m.Hash3)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Hash2) > 0 {
		i -= len(m.Hash2)
		copy(dAtA[i:], m.Hash2)
		i = encodeVarintWrkchain(dAtA, i, uint64(len(m.Hash2)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Hash1) > 0 {
		i -= len(m.Hash1)
		copy(dAtA[i:], m.Hash1)
		i = encodeVarintWrkchain(dAtA, i, uint64(len(m.Hash1)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Parenthash) > 0 {
		i -= len(m.Parenthash)
		copy(dAtA[i:], m.Parenthash)
		i = encodeVarintWrkchain(dAtA, i, uint64(len(m.Parenthash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Blockhash) > 0 {
		i -= len(m.Blockhash)
		copy(dAtA[i:], m.Blockhash)
		i = encodeVarintWrkchain(dAtA, i, uint64(len(m.Blockhash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintWrkchain(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintWrkchain(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FeeRecord != 0 {
		i = encodeVarintWrkchain(dAtA, i, uint64(m.FeeRecord))
		i--
		dAtA[i] = 0x10
	}
	if m.FeeRegister != 0 {
		i = encodeVarintWrkchain(dAtA, i, uint64(m.FeeRegister))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintWrkchain(dAtA []byte, offset int, v uint64) int {
	offset -= sovWrkchain(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WrkChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WrkchainId != 0 {
		n += 1 + sovWrkchain(uint64(m.WrkchainId))
	}
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovWrkchain(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovWrkchain(uint64(l))
	}
	l = len(m.Genesis)
	if l > 0 {
		n += 1 + l + sovWrkchain(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovWrkchain(uint64(l))
	}
	if m.Lastblock != 0 {
		n += 1 + sovWrkchain(uint64(m.Lastblock))
	}
	if m.NumBlocks != 0 {
		n += 1 + sovWrkchain(uint64(m.NumBlocks))
	}
	if m.LowestHeight != 0 {
		n += 1 + sovWrkchain(uint64(m.LowestHeight))
	}
	if m.RegTime != 0 {
		n += 1 + sovWrkchain(uint64(m.RegTime))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovWrkchain(uint64(l))
	}
	return n
}

func (m *WrkChainBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovWrkchain(uint64(m.Height))
	}
	l = len(m.Blockhash)
	if l > 0 {
		n += 1 + l + sovWrkchain(uint64(l))
	}
	l = len(m.Parenthash)
	if l > 0 {
		n += 1 + l + sovWrkchain(uint64(l))
	}
	l = len(m.Hash1)
	if l > 0 {
		n += 1 + l + sovWrkchain(uint64(l))
	}
	l = len(m.Hash2)
	if l > 0 {
		n += 1 + l + sovWrkchain(uint64(l))
	}
	l = len(m.Hash3)
	if l > 0 {
		n += 1 + l + sovWrkchain(uint64(l))
	}
	if m.SubTime != 0 {
		n += 1 + sovWrkchain(uint64(m.SubTime))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FeeRegister != 0 {
		n += 1 + sovWrkchain(uint64(m.FeeRegister))
	}
	if m.FeeRecord != 0 {
		n += 1 + sovWrkchain(uint64(m.FeeRecord))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovWrkchain(uint64(l))
	}
	return n
}

func sovWrkchain(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWrkchain(x uint64) (n int) {
	return sovWrkchain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WrkChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWrkchain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WrkChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WrkChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WrkchainId", wireType)
			}
			m.WrkchainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WrkchainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWrkchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWrkchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWrkchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWrkchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Genesis", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWrkchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWrkchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Genesis = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWrkchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWrkchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lastblock", wireType)
			}
			m.Lastblock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lastblock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumBlocks", wireType)
			}
			m.NumBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowestHeight", wireType)
			}
			m.LowestHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowestHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegTime", wireType)
			}
			m.RegTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWrkchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWrkchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWrkchain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWrkchain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WrkChainBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWrkchain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WrkChainBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WrkChainBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockhash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWrkchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWrkchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blockhash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parenthash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWrkchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWrkchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parenthash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWrkchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWrkchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWrkchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWrkchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWrkchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWrkchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTime", wireType)
			}
			m.SubTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWrkchain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWrkchain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWrkchain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRegister", wireType)
			}
			m.FeeRegister = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeRegister |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRecord", wireType)
			}
			m.FeeRecord = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeRecord |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWrkchain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWrkchain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWrkchain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWrkchain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWrkchain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWrkchain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWrkchain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWrkchain
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWrkchain
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWrkchain
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWrkchain        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWrkchain          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWrkchain = fmt.Errorf("proto: unexpected end of group")
)
