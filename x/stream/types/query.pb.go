// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mainchain/stream/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e41f208b821ea45d, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e41f208b821ea45d, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryCalculateFlowRateRequest is the request type for the Query/CalculateFlowRate RPC method
type QueryCalculateFlowRateRequest struct {
	// coin is the coin to be used in the calculation, e.g. 10000000000nund
	Coin string `protobuf:"bytes,1,opt,name=coin,proto3" json:"coin,omitempty"`
	// period is the enumerated value of a period to be used in the calculation, e.g. month = 6
	Period StreamPeriod `protobuf:"varint,2,opt,name=period,proto3,enum=mainchain.stream.v1.StreamPeriod" json:"period,omitempty"`
	// duration is the number of periods to be used in the calculation, e.g. 1 = 1 month
	Duration uint64 `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *QueryCalculateFlowRateRequest) Reset()         { *m = QueryCalculateFlowRateRequest{} }
func (m *QueryCalculateFlowRateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCalculateFlowRateRequest) ProtoMessage()    {}
func (*QueryCalculateFlowRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e41f208b821ea45d, []int{2}
}
func (m *QueryCalculateFlowRateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCalculateFlowRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCalculateFlowRateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCalculateFlowRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCalculateFlowRateRequest.Merge(m, src)
}
func (m *QueryCalculateFlowRateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCalculateFlowRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCalculateFlowRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCalculateFlowRateRequest proto.InternalMessageInfo

// QueryCalculateFlowRateResponse is the response type for the Query/CalculateFlowRate RPC method
type QueryCalculateFlowRateResponse struct {
	// coin is the coin used in the calculation
	Coin types.Coin `protobuf:"bytes,1,opt,name=coin,proto3" json:"coin"`
	// period is the enumerated value of a period used in the calculation, e.g. month = 6
	Period StreamPeriod `protobuf:"varint,2,opt,name=period,proto3,enum=mainchain.stream.v1.StreamPeriod" json:"period,omitempty"`
	// duration is the number of periods used in the calculation, e.g. 1 = 1 month
	Duration uint64 `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	// seconds is the calculated number of seconds for the stream (period * duration)
	Seconds uint64 `protobuf:"varint,4,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// flow_rate is the calculated rate of coins per second, in the lowest denomination - e.g. nund
	FlowRate int64 `protobuf:"varint,5,opt,name=flow_rate,json=flowRate,proto3" json:"flow_rate,omitempty"`
}

func (m *QueryCalculateFlowRateResponse) Reset()         { *m = QueryCalculateFlowRateResponse{} }
func (m *QueryCalculateFlowRateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCalculateFlowRateResponse) ProtoMessage()    {}
func (*QueryCalculateFlowRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e41f208b821ea45d, []int{3}
}
func (m *QueryCalculateFlowRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCalculateFlowRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCalculateFlowRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCalculateFlowRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCalculateFlowRateResponse.Merge(m, src)
}
func (m *QueryCalculateFlowRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCalculateFlowRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCalculateFlowRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCalculateFlowRateResponse proto.InternalMessageInfo

func (m *QueryCalculateFlowRateResponse) GetCoin() types.Coin {
	if m != nil {
		return m.Coin
	}
	return types.Coin{}
}

func (m *QueryCalculateFlowRateResponse) GetPeriod() StreamPeriod {
	if m != nil {
		return m.Period
	}
	return StreamPeriodUnspecified
}

func (m *QueryCalculateFlowRateResponse) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *QueryCalculateFlowRateResponse) GetSeconds() uint64 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *QueryCalculateFlowRateResponse) GetFlowRate() int64 {
	if m != nil {
		return m.FlowRate
	}
	return 0
}

// QueryStreamsRequest is the request type for the Query/Streams RPC method
type QueryStreamsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryStreamsRequest) Reset()         { *m = QueryStreamsRequest{} }
func (m *QueryStreamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStreamsRequest) ProtoMessage()    {}
func (*QueryStreamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e41f208b821ea45d, []int{4}
}
func (m *QueryStreamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStreamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStreamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStreamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStreamsRequest.Merge(m, src)
}
func (m *QueryStreamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStreamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStreamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStreamsRequest proto.InternalMessageInfo

func (m *QueryStreamsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryStreamsResponse is the response type for the Query/Streams RPC method
type QueryStreamsResponse struct {
	// streams is the list of all streams
	Streams []Stream `protobuf:"bytes,1,rep,name=streams,proto3" json:"streams"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryStreamsResponse) Reset()         { *m = QueryStreamsResponse{} }
func (m *QueryStreamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStreamsResponse) ProtoMessage()    {}
func (*QueryStreamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e41f208b821ea45d, []int{5}
}
func (m *QueryStreamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStreamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStreamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStreamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStreamsResponse.Merge(m, src)
}
func (m *QueryStreamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStreamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStreamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStreamsResponse proto.InternalMessageInfo

func (m *QueryStreamsResponse) GetStreams() []Stream {
	if m != nil {
		return m.Streams
	}
	return nil
}

func (m *QueryStreamsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllStreamsForReceiverRequest is the request type for the Query/AllStreamsForReceiver RPC method
type QueryAllStreamsForReceiverRequest struct {
	// receiver_addr is the receiver wallet address being queried
	ReceiverAddr string `protobuf:"bytes,1,opt,name=receiver_addr,json=receiverAddr,proto3" json:"receiver_addr,omitempty"`
	// pagination is the pagination parameters for the request
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStreamsForReceiverRequest) Reset()         { *m = QueryAllStreamsForReceiverRequest{} }
func (m *QueryAllStreamsForReceiverRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStreamsForReceiverRequest) ProtoMessage()    {}
func (*QueryAllStreamsForReceiverRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e41f208b821ea45d, []int{6}
}
func (m *QueryAllStreamsForReceiverRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStreamsForReceiverRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStreamsForReceiverRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStreamsForReceiverRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStreamsForReceiverRequest.Merge(m, src)
}
func (m *QueryAllStreamsForReceiverRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStreamsForReceiverRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStreamsForReceiverRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStreamsForReceiverRequest proto.InternalMessageInfo

func (m *QueryAllStreamsForReceiverRequest) GetReceiverAddr() string {
	if m != nil {
		return m.ReceiverAddr
	}
	return ""
}

func (m *QueryAllStreamsForReceiverRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllStreamsForReceiverResponse is the response type for the Query/AllStreamsForReceiver RPC method
type QueryAllStreamsForReceiverResponse struct {
	// receiver_addr is the receiver wallet address being queried
	ReceiverAddr string `protobuf:"bytes,1,opt,name=receiver_addr,json=receiverAddr,proto3" json:"receiver_addr,omitempty"`
	// streams is the list of all streams
	Streams []Stream `protobuf:"bytes,2,rep,name=streams,proto3" json:"streams"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStreamsForReceiverResponse) Reset()         { *m = QueryAllStreamsForReceiverResponse{} }
func (m *QueryAllStreamsForReceiverResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStreamsForReceiverResponse) ProtoMessage()    {}
func (*QueryAllStreamsForReceiverResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e41f208b821ea45d, []int{7}
}
func (m *QueryAllStreamsForReceiverResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStreamsForReceiverResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStreamsForReceiverResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStreamsForReceiverResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStreamsForReceiverResponse.Merge(m, src)
}
func (m *QueryAllStreamsForReceiverResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStreamsForReceiverResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStreamsForReceiverResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStreamsForReceiverResponse proto.InternalMessageInfo

func (m *QueryAllStreamsForReceiverResponse) GetReceiverAddr() string {
	if m != nil {
		return m.ReceiverAddr
	}
	return ""
}

func (m *QueryAllStreamsForReceiverResponse) GetStreams() []Stream {
	if m != nil {
		return m.Streams
	}
	return nil
}

func (m *QueryAllStreamsForReceiverResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryStreamByReceiverSenderRequest is the request type for the Query/StreamByReceiverSender RPC method
type QueryStreamByReceiverSenderRequest struct {
	// receiver_addr is the receiver wallet address being queried
	ReceiverAddr string `protobuf:"bytes,1,opt,name=receiver_addr,json=receiverAddr,proto3" json:"receiver_addr,omitempty"`
	// sender_addr is the sender wallet address being queried
	SenderAddr string `protobuf:"bytes,2,opt,name=sender_addr,json=senderAddr,proto3" json:"sender_addr,omitempty"`
}

func (m *QueryStreamByReceiverSenderRequest) Reset()         { *m = QueryStreamByReceiverSenderRequest{} }
func (m *QueryStreamByReceiverSenderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStreamByReceiverSenderRequest) ProtoMessage()    {}
func (*QueryStreamByReceiverSenderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e41f208b821ea45d, []int{8}
}
func (m *QueryStreamByReceiverSenderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStreamByReceiverSenderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStreamByReceiverSenderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStreamByReceiverSenderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStreamByReceiverSenderRequest.Merge(m, src)
}
func (m *QueryStreamByReceiverSenderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStreamByReceiverSenderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStreamByReceiverSenderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStreamByReceiverSenderRequest proto.InternalMessageInfo

func (m *QueryStreamByReceiverSenderRequest) GetReceiverAddr() string {
	if m != nil {
		return m.ReceiverAddr
	}
	return ""
}

func (m *QueryStreamByReceiverSenderRequest) GetSenderAddr() string {
	if m != nil {
		return m.SenderAddr
	}
	return ""
}

// QueryStreamByReceiverSenderResponse is the response type for the Query/StreamByReceiverSender RPC method
type QueryStreamByReceiverSenderResponse struct {
	// stream is the Stream
	Stream Stream `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream"`
}

func (m *QueryStreamByReceiverSenderResponse) Reset()         { *m = QueryStreamByReceiverSenderResponse{} }
func (m *QueryStreamByReceiverSenderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStreamByReceiverSenderResponse) ProtoMessage()    {}
func (*QueryStreamByReceiverSenderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e41f208b821ea45d, []int{9}
}
func (m *QueryStreamByReceiverSenderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStreamByReceiverSenderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStreamByReceiverSenderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStreamByReceiverSenderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStreamByReceiverSenderResponse.Merge(m, src)
}
func (m *QueryStreamByReceiverSenderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStreamByReceiverSenderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStreamByReceiverSenderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStreamByReceiverSenderResponse proto.InternalMessageInfo

func (m *QueryStreamByReceiverSenderResponse) GetStream() Stream {
	if m != nil {
		return m.Stream
	}
	return Stream{}
}

// QueryStreamReceiverSenderCurrentFlowRequest is the request type for the Query/StreamReceiverSenderCurrentFlow RPC method
type QueryStreamReceiverSenderCurrentFlowRequest struct {
	// receiver_addr is the receiver wallet address being queried
	ReceiverAddr string `protobuf:"bytes,1,opt,name=receiver_addr,json=receiverAddr,proto3" json:"receiver_addr,omitempty"`
	// sender_addr is the sender wallet address being queried
	SenderAddr string `protobuf:"bytes,2,opt,name=sender_addr,json=senderAddr,proto3" json:"sender_addr,omitempty"`
}

func (m *QueryStreamReceiverSenderCurrentFlowRequest) Reset() {
	*m = QueryStreamReceiverSenderCurrentFlowRequest{}
}
func (m *QueryStreamReceiverSenderCurrentFlowRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryStreamReceiverSenderCurrentFlowRequest) ProtoMessage() {}
func (*QueryStreamReceiverSenderCurrentFlowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e41f208b821ea45d, []int{10}
}
func (m *QueryStreamReceiverSenderCurrentFlowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStreamReceiverSenderCurrentFlowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStreamReceiverSenderCurrentFlowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStreamReceiverSenderCurrentFlowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStreamReceiverSenderCurrentFlowRequest.Merge(m, src)
}
func (m *QueryStreamReceiverSenderCurrentFlowRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStreamReceiverSenderCurrentFlowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStreamReceiverSenderCurrentFlowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStreamReceiverSenderCurrentFlowRequest proto.InternalMessageInfo

func (m *QueryStreamReceiverSenderCurrentFlowRequest) GetReceiverAddr() string {
	if m != nil {
		return m.ReceiverAddr
	}
	return ""
}

func (m *QueryStreamReceiverSenderCurrentFlowRequest) GetSenderAddr() string {
	if m != nil {
		return m.SenderAddr
	}
	return ""
}

// QueryStreamReceiverSenderCurrentFlowResponse is the response type for the Query/StreamReceiverSenderCurrentFlow RPC method
type QueryStreamReceiverSenderCurrentFlowResponse struct {
	// configured_flow_rate is the flow rate configured in the stream
	ConfiguredFlowRate int64 `protobuf:"varint,1,opt,name=configured_flow_rate,json=configuredFlowRate,proto3" json:"configured_flow_rate,omitempty"`
	// current_flow_rate is the actual flow rate. This will be zero if the depositZeroTime has passed, or deposit is zero
	CurrentFlowRate int64 `protobuf:"varint,2,opt,name=current_flow_rate,json=currentFlowRate,proto3" json:"current_flow_rate,omitempty"`
}

func (m *QueryStreamReceiverSenderCurrentFlowResponse) Reset() {
	*m = QueryStreamReceiverSenderCurrentFlowResponse{}
}
func (m *QueryStreamReceiverSenderCurrentFlowResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryStreamReceiverSenderCurrentFlowResponse) ProtoMessage() {}
func (*QueryStreamReceiverSenderCurrentFlowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e41f208b821ea45d, []int{11}
}
func (m *QueryStreamReceiverSenderCurrentFlowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStreamReceiverSenderCurrentFlowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStreamReceiverSenderCurrentFlowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStreamReceiverSenderCurrentFlowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStreamReceiverSenderCurrentFlowResponse.Merge(m, src)
}
func (m *QueryStreamReceiverSenderCurrentFlowResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStreamReceiverSenderCurrentFlowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStreamReceiverSenderCurrentFlowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStreamReceiverSenderCurrentFlowResponse proto.InternalMessageInfo

func (m *QueryStreamReceiverSenderCurrentFlowResponse) GetConfiguredFlowRate() int64 {
	if m != nil {
		return m.ConfiguredFlowRate
	}
	return 0
}

func (m *QueryStreamReceiverSenderCurrentFlowResponse) GetCurrentFlowRate() int64 {
	if m != nil {
		return m.CurrentFlowRate
	}
	return 0
}

// QueryAllStreamsForSenderRequest is the request type for the Query/AllStreamsForSender RPC method
type QueryAllStreamsForSenderRequest struct {
	// sender_addr is the receiver wallet address being queried
	SenderAddr string `protobuf:"bytes,1,opt,name=sender_addr,json=senderAddr,proto3" json:"sender_addr,omitempty"`
	// pagination is the pagination parameters for the request
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStreamsForSenderRequest) Reset()         { *m = QueryAllStreamsForSenderRequest{} }
func (m *QueryAllStreamsForSenderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStreamsForSenderRequest) ProtoMessage()    {}
func (*QueryAllStreamsForSenderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e41f208b821ea45d, []int{12}
}
func (m *QueryAllStreamsForSenderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStreamsForSenderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStreamsForSenderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStreamsForSenderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStreamsForSenderRequest.Merge(m, src)
}
func (m *QueryAllStreamsForSenderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStreamsForSenderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStreamsForSenderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStreamsForSenderRequest proto.InternalMessageInfo

func (m *QueryAllStreamsForSenderRequest) GetSenderAddr() string {
	if m != nil {
		return m.SenderAddr
	}
	return ""
}

func (m *QueryAllStreamsForSenderRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllStreamsForSenderResponse is the response type for the Query/AllStreamsForSender RPC method
type QueryAllStreamsForSenderResponse struct {
	// sender_addr is the receiver wallet address being queried
	SenderAddr string `protobuf:"bytes,1,opt,name=sender_addr,json=senderAddr,proto3" json:"sender_addr,omitempty"`
	// streams is the list of all streams
	Streams []Stream `protobuf:"bytes,2,rep,name=streams,proto3" json:"streams"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStreamsForSenderResponse) Reset()         { *m = QueryAllStreamsForSenderResponse{} }
func (m *QueryAllStreamsForSenderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStreamsForSenderResponse) ProtoMessage()    {}
func (*QueryAllStreamsForSenderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e41f208b821ea45d, []int{13}
}
func (m *QueryAllStreamsForSenderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStreamsForSenderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStreamsForSenderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStreamsForSenderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStreamsForSenderResponse.Merge(m, src)
}
func (m *QueryAllStreamsForSenderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStreamsForSenderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStreamsForSenderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStreamsForSenderResponse proto.InternalMessageInfo

func (m *QueryAllStreamsForSenderResponse) GetSenderAddr() string {
	if m != nil {
		return m.SenderAddr
	}
	return ""
}

func (m *QueryAllStreamsForSenderResponse) GetStreams() []Stream {
	if m != nil {
		return m.Streams
	}
	return nil
}

func (m *QueryAllStreamsForSenderResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "mainchain.stream.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "mainchain.stream.v1.QueryParamsResponse")
	proto.RegisterType((*QueryCalculateFlowRateRequest)(nil), "mainchain.stream.v1.QueryCalculateFlowRateRequest")
	proto.RegisterType((*QueryCalculateFlowRateResponse)(nil), "mainchain.stream.v1.QueryCalculateFlowRateResponse")
	proto.RegisterType((*QueryStreamsRequest)(nil), "mainchain.stream.v1.QueryStreamsRequest")
	proto.RegisterType((*QueryStreamsResponse)(nil), "mainchain.stream.v1.QueryStreamsResponse")
	proto.RegisterType((*QueryAllStreamsForReceiverRequest)(nil), "mainchain.stream.v1.QueryAllStreamsForReceiverRequest")
	proto.RegisterType((*QueryAllStreamsForReceiverResponse)(nil), "mainchain.stream.v1.QueryAllStreamsForReceiverResponse")
	proto.RegisterType((*QueryStreamByReceiverSenderRequest)(nil), "mainchain.stream.v1.QueryStreamByReceiverSenderRequest")
	proto.RegisterType((*QueryStreamByReceiverSenderResponse)(nil), "mainchain.stream.v1.QueryStreamByReceiverSenderResponse")
	proto.RegisterType((*QueryStreamReceiverSenderCurrentFlowRequest)(nil), "mainchain.stream.v1.QueryStreamReceiverSenderCurrentFlowRequest")
	proto.RegisterType((*QueryStreamReceiverSenderCurrentFlowResponse)(nil), "mainchain.stream.v1.QueryStreamReceiverSenderCurrentFlowResponse")
	proto.RegisterType((*QueryAllStreamsForSenderRequest)(nil), "mainchain.stream.v1.QueryAllStreamsForSenderRequest")
	proto.RegisterType((*QueryAllStreamsForSenderResponse)(nil), "mainchain.stream.v1.QueryAllStreamsForSenderResponse")
}

func init() { proto.RegisterFile("mainchain/stream/v1/query.proto", fileDescriptor_e41f208b821ea45d) }

var fileDescriptor_e41f208b821ea45d = []byte{
	// 1031 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0x38, 0x69, 0x7e, 0xbc, 0xf0, 0x43, 0x99, 0x18, 0xe4, 0x6e, 0xa8, 0xed, 0x6e, 0x25,
	0x6a, 0x02, 0xdd, 0xa9, 0x6d, 0x4a, 0x08, 0xa8, 0x88, 0x24, 0x22, 0x1c, 0x10, 0x92, 0xd9, 0x5c,
	0x10, 0x12, 0x8a, 0x26, 0xbb, 0x93, 0xed, 0x4a, 0xeb, 0x1d, 0x77, 0x77, 0x9d, 0x12, 0x55, 0x95,
	0x2a, 0x4e, 0x3d, 0x70, 0x40, 0x82, 0x23, 0x42, 0x3d, 0x20, 0x81, 0x38, 0x54, 0x1c, 0xb8, 0x72,
	0xa6, 0xc7, 0x0a, 0x2e, 0x3d, 0x21, 0x14, 0x23, 0x01, 0xff, 0x05, 0xda, 0x99, 0xd9, 0x64, 0xb7,
	0xf1, 0xda, 0x89, 0x13, 0x04, 0x17, 0x6b, 0x67, 0xf6, 0x7d, 0xef, 0x7d, 0xdf, 0x7b, 0x6f, 0xdf,
	0x8c, 0xa1, 0xda, 0xa1, 0xae, 0x6f, 0xdd, 0xa0, 0xae, 0x4f, 0xc2, 0x28, 0x60, 0xb4, 0x43, 0x76,
	0x1b, 0xe4, 0x66, 0x8f, 0x05, 0x7b, 0x46, 0x37, 0xe0, 0x11, 0xc7, 0x0b, 0x07, 0x06, 0x86, 0x34,
	0x30, 0x76, 0x1b, 0x5a, 0xc5, 0xe2, 0x61, 0x87, 0x87, 0x64, 0x9b, 0x86, 0x8c, 0xec, 0x36, 0xb6,
	0x59, 0x44, 0x1b, 0xc4, 0xe2, 0xae, 0x2f, 0x41, 0xda, 0x52, 0xfa, 0xbd, 0xf0, 0x76, 0x60, 0xd5,
	0xa5, 0x8e, 0xeb, 0xd3, 0xc8, 0xe5, 0x89, 0xed, 0x79, 0x69, 0xbb, 0x25, 0x56, 0x44, 0x2e, 0xd4,
	0xab, 0x92, 0xc3, 0x1d, 0x2e, 0xf7, 0xe3, 0x27, 0xb5, 0xfb, 0x82, 0xc3, 0xb9, 0xe3, 0x31, 0x42,
	0xbb, 0x2e, 0xa1, 0xbe, 0xcf, 0x23, 0xe1, 0x2d, 0xc1, 0xcc, 0xd3, 0x8e, 0xeb, 0x73, 0x22, 0x7e,
	0xd5, 0x56, 0x6d, 0x90, 0xc6, 0x2e, 0x0d, 0x68, 0x27, 0x1c, 0x66, 0xa1, 0xe4, 0x0a, 0x0b, 0xbd,
	0x04, 0xf8, 0x83, 0x58, 0x47, 0x5b, 0xc0, 0x4c, 0x76, 0xb3, 0xc7, 0xc2, 0x48, 0x6f, 0xc3, 0x42,
	0x66, 0x37, 0xec, 0x72, 0x3f, 0x64, 0x78, 0x05, 0xa6, 0xa4, 0xfb, 0x32, 0xaa, 0xa1, 0xfa, 0x5c,
	0x73, 0xd1, 0x18, 0x90, 0x44, 0x43, 0x82, 0xd6, 0x26, 0x1f, 0xfe, 0x56, 0x2d, 0x98, 0x0a, 0xa0,
	0x7f, 0x89, 0xe0, 0x82, 0x70, 0xb9, 0x4e, 0x3d, 0xab, 0xe7, 0xd1, 0x88, 0x6d, 0x78, 0xfc, 0x96,
	0x49, 0x23, 0xa6, 0x62, 0x62, 0x0c, 0x93, 0x71, 0xa6, 0x85, 0xeb, 0x59, 0x53, 0x3c, 0x8b, 0x80,
	0x2c, 0x70, 0xb9, 0x5d, 0x2e, 0xd6, 0x50, 0xfd, 0x99, 0xe6, 0xc5, 0x81, 0x01, 0x37, 0xc5, 0x53,
	0x5b, 0x18, 0x9a, 0x0a, 0x80, 0x35, 0x98, 0xb1, 0x7b, 0x81, 0x48, 0x61, 0x79, 0xa2, 0x86, 0xea,
	0x93, 0xe6, 0xc1, 0xfa, 0x8d, 0x99, 0x7b, 0xf7, 0xab, 0x85, 0xbf, 0xee, 0x57, 0x0b, 0x7a, 0x1f,
	0x41, 0x25, 0x8f, 0x96, 0x12, 0xdd, 0x4a, 0xf1, 0x9a, 0x6b, 0x9e, 0x37, 0x54, 0x25, 0xe3, 0x16,
	0x30, 0x54, 0xf1, 0x8d, 0x75, 0xee, 0xfa, 0x4a, 0xf0, 0xbf, 0x49, 0x1c, 0x97, 0x61, 0x3a, 0x64,
	0x16, 0xf7, 0xed, 0xb0, 0x3c, 0x29, 0x5e, 0x25, 0x4b, 0xbc, 0x08, 0xb3, 0x3b, 0x1e, 0xbf, 0xb5,
	0x15, 0xd0, 0x88, 0x95, 0xcf, 0xd5, 0x50, 0x7d, 0xc2, 0x9c, 0xd9, 0x51, 0x52, 0xf4, 0x8f, 0x55,
	0x39, 0x65, 0xbc, 0xa4, 0xca, 0x78, 0x03, 0xe0, 0xb0, 0x6b, 0x95, 0xbe, 0x17, 0x33, 0xfa, 0xe4,
	0x07, 0x93, 0xa8, 0x6c, 0x53, 0x27, 0xa9, 0x96, 0x99, 0x42, 0xea, 0x5f, 0x21, 0x28, 0x65, 0xfd,
	0xab, 0xd4, 0xbd, 0x09, 0xd3, 0x52, 0x6c, 0xdc, 0x30, 0x13, 0xb9, 0x0d, 0x23, 0x61, 0x2a, 0x7f,
	0x09, 0x02, 0xbf, 0x9b, 0x61, 0x57, 0x14, 0xec, 0x2e, 0x8f, 0x64, 0x27, 0x23, 0x67, 0xe8, 0x7d,
	0x8f, 0xe0, 0xa2, 0xa0, 0xb7, 0xea, 0x79, 0x8a, 0xe1, 0x06, 0x0f, 0x4c, 0x66, 0x31, 0x77, 0x97,
	0x05, 0x49, 0x32, 0xae, 0xc3, 0xd3, 0x81, 0xda, 0xda, 0xa2, 0xb6, 0x1d, 0xc8, 0x3e, 0x5c, 0x2b,
	0xff, 0xf2, 0xe3, 0x95, 0x92, 0x0a, 0xba, 0x6a, 0xdb, 0x01, 0x0b, 0xc3, 0xcd, 0x28, 0x70, 0x7d,
	0xc7, 0x7c, 0x2a, 0x31, 0x8f, 0xb7, 0x9f, 0xc8, 0x65, 0x71, 0xec, 0x5c, 0xfe, 0x8d, 0x40, 0x1f,
	0x46, 0x56, 0x65, 0xf6, 0x94, 0x6c, 0x53, 0x85, 0x29, 0x9e, 0xb2, 0x30, 0x13, 0xe3, 0x17, 0xe6,
	0xeb, 0x44, 0xab, 0x8a, 0xb3, 0x97, 0xc8, 0xdc, 0x64, 0xbe, 0x7d, 0x66, 0x95, 0x59, 0x81, 0xb9,
	0x50, 0xf8, 0x93, 0xe0, 0xe2, 0x08, 0x30, 0x48, 0xe3, 0x78, 0x53, 0x67, 0x70, 0x69, 0x28, 0x3f,
	0x55, 0x8c, 0xb7, 0x60, 0x4a, 0xe6, 0x66, 0xe8, 0x58, 0x54, 0x4e, 0x66, 0xe3, 0x64, 0x7e, 0xf7,
	0xe7, 0x0f, 0x4b, 0xc8, 0x54, 0x28, 0xfd, 0x5b, 0x04, 0x2f, 0xa7, 0xe2, 0x64, 0xa3, 0xac, 0xf7,
	0x82, 0x80, 0xf9, 0x91, 0x18, 0x4b, 0xff, 0x79, 0x42, 0x3e, 0x43, 0xf0, 0xca, 0xf1, 0x98, 0xaa,
	0xd4, 0x5c, 0x85, 0x92, 0xc5, 0xfd, 0x1d, 0xd7, 0xe9, 0x05, 0xcc, 0xde, 0x3a, 0x9c, 0x50, 0x48,
	0x4c, 0x28, 0x7c, 0xf8, 0x2e, 0x19, 0xbb, 0x78, 0x09, 0xe6, 0x2d, 0xe9, 0x28, 0x65, 0x5e, 0x14,
	0xe6, 0xcf, 0x5a, 0xa9, 0x08, 0xf1, 0x5c, 0xfb, 0x06, 0x41, 0xf5, 0xe8, 0xc7, 0x92, 0xed, 0x9e,
	0x27, 0xd4, 0xa2, 0xe3, 0xab, 0x3d, 0xb3, 0x6f, 0xba, 0x8f, 0xa0, 0x96, 0x4f, 0xf3, 0xe0, 0x6c,
	0x1d, 0x9b, 0xe7, 0xff, 0xe2, 0x6b, 0x6e, 0x3e, 0x00, 0x38, 0x27, 0x54, 0xe2, 0xbb, 0x08, 0xa6,
	0xe4, 0x25, 0x00, 0x5f, 0x1e, 0xc8, 0xe4, 0xe8, 0x8d, 0x43, 0xab, 0x8f, 0x36, 0x94, 0x31, 0xf5,
	0x4b, 0x9f, 0xfe, 0xfa, 0xc7, 0x17, 0xc5, 0x0b, 0x78, 0x91, 0xe4, 0x5f, 0x7f, 0xf0, 0x03, 0x04,
	0xf3, 0x47, 0x8e, 0x74, 0xdc, 0xcc, 0x0f, 0x92, 0x77, 0x2d, 0xd1, 0x5a, 0x27, 0xc2, 0x28, 0x8e,
	0x57, 0x05, 0xc7, 0x25, 0x5c, 0x1f, 0xc8, 0xd1, 0x4a, 0x70, 0xb2, 0xc3, 0x05, 0xb5, 0x7b, 0x08,
	0xa6, 0x55, 0x6f, 0xe0, 0x21, 0xb9, 0xc8, 0x9e, 0xe0, 0xda, 0x4b, 0xc7, 0xb0, 0x54, 0x94, 0xea,
	0x82, 0x92, 0x8e, 0x6b, 0x24, 0xff, 0x4e, 0x18, 0x12, 0xea, 0x79, 0xf8, 0x67, 0x04, 0xcf, 0x0d,
	0x3c, 0x7d, 0xf0, 0x6b, 0xf9, 0xe1, 0x86, 0x9d, 0xad, 0xda, 0xf2, 0x89, 0x71, 0x8a, 0xf4, 0x75,
	0x41, 0x7a, 0x19, 0x5f, 0x1b, 0x4a, 0x3a, 0x99, 0x6e, 0xe4, 0x76, 0x66, 0x2c, 0xde, 0xc1, 0x8f,
	0x11, 0x3c, 0x3f, 0x78, 0x76, 0xe3, 0xe5, 0x51, 0x99, 0xcb, 0x39, 0x8d, 0xb4, 0xd7, 0x4f, 0x0e,
	0x54, 0x62, 0xde, 0x13, 0x62, 0xde, 0xc1, 0xeb, 0x63, 0x89, 0x21, 0xb7, 0x53, 0xe3, 0xe1, 0x0e,
	0xbe, 0x5b, 0x84, 0xea, 0x88, 0x21, 0x8c, 0xdf, 0x1e, 0x45, 0x75, 0xd4, 0x49, 0xa3, 0xad, 0x9e,
	0xc2, 0x83, 0x52, 0xfd, 0xa1, 0x50, 0x6d, 0xe2, 0xf6, 0x19, 0xa8, 0x26, 0xe9, 0x93, 0x01, 0xff,
	0x84, 0x60, 0x61, 0xc0, 0x44, 0xc5, 0xaf, 0x1e, 0xb3, 0xdb, 0xb2, 0x75, 0xbd, 0x76, 0x42, 0x94,
	0x92, 0xb7, 0x22, 0xe4, 0xb5, 0x70, 0x63, 0xa8, 0x3c, 0x29, 0x22, 0x2b, 0x66, 0xed, 0xfd, 0x87,
	0xfb, 0x15, 0xf4, 0x68, 0xbf, 0x82, 0x7e, 0xdf, 0xaf, 0xa0, 0xcf, 0xfb, 0x95, 0xc2, 0xa3, 0x7e,
	0xa5, 0xf0, 0xb8, 0x5f, 0x29, 0x7c, 0xd4, 0x72, 0xdc, 0xe8, 0x46, 0x6f, 0xdb, 0xb0, 0x78, 0x87,
	0xf4, 0x7c, 0x77, 0xc7, 0xb5, 0xc4, 0x88, 0xbd, 0x12, 0xaf, 0x0f, 0xc3, 0x7c, 0x92, 0x04, 0x8a,
	0xf6, 0xba, 0x2c, 0xdc, 0x9e, 0x12, 0x7f, 0xe8, 0x5a, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x3e,
	0x24, 0x8d, 0x9b, 0xfa, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// CalculateFlowRate can be used to calculate a flow rate (coins per second) to be used when creating/updating a stream
	CalculateFlowRate(ctx context.Context, in *QueryCalculateFlowRateRequest, opts ...grpc.CallOption) (*QueryCalculateFlowRateResponse, error)
	// Streams queries all Streams.
	Streams(ctx context.Context, in *QueryStreamsRequest, opts ...grpc.CallOption) (*QueryStreamsResponse, error)
	// AllStreamsForReceiver queries all Streams for a given receiver address
	AllStreamsForReceiver(ctx context.Context, in *QueryAllStreamsForReceiverRequest, opts ...grpc.CallOption) (*QueryAllStreamsForReceiverResponse, error)
	// StreamByReceiverSender queries a stream for a given receiver and sender pair
	StreamByReceiverSender(ctx context.Context, in *QueryStreamByReceiverSenderRequest, opts ...grpc.CallOption) (*QueryStreamByReceiverSenderResponse, error)
	// StreamReceiverSenderCurrentFlow queries a stream by the given receiver/sender pair and returns the current flow data
	StreamReceiverSenderCurrentFlow(ctx context.Context, in *QueryStreamReceiverSenderCurrentFlowRequest, opts ...grpc.CallOption) (*QueryStreamReceiverSenderCurrentFlowResponse, error)
	// AllStreamsForSender queries all Streams for a given sender address
	AllStreamsForSender(ctx context.Context, in *QueryAllStreamsForSenderRequest, opts ...grpc.CallOption) (*QueryAllStreamsForSenderResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/mainchain.stream.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CalculateFlowRate(ctx context.Context, in *QueryCalculateFlowRateRequest, opts ...grpc.CallOption) (*QueryCalculateFlowRateResponse, error) {
	out := new(QueryCalculateFlowRateResponse)
	err := c.cc.Invoke(ctx, "/mainchain.stream.v1.Query/CalculateFlowRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Streams(ctx context.Context, in *QueryStreamsRequest, opts ...grpc.CallOption) (*QueryStreamsResponse, error) {
	out := new(QueryStreamsResponse)
	err := c.cc.Invoke(ctx, "/mainchain.stream.v1.Query/Streams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllStreamsForReceiver(ctx context.Context, in *QueryAllStreamsForReceiverRequest, opts ...grpc.CallOption) (*QueryAllStreamsForReceiverResponse, error) {
	out := new(QueryAllStreamsForReceiverResponse)
	err := c.cc.Invoke(ctx, "/mainchain.stream.v1.Query/AllStreamsForReceiver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StreamByReceiverSender(ctx context.Context, in *QueryStreamByReceiverSenderRequest, opts ...grpc.CallOption) (*QueryStreamByReceiverSenderResponse, error) {
	out := new(QueryStreamByReceiverSenderResponse)
	err := c.cc.Invoke(ctx, "/mainchain.stream.v1.Query/StreamByReceiverSender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StreamReceiverSenderCurrentFlow(ctx context.Context, in *QueryStreamReceiverSenderCurrentFlowRequest, opts ...grpc.CallOption) (*QueryStreamReceiverSenderCurrentFlowResponse, error) {
	out := new(QueryStreamReceiverSenderCurrentFlowResponse)
	err := c.cc.Invoke(ctx, "/mainchain.stream.v1.Query/StreamReceiverSenderCurrentFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllStreamsForSender(ctx context.Context, in *QueryAllStreamsForSenderRequest, opts ...grpc.CallOption) (*QueryAllStreamsForSenderResponse, error) {
	out := new(QueryAllStreamsForSenderResponse)
	err := c.cc.Invoke(ctx, "/mainchain.stream.v1.Query/AllStreamsForSender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// CalculateFlowRate can be used to calculate a flow rate (coins per second) to be used when creating/updating a stream
	CalculateFlowRate(context.Context, *QueryCalculateFlowRateRequest) (*QueryCalculateFlowRateResponse, error)
	// Streams queries all Streams.
	Streams(context.Context, *QueryStreamsRequest) (*QueryStreamsResponse, error)
	// AllStreamsForReceiver queries all Streams for a given receiver address
	AllStreamsForReceiver(context.Context, *QueryAllStreamsForReceiverRequest) (*QueryAllStreamsForReceiverResponse, error)
	// StreamByReceiverSender queries a stream for a given receiver and sender pair
	StreamByReceiverSender(context.Context, *QueryStreamByReceiverSenderRequest) (*QueryStreamByReceiverSenderResponse, error)
	// StreamReceiverSenderCurrentFlow queries a stream by the given receiver/sender pair and returns the current flow data
	StreamReceiverSenderCurrentFlow(context.Context, *QueryStreamReceiverSenderCurrentFlowRequest) (*QueryStreamReceiverSenderCurrentFlowResponse, error)
	// AllStreamsForSender queries all Streams for a given sender address
	AllStreamsForSender(context.Context, *QueryAllStreamsForSenderRequest) (*QueryAllStreamsForSenderResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) CalculateFlowRate(ctx context.Context, req *QueryCalculateFlowRateRequest) (*QueryCalculateFlowRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateFlowRate not implemented")
}
func (*UnimplementedQueryServer) Streams(ctx context.Context, req *QueryStreamsRequest) (*QueryStreamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Streams not implemented")
}
func (*UnimplementedQueryServer) AllStreamsForReceiver(ctx context.Context, req *QueryAllStreamsForReceiverRequest) (*QueryAllStreamsForReceiverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllStreamsForReceiver not implemented")
}
func (*UnimplementedQueryServer) StreamByReceiverSender(ctx context.Context, req *QueryStreamByReceiverSenderRequest) (*QueryStreamByReceiverSenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamByReceiverSender not implemented")
}
func (*UnimplementedQueryServer) StreamReceiverSenderCurrentFlow(ctx context.Context, req *QueryStreamReceiverSenderCurrentFlowRequest) (*QueryStreamReceiverSenderCurrentFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamReceiverSenderCurrentFlow not implemented")
}
func (*UnimplementedQueryServer) AllStreamsForSender(ctx context.Context, req *QueryAllStreamsForSenderRequest) (*QueryAllStreamsForSenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllStreamsForSender not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.stream.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CalculateFlowRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCalculateFlowRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CalculateFlowRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.stream.v1.Query/CalculateFlowRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CalculateFlowRate(ctx, req.(*QueryCalculateFlowRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Streams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStreamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Streams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.stream.v1.Query/Streams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Streams(ctx, req.(*QueryStreamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllStreamsForReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStreamsForReceiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllStreamsForReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.stream.v1.Query/AllStreamsForReceiver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllStreamsForReceiver(ctx, req.(*QueryAllStreamsForReceiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StreamByReceiverSender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStreamByReceiverSenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StreamByReceiverSender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.stream.v1.Query/StreamByReceiverSender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StreamByReceiverSender(ctx, req.(*QueryStreamByReceiverSenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StreamReceiverSenderCurrentFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStreamReceiverSenderCurrentFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StreamReceiverSenderCurrentFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.stream.v1.Query/StreamReceiverSenderCurrentFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StreamReceiverSenderCurrentFlow(ctx, req.(*QueryStreamReceiverSenderCurrentFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllStreamsForSender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStreamsForSenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllStreamsForSender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.stream.v1.Query/AllStreamsForSender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllStreamsForSender(ctx, req.(*QueryAllStreamsForSenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mainchain.stream.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "CalculateFlowRate",
			Handler:    _Query_CalculateFlowRate_Handler,
		},
		{
			MethodName: "Streams",
			Handler:    _Query_Streams_Handler,
		},
		{
			MethodName: "AllStreamsForReceiver",
			Handler:    _Query_AllStreamsForReceiver_Handler,
		},
		{
			MethodName: "StreamByReceiverSender",
			Handler:    _Query_StreamByReceiverSender_Handler,
		},
		{
			MethodName: "StreamReceiverSenderCurrentFlow",
			Handler:    _Query_StreamReceiverSenderCurrentFlow_Handler,
		},
		{
			MethodName: "AllStreamsForSender",
			Handler:    _Query_AllStreamsForSender_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mainchain/stream/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCalculateFlowRateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCalculateFlowRateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCalculateFlowRateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x18
	}
	if m.Period != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Coin) > 0 {
		i -= len(m.Coin)
		copy(dAtA[i:], m.Coin)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Coin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCalculateFlowRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCalculateFlowRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCalculateFlowRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FlowRate != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FlowRate))
		i--
		dAtA[i] = 0x28
	}
	if m.Seconds != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Seconds))
		i--
		dAtA[i] = 0x20
	}
	if m.Duration != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x18
	}
	if m.Period != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryStreamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStreamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStreamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStreamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStreamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStreamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Streams) > 0 {
		for iNdEx := len(m.Streams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Streams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStreamsForReceiverRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStreamsForReceiverRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStreamsForReceiverRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReceiverAddr) > 0 {
		i -= len(m.ReceiverAddr)
		copy(dAtA[i:], m.ReceiverAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReceiverAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStreamsForReceiverResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStreamsForReceiverResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStreamsForReceiverResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Streams) > 0 {
		for iNdEx := len(m.Streams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Streams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ReceiverAddr) > 0 {
		i -= len(m.ReceiverAddr)
		copy(dAtA[i:], m.ReceiverAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReceiverAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStreamByReceiverSenderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStreamByReceiverSenderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStreamByReceiverSenderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SenderAddr) > 0 {
		i -= len(m.SenderAddr)
		copy(dAtA[i:], m.SenderAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SenderAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReceiverAddr) > 0 {
		i -= len(m.ReceiverAddr)
		copy(dAtA[i:], m.ReceiverAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReceiverAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStreamByReceiverSenderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStreamByReceiverSenderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStreamByReceiverSenderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Stream.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryStreamReceiverSenderCurrentFlowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStreamReceiverSenderCurrentFlowRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStreamReceiverSenderCurrentFlowRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SenderAddr) > 0 {
		i -= len(m.SenderAddr)
		copy(dAtA[i:], m.SenderAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SenderAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReceiverAddr) > 0 {
		i -= len(m.ReceiverAddr)
		copy(dAtA[i:], m.ReceiverAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ReceiverAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStreamReceiverSenderCurrentFlowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStreamReceiverSenderCurrentFlowResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStreamReceiverSenderCurrentFlowResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentFlowRate != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrentFlowRate))
		i--
		dAtA[i] = 0x10
	}
	if m.ConfiguredFlowRate != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ConfiguredFlowRate))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStreamsForSenderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStreamsForSenderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStreamsForSenderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SenderAddr) > 0 {
		i -= len(m.SenderAddr)
		copy(dAtA[i:], m.SenderAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SenderAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStreamsForSenderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStreamsForSenderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStreamsForSenderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Streams) > 0 {
		for iNdEx := len(m.Streams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Streams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SenderAddr) > 0 {
		i -= len(m.SenderAddr)
		copy(dAtA[i:], m.SenderAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SenderAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCalculateFlowRateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Coin)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Period != 0 {
		n += 1 + sovQuery(uint64(m.Period))
	}
	if m.Duration != 0 {
		n += 1 + sovQuery(uint64(m.Duration))
	}
	return n
}

func (m *QueryCalculateFlowRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Coin.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.Period != 0 {
		n += 1 + sovQuery(uint64(m.Period))
	}
	if m.Duration != 0 {
		n += 1 + sovQuery(uint64(m.Duration))
	}
	if m.Seconds != 0 {
		n += 1 + sovQuery(uint64(m.Seconds))
	}
	if m.FlowRate != 0 {
		n += 1 + sovQuery(uint64(m.FlowRate))
	}
	return n
}

func (m *QueryStreamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStreamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Streams) > 0 {
		for _, e := range m.Streams {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStreamsForReceiverRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReceiverAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStreamsForReceiverResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReceiverAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Streams) > 0 {
		for _, e := range m.Streams {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStreamByReceiverSenderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReceiverAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SenderAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStreamByReceiverSenderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Stream.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryStreamReceiverSenderCurrentFlowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReceiverAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SenderAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStreamReceiverSenderCurrentFlowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfiguredFlowRate != 0 {
		n += 1 + sovQuery(uint64(m.ConfiguredFlowRate))
	}
	if m.CurrentFlowRate != 0 {
		n += 1 + sovQuery(uint64(m.CurrentFlowRate))
	}
	return n
}

func (m *QueryAllStreamsForSenderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStreamsForSenderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SenderAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Streams) > 0 {
		for _, e := range m.Streams {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCalculateFlowRateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCalculateFlowRateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCalculateFlowRateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= StreamPeriod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCalculateFlowRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCalculateFlowRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCalculateFlowRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= StreamPeriod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seconds", wireType)
			}
			m.Seconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowRate", wireType)
			}
			m.FlowRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowRate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStreamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStreamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStreamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStreamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStreamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStreamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Streams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Streams = append(m.Streams, Stream{})
			if err := m.Streams[len(m.Streams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStreamsForReceiverRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStreamsForReceiverRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStreamsForReceiverRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStreamsForReceiverResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStreamsForReceiverResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStreamsForReceiverResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Streams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Streams = append(m.Streams, Stream{})
			if err := m.Streams[len(m.Streams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStreamByReceiverSenderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStreamByReceiverSenderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStreamByReceiverSenderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStreamByReceiverSenderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStreamByReceiverSenderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStreamByReceiverSenderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stream", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stream.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStreamReceiverSenderCurrentFlowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStreamReceiverSenderCurrentFlowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStreamReceiverSenderCurrentFlowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStreamReceiverSenderCurrentFlowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStreamReceiverSenderCurrentFlowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStreamReceiverSenderCurrentFlowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfiguredFlowRate", wireType)
			}
			m.ConfiguredFlowRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfiguredFlowRate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentFlowRate", wireType)
			}
			m.CurrentFlowRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentFlowRate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStreamsForSenderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStreamsForSenderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStreamsForSenderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStreamsForSenderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStreamsForSenderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStreamsForSenderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Streams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Streams = append(m.Streams, Stream{})
			if err := m.Streams[len(m.Streams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
