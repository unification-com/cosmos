// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mainchain/stream/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e41f208b821ea45d, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e41f208b821ea45d, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryCalculateFlowRateRequest is the request type for the Query/CalculateFlowRate RPC method
type QueryCalculateFlowRateRequest struct {
	// coin is the coin to be used in the calculation, e.g. 10000000000nund
	Coin string `protobuf:"bytes,1,opt,name=coin,proto3" json:"coin,omitempty"`
	// period is the enumerated value of a period to be used in the calculation, e.g. month = 6
	Period StreamPeriod `protobuf:"varint,2,opt,name=period,proto3,enum=mainchain.stream.v1.StreamPeriod" json:"period,omitempty"`
	// duration is the number of periods to be used in the calculation, e.g. 1 = 1 month
	Duration uint64 `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *QueryCalculateFlowRateRequest) Reset()         { *m = QueryCalculateFlowRateRequest{} }
func (m *QueryCalculateFlowRateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCalculateFlowRateRequest) ProtoMessage()    {}
func (*QueryCalculateFlowRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e41f208b821ea45d, []int{2}
}
func (m *QueryCalculateFlowRateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCalculateFlowRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCalculateFlowRateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCalculateFlowRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCalculateFlowRateRequest.Merge(m, src)
}
func (m *QueryCalculateFlowRateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCalculateFlowRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCalculateFlowRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCalculateFlowRateRequest proto.InternalMessageInfo

// QueryCalculateFlowRateResponse is the response type for the Query/CalculateFlowRate RPC method
type QueryCalculateFlowRateResponse struct {
	// coin is the coin used in the calculation
	Coin types.Coin `protobuf:"bytes,1,opt,name=coin,proto3" json:"coin"`
	// period is the enumerated value of a period used in the calculation, e.g. month = 6
	Period StreamPeriod `protobuf:"varint,2,opt,name=period,proto3,enum=mainchain.stream.v1.StreamPeriod" json:"period,omitempty"`
	// duration is the number of periods used in the calculation, e.g. 1 = 1 month
	Duration uint64 `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	// seconds is the calculated number of seconds for the stream (period * duration)
	Seconds uint64 `protobuf:"varint,4,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// flow_rate is the calculated rate of coins per second, in the lowest denomination - e.g. nund
	FlowRate int64 `protobuf:"varint,5,opt,name=flow_rate,json=flowRate,proto3" json:"flow_rate,omitempty"`
}

func (m *QueryCalculateFlowRateResponse) Reset()         { *m = QueryCalculateFlowRateResponse{} }
func (m *QueryCalculateFlowRateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCalculateFlowRateResponse) ProtoMessage()    {}
func (*QueryCalculateFlowRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e41f208b821ea45d, []int{3}
}
func (m *QueryCalculateFlowRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCalculateFlowRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCalculateFlowRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCalculateFlowRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCalculateFlowRateResponse.Merge(m, src)
}
func (m *QueryCalculateFlowRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCalculateFlowRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCalculateFlowRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCalculateFlowRateResponse proto.InternalMessageInfo

func (m *QueryCalculateFlowRateResponse) GetCoin() types.Coin {
	if m != nil {
		return m.Coin
	}
	return types.Coin{}
}

func (m *QueryCalculateFlowRateResponse) GetPeriod() StreamPeriod {
	if m != nil {
		return m.Period
	}
	return StreamPeriodUnspecified
}

func (m *QueryCalculateFlowRateResponse) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *QueryCalculateFlowRateResponse) GetSeconds() uint64 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *QueryCalculateFlowRateResponse) GetFlowRate() int64 {
	if m != nil {
		return m.FlowRate
	}
	return 0
}

// QueryStreamsRequest is the request type for the Query/Streams RPC method
type QueryStreamsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryStreamsRequest) Reset()         { *m = QueryStreamsRequest{} }
func (m *QueryStreamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStreamsRequest) ProtoMessage()    {}
func (*QueryStreamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e41f208b821ea45d, []int{4}
}
func (m *QueryStreamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStreamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStreamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStreamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStreamsRequest.Merge(m, src)
}
func (m *QueryStreamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStreamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStreamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStreamsRequest proto.InternalMessageInfo

func (m *QueryStreamsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryStreamsResponse is the response type for the Query/Streams RPC method
type QueryStreamsResponse struct {
	// streams is the list of all streams
	Streams []Stream `protobuf:"bytes,1,rep,name=streams,proto3" json:"streams"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryStreamsResponse) Reset()         { *m = QueryStreamsResponse{} }
func (m *QueryStreamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStreamsResponse) ProtoMessage()    {}
func (*QueryStreamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e41f208b821ea45d, []int{5}
}
func (m *QueryStreamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStreamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStreamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStreamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStreamsResponse.Merge(m, src)
}
func (m *QueryStreamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStreamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStreamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStreamsResponse proto.InternalMessageInfo

func (m *QueryStreamsResponse) GetStreams() []Stream {
	if m != nil {
		return m.Streams
	}
	return nil
}

func (m *QueryStreamsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "mainchain.stream.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "mainchain.stream.v1.QueryParamsResponse")
	proto.RegisterType((*QueryCalculateFlowRateRequest)(nil), "mainchain.stream.v1.QueryCalculateFlowRateRequest")
	proto.RegisterType((*QueryCalculateFlowRateResponse)(nil), "mainchain.stream.v1.QueryCalculateFlowRateResponse")
	proto.RegisterType((*QueryStreamsRequest)(nil), "mainchain.stream.v1.QueryStreamsRequest")
	proto.RegisterType((*QueryStreamsResponse)(nil), "mainchain.stream.v1.QueryStreamsResponse")
}

func init() { proto.RegisterFile("mainchain/stream/v1/query.proto", fileDescriptor_e41f208b821ea45d) }

var fileDescriptor_e41f208b821ea45d = []byte{
	// 631 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x3f, 0x6f, 0xd3, 0x4e,
	0x18, 0xf6, 0x35, 0x69, 0x9b, 0x5e, 0xa5, 0x9f, 0xf4, 0xbb, 0x66, 0x70, 0x1d, 0xea, 0x18, 0x23,
	0x51, 0x53, 0x09, 0x1f, 0x49, 0x26, 0x60, 0x6b, 0xa5, 0x32, 0x21, 0x05, 0xb3, 0x21, 0xa1, 0xe8,
	0xe2, 0x5c, 0x5c, 0x4b, 0x8e, 0xcf, 0xf5, 0x9f, 0x94, 0x6e, 0x88, 0xa9, 0x23, 0x12, 0x8c, 0x0c,
	0xfd, 0x04, 0x7c, 0x0c, 0xd4, 0xb1, 0x12, 0x0b, 0x13, 0x42, 0x09, 0x03, 0x1f, 0x03, 0xf9, 0xee,
	0x9c, 0x26, 0x6a, 0xdc, 0xc2, 0xc0, 0xe6, 0xf7, 0xee, 0x79, 0xde, 0xf7, 0x79, 0xde, 0xf7, 0x3d,
	0xc3, 0xe6, 0x88, 0xf8, 0xa1, 0x7b, 0x44, 0xfc, 0x10, 0x27, 0x69, 0x4c, 0xc9, 0x08, 0x8f, 0x5b,
	0xf8, 0x38, 0xa3, 0xf1, 0xa9, 0x1d, 0xc5, 0x2c, 0x65, 0x68, 0x6b, 0x06, 0xb0, 0x05, 0xc0, 0x1e,
	0xb7, 0x34, 0xdd, 0x65, 0xc9, 0x88, 0x25, 0xb8, 0x4f, 0x12, 0x8a, 0xc7, 0xad, 0x3e, 0x4d, 0x49,
	0x0b, 0xbb, 0xcc, 0x0f, 0x05, 0x49, 0xdb, 0x9b, 0xbf, 0xe7, 0xd9, 0x66, 0xa8, 0x88, 0x78, 0x7e,
	0x48, 0x52, 0x9f, 0x15, 0xd8, 0x6d, 0x81, 0xed, 0xf1, 0x08, 0x8b, 0x40, 0x5e, 0xd5, 0x3d, 0xe6,
	0x31, 0x71, 0x9e, 0x7f, 0xc9, 0xd3, 0x3b, 0x1e, 0x63, 0x5e, 0x40, 0x31, 0x89, 0x7c, 0x4c, 0xc2,
	0x90, 0xa5, 0x3c, 0x5b, 0xc1, 0x31, 0x96, 0x19, 0x8a, 0x48, 0x4c, 0x46, 0x37, 0x22, 0xa4, 0x37,
	0x8e, 0x30, 0xeb, 0x10, 0xbd, 0xc8, 0x45, 0x77, 0x39, 0xcd, 0xa1, 0xc7, 0x19, 0x4d, 0x52, 0xb3,
	0x0b, 0xb7, 0x16, 0x4e, 0x93, 0x88, 0x85, 0x09, 0x45, 0x8f, 0xe1, 0x9a, 0x48, 0xaf, 0x02, 0x03,
	0x58, 0x9b, 0xed, 0x86, 0xbd, 0xa4, 0x63, 0xb6, 0x20, 0xed, 0x57, 0x2f, 0xbe, 0x37, 0x15, 0x47,
	0x12, 0xcc, 0x8f, 0x00, 0xee, 0xf0, 0x94, 0x07, 0x24, 0x70, 0xb3, 0x80, 0xa4, 0xf4, 0x30, 0x60,
	0x27, 0x0e, 0x49, 0xa9, 0xac, 0x89, 0x10, 0xac, 0xe6, 0x6d, 0xe5, 0xa9, 0x37, 0x1c, 0xfe, 0xcd,
	0x0b, 0xd2, 0xd8, 0x67, 0x03, 0x75, 0xc5, 0x00, 0xd6, 0x7f, 0xed, 0xbb, 0x4b, 0x0b, 0xbe, 0xe4,
	0x5f, 0x5d, 0x0e, 0x74, 0x24, 0x01, 0x69, 0xb0, 0x36, 0xc8, 0x62, 0xde, 0x2f, 0xb5, 0x62, 0x00,
	0xab, 0xea, 0xcc, 0xe2, 0x27, 0xb5, 0xb3, 0xf3, 0xa6, 0xf2, 0xeb, 0xbc, 0xa9, 0x98, 0x53, 0x00,
	0xf5, 0x32, 0x59, 0xd2, 0x74, 0x67, 0x4e, 0xd7, 0x66, 0x7b, 0xdb, 0x96, 0x63, 0xcb, 0xe7, 0x6d,
	0xcb, 0x49, 0xdb, 0x07, 0xcc, 0x0f, 0xa5, 0xe1, 0x7f, 0x29, 0x1c, 0xa9, 0x70, 0x3d, 0xa1, 0x2e,
	0x0b, 0x07, 0x89, 0x5a, 0xe5, 0x57, 0x45, 0x88, 0x1a, 0x70, 0x63, 0x18, 0xb0, 0x93, 0x5e, 0x4c,
	0x52, 0xaa, 0xae, 0x1a, 0xc0, 0xaa, 0x38, 0xb5, 0xa1, 0xb4, 0x62, 0xbe, 0x96, 0xe3, 0x14, 0xf5,
	0x8a, 0x29, 0xa3, 0x43, 0x08, 0xaf, 0x56, 0x54, 0xfa, 0xbb, 0xbf, 0xe0, 0x4f, 0xbc, 0x8e, 0xc2,
	0x65, 0x97, 0x78, 0xc5, 0xb4, 0x9c, 0x39, 0xa6, 0xf9, 0x09, 0xc0, 0xfa, 0x62, 0x7e, 0xd9, 0xba,
	0xa7, 0x70, 0x5d, 0x98, 0xcd, 0x17, 0xa6, 0x52, 0xba, 0x30, 0x82, 0x26, 0xfb, 0x57, 0x30, 0xd0,
	0xb3, 0x05, 0x75, 0x2b, 0x5c, 0xdd, 0xee, 0xad, 0xea, 0x44, 0xe5, 0x79, 0x79, 0xed, 0x2f, 0x15,
	0xb8, 0xca, 0xe5, 0xa1, 0xb7, 0x00, 0xae, 0x89, 0xed, 0x44, 0xbb, 0x4b, 0x95, 0x5c, 0x7f, 0x0a,
	0x9a, 0x75, 0x3b, 0x50, 0xd4, 0x34, 0xef, 0xbd, 0xfb, 0xfa, 0xf3, 0xc3, 0xca, 0x0e, 0x6a, 0xe0,
	0xf2, 0x77, 0x89, 0x3e, 0x03, 0xf8, 0xff, 0xb5, 0x5d, 0x43, 0xed, 0xf2, 0x22, 0x65, 0xef, 0x45,
	0xeb, 0xfc, 0x15, 0x47, 0x6a, 0x7c, 0xc4, 0x35, 0xee, 0x21, 0x6b, 0xa9, 0x46, 0xb7, 0xe0, 0xf5,
	0xf8, 0x2e, 0x71, 0x69, 0x67, 0x00, 0xae, 0xcb, 0xb9, 0xa2, 0x1b, 0x7a, 0xb1, 0xb8, 0x5a, 0xda,
	0x83, 0x3f, 0x40, 0x4a, 0x49, 0x16, 0x97, 0x64, 0x22, 0x03, 0x97, 0xff, 0xac, 0x12, 0x4c, 0x82,
	0x60, 0xff, 0xf9, 0xc5, 0x44, 0x07, 0x97, 0x13, 0x1d, 0xfc, 0x98, 0xe8, 0xe0, 0xfd, 0x54, 0x57,
	0x2e, 0xa7, 0xba, 0xf2, 0x6d, 0xaa, 0x2b, 0xaf, 0x3a, 0x9e, 0x9f, 0x1e, 0x65, 0x7d, 0xdb, 0x65,
	0x23, 0x9c, 0x85, 0xfe, 0xd0, 0x77, 0xf9, 0xe8, 0x1f, 0xe6, 0xf1, 0x55, 0xd6, 0x37, 0x45, 0xde,
	0xf4, 0x34, 0xa2, 0x49, 0x7f, 0x8d, 0xff, 0x01, 0x3b, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x44,
	0x2a, 0xc1, 0x28, 0x18, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// CalculateFlowRate can be used to calculate a flow rate (coins per second) to be used when creating/updating a stream
	CalculateFlowRate(ctx context.Context, in *QueryCalculateFlowRateRequest, opts ...grpc.CallOption) (*QueryCalculateFlowRateResponse, error)
	// Streams queries all Streams.
	Streams(ctx context.Context, in *QueryStreamsRequest, opts ...grpc.CallOption) (*QueryStreamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/mainchain.stream.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CalculateFlowRate(ctx context.Context, in *QueryCalculateFlowRateRequest, opts ...grpc.CallOption) (*QueryCalculateFlowRateResponse, error) {
	out := new(QueryCalculateFlowRateResponse)
	err := c.cc.Invoke(ctx, "/mainchain.stream.v1.Query/CalculateFlowRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Streams(ctx context.Context, in *QueryStreamsRequest, opts ...grpc.CallOption) (*QueryStreamsResponse, error) {
	out := new(QueryStreamsResponse)
	err := c.cc.Invoke(ctx, "/mainchain.stream.v1.Query/Streams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// CalculateFlowRate can be used to calculate a flow rate (coins per second) to be used when creating/updating a stream
	CalculateFlowRate(context.Context, *QueryCalculateFlowRateRequest) (*QueryCalculateFlowRateResponse, error)
	// Streams queries all Streams.
	Streams(context.Context, *QueryStreamsRequest) (*QueryStreamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) CalculateFlowRate(ctx context.Context, req *QueryCalculateFlowRateRequest) (*QueryCalculateFlowRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateFlowRate not implemented")
}
func (*UnimplementedQueryServer) Streams(ctx context.Context, req *QueryStreamsRequest) (*QueryStreamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Streams not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.stream.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CalculateFlowRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCalculateFlowRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CalculateFlowRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.stream.v1.Query/CalculateFlowRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CalculateFlowRate(ctx, req.(*QueryCalculateFlowRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Streams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStreamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Streams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.stream.v1.Query/Streams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Streams(ctx, req.(*QueryStreamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mainchain.stream.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "CalculateFlowRate",
			Handler:    _Query_CalculateFlowRate_Handler,
		},
		{
			MethodName: "Streams",
			Handler:    _Query_Streams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mainchain/stream/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCalculateFlowRateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCalculateFlowRateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCalculateFlowRateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x18
	}
	if m.Period != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Coin) > 0 {
		i -= len(m.Coin)
		copy(dAtA[i:], m.Coin)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Coin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCalculateFlowRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCalculateFlowRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCalculateFlowRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FlowRate != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FlowRate))
		i--
		dAtA[i] = 0x28
	}
	if m.Seconds != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Seconds))
		i--
		dAtA[i] = 0x20
	}
	if m.Duration != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x18
	}
	if m.Period != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryStreamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStreamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStreamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStreamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStreamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStreamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Streams) > 0 {
		for iNdEx := len(m.Streams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Streams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCalculateFlowRateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Coin)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Period != 0 {
		n += 1 + sovQuery(uint64(m.Period))
	}
	if m.Duration != 0 {
		n += 1 + sovQuery(uint64(m.Duration))
	}
	return n
}

func (m *QueryCalculateFlowRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Coin.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.Period != 0 {
		n += 1 + sovQuery(uint64(m.Period))
	}
	if m.Duration != 0 {
		n += 1 + sovQuery(uint64(m.Duration))
	}
	if m.Seconds != 0 {
		n += 1 + sovQuery(uint64(m.Seconds))
	}
	if m.FlowRate != 0 {
		n += 1 + sovQuery(uint64(m.FlowRate))
	}
	return n
}

func (m *QueryStreamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStreamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Streams) > 0 {
		for _, e := range m.Streams {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCalculateFlowRateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCalculateFlowRateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCalculateFlowRateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= StreamPeriod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCalculateFlowRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCalculateFlowRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCalculateFlowRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= StreamPeriod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seconds", wireType)
			}
			m.Seconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowRate", wireType)
			}
			m.FlowRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowRate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStreamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStreamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStreamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStreamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStreamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStreamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Streams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Streams = append(m.Streams, Stream{})
			if err := m.Streams[len(m.Streams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
