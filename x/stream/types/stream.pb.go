// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mainchain/stream/v1/stream.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// StreamPeriod enumerates the valid periods for calculating flow rates
type StreamPeriod int32

const (
	// STREAM_PERIOD_UNSPECIFIED defines unspecified
	StreamPeriodUnspecified StreamPeriod = 0
	// STREAM_PERIOD_SECOND defines second
	StreamPeriodSecond StreamPeriod = 1
	// STREAM_PERIOD_MINUTE defines minute
	StreamPeriodMinute StreamPeriod = 2
	// STREAM_PERIOD_HOUR defines hour
	StreamPeriodHour StreamPeriod = 3
	// STREAM_PERIOD_DAY defines day
	StreamPeriodDay StreamPeriod = 4
	// STREAM_PERIOD_WEEK defines week
	StreamPeriodWeek StreamPeriod = 5
	// STREAM_PERIOD_MONTH defines month
	StreamPeriodMonth StreamPeriod = 6
	// STREAM_PERIOD_YEAR defines year
	StreamPeriodYear StreamPeriod = 7
)

var StreamPeriod_name = map[int32]string{
	0: "STREAM_PERIOD_UNSPECIFIED",
	1: "STREAM_PERIOD_SECOND",
	2: "STREAM_PERIOD_MINUTE",
	3: "STREAM_PERIOD_HOUR",
	4: "STREAM_PERIOD_DAY",
	5: "STREAM_PERIOD_WEEK",
	6: "STREAM_PERIOD_MONTH",
	7: "STREAM_PERIOD_YEAR",
}

var StreamPeriod_value = map[string]int32{
	"STREAM_PERIOD_UNSPECIFIED": 0,
	"STREAM_PERIOD_SECOND":      1,
	"STREAM_PERIOD_MINUTE":      2,
	"STREAM_PERIOD_HOUR":        3,
	"STREAM_PERIOD_DAY":         4,
	"STREAM_PERIOD_WEEK":        5,
	"STREAM_PERIOD_MONTH":       6,
	"STREAM_PERIOD_YEAR":        7,
}

func (x StreamPeriod) String() string {
	return proto.EnumName(StreamPeriod_name, int32(x))
}

func (StreamPeriod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_835c4cdaca46b43c, []int{0}
}

// Stream holds data about a stream
type Stream struct {
	// stream_id is an auto generated integer id of the stream
	StreamId uint64 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// sender is the wallet that will send the stream
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// receiver is the wallet that will receive the stream
	Receiver string `protobuf:"bytes,3,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// deposit tracks the total amount the user has deposited to cover the stream, including any updates to the stream
	Deposit types.Coin `protobuf:"bytes,4,opt,name=deposit,proto3" json:"deposit"`
	// flow_rate is the current rate of nund per second
	FlowRate int64 `protobuf:"varint,5,opt,name=flow_rate,json=flowRate,proto3" json:"flow_rate,omitempty"`
	// create_time is the timestamp a stream was first created
	CreateTime time.Time `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3,stdtime" json:"create_time" yaml:"create_time"`
	// last_updated_time is the timestamp the stream was last updated - flow_rate, deposit etc.
	LastUpdatedTime time.Time `protobuf:"bytes,7,opt,name=last_updated_time,json=lastUpdatedTime,proto3,stdtime" json:"last_updated_time" yaml:"last_updated_time"`
	// last_outflow_time is the timestamp of the last claim. Allows for a start point to calculate the next claim
	LastOutflowTime time.Time `protobuf:"bytes,8,opt,name=last_outflow_time,json=lastOutflowTime,proto3,stdtime" json:"last_outflow_time" yaml:"last_outflow_time"`
	// deposit_zero_time is the timestamp for when the current deposited amount will run out
	DepositZeroTime time.Time `protobuf:"bytes,9,opt,name=deposit_zero_time,json=depositZeroTime,proto3,stdtime" json:"deposit_zero_time" yaml:"deposit_zero_time"`
	// total_streamed tracks the total amount streamed. Calculated when a stream withdraw/update/cancel occurs
	TotalStreamed types.Coin `protobuf:"bytes,10,opt,name=total_streamed,json=totalStreamed,proto3" json:"total_streamed"`
	// cancellable is whether a stream can be cancelled. Default is true, but will be false for example id eFUND is used
	Cancellable bool `protobuf:"varint,11,opt,name=cancellable,proto3" json:"cancellable,omitempty"`
}

func (m *Stream) Reset()         { *m = Stream{} }
func (m *Stream) String() string { return proto.CompactTextString(m) }
func (*Stream) ProtoMessage()    {}
func (*Stream) Descriptor() ([]byte, []int) {
	return fileDescriptor_835c4cdaca46b43c, []int{0}
}
func (m *Stream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Stream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Stream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Stream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stream.Merge(m, src)
}
func (m *Stream) XXX_Size() int {
	return m.Size()
}
func (m *Stream) XXX_DiscardUnknown() {
	xxx_messageInfo_Stream.DiscardUnknown(m)
}

var xxx_messageInfo_Stream proto.InternalMessageInfo

func (m *Stream) GetStreamId() uint64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

func (m *Stream) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *Stream) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *Stream) GetDeposit() types.Coin {
	if m != nil {
		return m.Deposit
	}
	return types.Coin{}
}

func (m *Stream) GetFlowRate() int64 {
	if m != nil {
		return m.FlowRate
	}
	return 0
}

func (m *Stream) GetCreateTime() time.Time {
	if m != nil {
		return m.CreateTime
	}
	return time.Time{}
}

func (m *Stream) GetLastUpdatedTime() time.Time {
	if m != nil {
		return m.LastUpdatedTime
	}
	return time.Time{}
}

func (m *Stream) GetLastOutflowTime() time.Time {
	if m != nil {
		return m.LastOutflowTime
	}
	return time.Time{}
}

func (m *Stream) GetDepositZeroTime() time.Time {
	if m != nil {
		return m.DepositZeroTime
	}
	return time.Time{}
}

func (m *Stream) GetTotalStreamed() types.Coin {
	if m != nil {
		return m.TotalStreamed
	}
	return types.Coin{}
}

func (m *Stream) GetCancellable() bool {
	if m != nil {
		return m.Cancellable
	}
	return false
}

// TotalDeposits tracks the current total deposits in the module account
type TotalDeposits struct {
	// total is to track the total deposited coins in the module
	Total github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=total,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total"`
}

func (m *TotalDeposits) Reset()         { *m = TotalDeposits{} }
func (m *TotalDeposits) String() string { return proto.CompactTextString(m) }
func (*TotalDeposits) ProtoMessage()    {}
func (*TotalDeposits) Descriptor() ([]byte, []int) {
	return fileDescriptor_835c4cdaca46b43c, []int{1}
}
func (m *TotalDeposits) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalDeposits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalDeposits.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TotalDeposits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalDeposits.Merge(m, src)
}
func (m *TotalDeposits) XXX_Size() int {
	return m.Size()
}
func (m *TotalDeposits) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalDeposits.DiscardUnknown(m)
}

var xxx_messageInfo_TotalDeposits proto.InternalMessageInfo

func (m *TotalDeposits) GetTotal() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Total
	}
	return nil
}

// StreamIdLookup is a quick lookup table for stream id -> stream pair
type StreamIdLookup struct {
	// sender is the wallet that will send the stream
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// receiver is the wallet that will receive the stream
	Receiver string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
}

func (m *StreamIdLookup) Reset()         { *m = StreamIdLookup{} }
func (m *StreamIdLookup) String() string { return proto.CompactTextString(m) }
func (*StreamIdLookup) ProtoMessage()    {}
func (*StreamIdLookup) Descriptor() ([]byte, []int) {
	return fileDescriptor_835c4cdaca46b43c, []int{2}
}
func (m *StreamIdLookup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamIdLookup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamIdLookup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamIdLookup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamIdLookup.Merge(m, src)
}
func (m *StreamIdLookup) XXX_Size() int {
	return m.Size()
}
func (m *StreamIdLookup) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamIdLookup.DiscardUnknown(m)
}

var xxx_messageInfo_StreamIdLookup proto.InternalMessageInfo

func (m *StreamIdLookup) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *StreamIdLookup) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func init() {
	proto.RegisterEnum("mainchain.stream.v1.StreamPeriod", StreamPeriod_name, StreamPeriod_value)
	proto.RegisterType((*Stream)(nil), "mainchain.stream.v1.Stream")
	proto.RegisterType((*TotalDeposits)(nil), "mainchain.stream.v1.TotalDeposits")
	proto.RegisterType((*StreamIdLookup)(nil), "mainchain.stream.v1.StreamIdLookup")
}

func init() { proto.RegisterFile("mainchain/stream/v1/stream.proto", fileDescriptor_835c4cdaca46b43c) }

var fileDescriptor_835c4cdaca46b43c = []byte{
	// 817 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x3d, 0x6f, 0xdb, 0x46,
	0x18, 0x16, 0x2d, 0x59, 0x96, 0xcf, 0x4d, 0x42, 0x9f, 0xdd, 0x96, 0x66, 0x00, 0x8a, 0x10, 0x3a,
	0x08, 0x46, 0x4d, 0xd6, 0x4d, 0x3b, 0x34, 0x9b, 0x6d, 0x31, 0xb0, 0xd0, 0x4a, 0x32, 0x48, 0x09,
	0x81, 0xd3, 0x81, 0x38, 0x91, 0x27, 0xf9, 0x60, 0x92, 0x27, 0x90, 0x47, 0x25, 0xee, 0x2f, 0x28,
	0x34, 0x65, 0x2e, 0xa0, 0xa9, 0x4b, 0xd1, 0xa9, 0x43, 0x7f, 0x44, 0xc6, 0xa0, 0x53, 0xa7, 0xa4,
	0xb0, 0x87, 0xee, 0x1d, 0x3a, 0x17, 0xe4, 0x9d, 0x52, 0x2a, 0x2a, 0x9a, 0x8f, 0x45, 0xe2, 0x3d,
	0xf7, 0x7c, 0xbc, 0x7c, 0x71, 0x2f, 0x0f, 0xe8, 0x21, 0x22, 0x91, 0x77, 0x81, 0x48, 0x64, 0x26,
	0x2c, 0xc6, 0x28, 0x34, 0xa7, 0x87, 0xe2, 0xc9, 0x98, 0xc4, 0x94, 0x51, 0xb8, 0xf3, 0x8a, 0x61,
	0x08, 0x7c, 0x7a, 0xa8, 0x6a, 0x1e, 0x4d, 0x42, 0x9a, 0x98, 0x43, 0x94, 0x60, 0x73, 0x7a, 0x38,
	0xc4, 0x0c, 0x1d, 0x9a, 0x1e, 0x25, 0x11, 0x17, 0xa9, 0x7b, 0x7c, 0xdf, 0xcd, 0x57, 0x26, 0x5f,
	0x88, 0xad, 0xdd, 0x31, 0x1d, 0x53, 0x8e, 0x67, 0x4f, 0x02, 0xd5, 0xc6, 0x94, 0x8e, 0x03, 0x6c,
	0xe6, 0xab, 0x61, 0x3a, 0x32, 0xfd, 0x34, 0x46, 0x8c, 0xd0, 0x85, 0x61, 0xfd, 0xf5, 0x7d, 0x46,
	0x42, 0x9c, 0x30, 0x14, 0x4e, 0x04, 0x61, 0x1b, 0x85, 0x24, 0xa2, 0x66, 0xfe, 0xcb, 0xa1, 0xc6,
	0xdf, 0xeb, 0xa0, 0xea, 0xe4, 0x25, 0xc3, 0xbb, 0x60, 0x93, 0x17, 0xef, 0x12, 0x5f, 0x91, 0x74,
	0xa9, 0x59, 0xb1, 0x6b, 0x1c, 0x68, 0xfb, 0xf0, 0x33, 0x50, 0x4d, 0x70, 0xe4, 0xe3, 0x58, 0x59,
	0xd3, 0xa5, 0xe6, 0xe6, 0xb1, 0xf2, 0xdb, 0xaf, 0x07, 0xbb, 0xa2, 0xe6, 0x23, 0xdf, 0x8f, 0x71,
	0x92, 0x38, 0x2c, 0x26, 0xd1, 0xd8, 0x16, 0x3c, 0xf8, 0x05, 0xa8, 0xc5, 0xd8, 0xc3, 0x64, 0x8a,
	0x63, 0xa5, 0xfc, 0x06, 0xcd, 0x2b, 0x26, 0xfc, 0x0a, 0x6c, 0xf8, 0x78, 0x42, 0x13, 0xc2, 0x94,
	0x8a, 0x2e, 0x35, 0xb7, 0x3e, 0xdf, 0x33, 0x84, 0x22, 0x6b, 0xa3, 0x21, 0xda, 0x68, 0x9c, 0x50,
	0x12, 0x1d, 0x57, 0x9e, 0xbd, 0xa8, 0x97, 0xec, 0x05, 0x3f, 0xab, 0x7f, 0x14, 0xd0, 0xc7, 0x6e,
	0x8c, 0x18, 0x56, 0xd6, 0x75, 0xa9, 0x59, 0xb6, 0x6b, 0x19, 0x60, 0x23, 0x86, 0xe1, 0xb7, 0x60,
	0xcb, 0x8b, 0x31, 0x62, 0xd8, 0xcd, 0x9a, 0xa2, 0x54, 0x73, 0x6f, 0xd5, 0xe0, 0x1d, 0x33, 0x16,
	0x1d, 0x33, 0xfa, 0x8b, 0x8e, 0x1d, 0x6b, 0x99, 0xf9, 0x5f, 0x2f, 0xea, 0xf0, 0x0a, 0x85, 0xc1,
	0xfd, 0x46, 0x41, 0xdc, 0x78, 0xfa, 0xb2, 0x2e, 0xd9, 0x80, 0x23, 0x99, 0x00, 0x06, 0x60, 0x3b,
	0x40, 0x09, 0x73, 0xd3, 0x89, 0x8f, 0x18, 0xf6, 0x79, 0xc4, 0xc6, 0x1b, 0x23, 0x3e, 0x11, 0x11,
	0x0a, 0x8f, 0x58, 0xb1, 0xe0, 0x41, 0x77, 0x32, 0x7c, 0xc0, 0xe1, 0xa5, 0x34, 0x9a, 0xb2, 0xfc,
	0x7d, 0xf3, 0xb4, 0xda, 0x7b, 0xa5, 0x15, 0x2d, 0x0a, 0x69, 0x3d, 0x0e, 0x2f, 0xd2, 0x44, 0x83,
	0xdd, 0xef, 0x70, 0x4c, 0x79, 0xda, 0xe6, 0xbb, 0xa6, 0xad, 0x58, 0x88, 0x34, 0x81, 0x3f, 0xc2,
	0x31, 0xcd, 0xd3, 0x1e, 0x80, 0xdb, 0x8c, 0x32, 0x14, 0xb8, 0xfc, 0xe0, 0x61, 0x5f, 0x01, 0x6f,
	0x77, 0x0a, 0x6e, 0xe5, 0x32, 0x47, 0xa8, 0xa0, 0x0e, 0xb6, 0x3c, 0x14, 0x79, 0x38, 0x08, 0xd0,
	0x30, 0xc0, 0xca, 0x96, 0x2e, 0x35, 0x6b, 0x76, 0x11, 0x6a, 0x3c, 0x06, 0xb7, 0xfa, 0x99, 0xa4,
	0xc5, 0x2b, 0x48, 0xe0, 0x08, 0xac, 0xe7, 0x1e, 0x8a, 0xa4, 0x97, 0xff, 0x3f, 0xf1, 0xcb, 0x2c,
	0xf1, 0xe7, 0x97, 0xf5, 0xe6, 0x98, 0xb0, 0x8b, 0x74, 0x68, 0x78, 0x34, 0x14, 0xe3, 0x2b, 0xfe,
	0x0e, 0x12, 0xff, 0xd2, 0x64, 0x57, 0x13, 0x9c, 0xe4, 0x82, 0xe4, 0xa7, 0x3f, 0x7f, 0xd9, 0x97,
	0x6c, 0x6e, 0xdf, 0x78, 0x02, 0x6e, 0x3b, 0x62, 0xaa, 0xbe, 0xa1, 0xf4, 0x32, 0x9d, 0x14, 0x66,
	0x4b, 0x7a, 0x8f, 0xd9, 0x5a, 0x7b, 0xdb, 0xd9, 0xda, 0xff, 0xa1, 0x0c, 0x3e, 0xe0, 0xd1, 0x67,
	0x38, 0x26, 0xd4, 0x87, 0xf7, 0xc1, 0x9e, 0xd3, 0xb7, 0xad, 0xa3, 0x8e, 0x7b, 0x66, 0xd9, 0xed,
	0x5e, 0xcb, 0x1d, 0x74, 0x9d, 0x33, 0xeb, 0xa4, 0xfd, 0xa0, 0x6d, 0xb5, 0xe4, 0x92, 0x7a, 0x77,
	0x36, 0xd7, 0x3f, 0x2e, 0x0a, 0x06, 0x51, 0x32, 0xc1, 0x1e, 0x19, 0x11, 0x9c, 0x7d, 0x10, 0x76,
	0x97, 0xb5, 0x8e, 0x75, 0xd2, 0xeb, 0xb6, 0x64, 0x49, 0xfd, 0x68, 0x36, 0xd7, 0x61, 0x51, 0xe6,
	0x60, 0x8f, 0x46, 0xff, 0xa1, 0xe8, 0xb4, 0xbb, 0x83, 0xbe, 0x25, 0xaf, 0xad, 0x2a, 0x3a, 0x24,
	0x4a, 0x19, 0x86, 0x9f, 0x02, 0xb8, 0xac, 0x38, 0xed, 0x0d, 0x6c, 0xb9, 0xac, 0xee, 0xce, 0xe6,
	0xba, 0x5c, 0xe4, 0x9f, 0xd2, 0x34, 0x86, 0xfb, 0x60, 0x7b, 0x99, 0xdd, 0x3a, 0x3a, 0x97, 0x2b,
	0xea, 0xce, 0x6c, 0xae, 0xdf, 0x29, 0x92, 0x5b, 0xe8, 0x6a, 0xd5, 0xf9, 0xa1, 0x65, 0x7d, 0x2d,
	0xaf, 0xaf, 0x3a, 0x3f, 0xc4, 0xf8, 0x12, 0x1a, 0x60, 0xe7, 0xb5, 0xca, 0x7b, 0xdd, 0xfe, 0xa9,
	0x5c, 0x55, 0x3f, 0x9c, 0xcd, 0xf5, 0xed, 0xa5, 0xc2, 0x69, 0xc4, 0x2e, 0x56, 0xdd, 0xcf, 0xad,
	0x23, 0x5b, 0xde, 0x58, 0x75, 0x3f, 0xc7, 0x28, 0x56, 0x2b, 0xdf, 0xff, 0xa8, 0x95, 0x8e, 0x3b,
	0xcf, 0xae, 0x35, 0xe9, 0xf9, 0xb5, 0x26, 0xfd, 0x71, 0xad, 0x49, 0x4f, 0x6f, 0xb4, 0xd2, 0xf3,
	0x1b, 0xad, 0xf4, 0xfb, 0x8d, 0x56, 0x7a, 0x74, 0xaf, 0x70, 0xcc, 0xd2, 0x88, 0x8c, 0x88, 0x97,
	0x7f, 0xf4, 0x0f, 0xb2, 0xf5, 0xbf, 0x37, 0xd3, 0x93, 0xc5, 0xdd, 0x94, 0x9f, 0xbb, 0x61, 0x35,
	0x9f, 0xc9, 0x7b, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x91, 0x5f, 0x45, 0xf7, 0xbc, 0x06, 0x00,
	0x00,
}

func (m *Stream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stream) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Stream) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cancellable {
		i--
		if m.Cancellable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	{
		size, err := m.TotalStreamed.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStream(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.DepositZeroTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.DepositZeroTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintStream(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x4a
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.LastOutflowTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastOutflowTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintStream(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x42
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.LastUpdatedTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastUpdatedTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintStream(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x3a
	n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CreateTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreateTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintStream(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x32
	if m.FlowRate != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.FlowRate))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.Deposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStream(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintStream(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintStream(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if m.StreamId != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.StreamId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TotalDeposits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalDeposits) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TotalDeposits) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Total) > 0 {
		for iNdEx := len(m.Total) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Total[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StreamIdLookup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamIdLookup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamIdLookup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintStream(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintStream(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStream(dAtA []byte, offset int, v uint64) int {
	offset -= sovStream(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Stream) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StreamId != 0 {
		n += 1 + sovStream(uint64(m.StreamId))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = m.Deposit.Size()
	n += 1 + l + sovStream(uint64(l))
	if m.FlowRate != 0 {
		n += 1 + sovStream(uint64(m.FlowRate))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreateTime)
	n += 1 + l + sovStream(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastUpdatedTime)
	n += 1 + l + sovStream(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastOutflowTime)
	n += 1 + l + sovStream(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.DepositZeroTime)
	n += 1 + l + sovStream(uint64(l))
	l = m.TotalStreamed.Size()
	n += 1 + l + sovStream(uint64(l))
	if m.Cancellable {
		n += 2
	}
	return n
}

func (m *TotalDeposits) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Total) > 0 {
		for _, e := range m.Total {
			l = e.Size()
			n += 1 + l + sovStream(uint64(l))
		}
	}
	return n
}

func (m *StreamIdLookup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	return n
}

func sovStream(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStream(x uint64) (n int) {
	return sovStream(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Stream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			m.StreamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowRate", wireType)
			}
			m.FlowRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowRate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CreateTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.LastUpdatedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastOutflowTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.LastOutflowTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositZeroTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.DepositZeroTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStreamed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalStreamed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cancellable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cancellable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalDeposits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalDeposits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalDeposits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Total = append(m.Total, types.Coin{})
			if err := m.Total[len(m.Total)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamIdLookup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamIdLookup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamIdLookup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStream(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStream
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStream
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStream
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStream
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStream        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStream          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStream = fmt.Errorf("proto: unexpected end of group")
)
