// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mainchain/stream/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateStream creates a new stream
type MsgCreateStream struct {
	// receiver is the wallet that will receive stream payments
	Receiver string `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// sender is the address of the stream creator, sending the stream
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// deposit is the amount being sent to deposit for the stream
	Deposit types.Coin `protobuf:"bytes,3,opt,name=deposit,proto3" json:"deposit"`
	// flow_rate is the rate of nund per second
	FlowRate int64 `protobuf:"varint,5,opt,name=flow_rate,json=flowRate,proto3" json:"flow_rate,omitempty"`
}

func (m *MsgCreateStream) Reset()         { *m = MsgCreateStream{} }
func (m *MsgCreateStream) String() string { return proto.CompactTextString(m) }
func (*MsgCreateStream) ProtoMessage()    {}
func (*MsgCreateStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_887eb49d9c70e8b4, []int{0}
}
func (m *MsgCreateStream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateStream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateStream.Merge(m, src)
}
func (m *MsgCreateStream) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateStream) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateStream.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateStream proto.InternalMessageInfo

// MsgCreateStreamResponse is the response for MsgCreateStream
type MsgCreateStreamResponse struct {
	// stream_id is a generated ID, used for tracking event emissions, queries etc.
	StreamId uint64 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
}

func (m *MsgCreateStreamResponse) Reset()         { *m = MsgCreateStreamResponse{} }
func (m *MsgCreateStreamResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateStreamResponse) ProtoMessage()    {}
func (*MsgCreateStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_887eb49d9c70e8b4, []int{1}
}
func (m *MsgCreateStreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateStreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateStreamResponse.Merge(m, src)
}
func (m *MsgCreateStreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateStreamResponse proto.InternalMessageInfo

func (m *MsgCreateStreamResponse) GetStreamId() uint64 {
	if m != nil {
		return m.StreamId
	}
	return 0
}

// MsgClaimStream claims pending payments in a stream
type MsgClaimStream struct {
	// stream_id is id of the stream being claimed
	StreamId uint64 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// receiver is the wallet making the claim
	Receiver string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
}

func (m *MsgClaimStream) Reset()         { *m = MsgClaimStream{} }
func (m *MsgClaimStream) String() string { return proto.CompactTextString(m) }
func (*MsgClaimStream) ProtoMessage()    {}
func (*MsgClaimStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_887eb49d9c70e8b4, []int{2}
}
func (m *MsgClaimStream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimStream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimStream.Merge(m, src)
}
func (m *MsgClaimStream) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimStream) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimStream.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimStream proto.InternalMessageInfo

// MsgClaimStreamResponse is te response for MsgClaimStream
type MsgClaimStreamResponse struct {
	// total_claimed is the total value of the claim
	TotalClaimed types.Coin `protobuf:"bytes,1,opt,name=total_claimed,json=totalClaimed,proto3" json:"total_claimed"`
	// stream_payment is the amount received by the receiver wallet
	StreamPayment types.Coin `protobuf:"bytes,2,opt,name=stream_payment,json=streamPayment,proto3" json:"stream_payment"`
	// validator_fee is the amount sent to validators
	ValidatorFee types.Coin `protobuf:"bytes,3,opt,name=validator_fee,json=validatorFee,proto3" json:"validator_fee"`
	// remaining_deposit is the amount of deposit remaining in the stream
	RemainingDeposit types.Coin `protobuf:"bytes,4,opt,name=remaining_deposit,json=remainingDeposit,proto3" json:"remaining_deposit"`
}

func (m *MsgClaimStreamResponse) Reset()         { *m = MsgClaimStreamResponse{} }
func (m *MsgClaimStreamResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimStreamResponse) ProtoMessage()    {}
func (*MsgClaimStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_887eb49d9c70e8b4, []int{3}
}
func (m *MsgClaimStreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimStreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimStreamResponse.Merge(m, src)
}
func (m *MsgClaimStreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimStreamResponse proto.InternalMessageInfo

func (m *MsgClaimStreamResponse) GetTotalClaimed() types.Coin {
	if m != nil {
		return m.TotalClaimed
	}
	return types.Coin{}
}

func (m *MsgClaimStreamResponse) GetStreamPayment() types.Coin {
	if m != nil {
		return m.StreamPayment
	}
	return types.Coin{}
}

func (m *MsgClaimStreamResponse) GetValidatorFee() types.Coin {
	if m != nil {
		return m.ValidatorFee
	}
	return types.Coin{}
}

func (m *MsgClaimStreamResponse) GetRemainingDeposit() types.Coin {
	if m != nil {
		return m.RemainingDeposit
	}
	return types.Coin{}
}

// MsgTopUpDeposit tops up deposits in an existing stream
type MsgTopUpDeposit struct {
	// stream_id is id of the stream being claimed
	StreamId uint64 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// receiver is the wallet making the claim
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// deposit is the amount being sent to deposit for the stream
	Deposit types.Coin `protobuf:"bytes,3,opt,name=deposit,proto3" json:"deposit"`
}

func (m *MsgTopUpDeposit) Reset()         { *m = MsgTopUpDeposit{} }
func (m *MsgTopUpDeposit) String() string { return proto.CompactTextString(m) }
func (*MsgTopUpDeposit) ProtoMessage()    {}
func (*MsgTopUpDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_887eb49d9c70e8b4, []int{4}
}
func (m *MsgTopUpDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTopUpDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTopUpDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTopUpDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTopUpDeposit.Merge(m, src)
}
func (m *MsgTopUpDeposit) XXX_Size() int {
	return m.Size()
}
func (m *MsgTopUpDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTopUpDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTopUpDeposit proto.InternalMessageInfo

// MsgTopUpDepositResponse is the response for MsgTopUpDeposit
type MsgTopUpDepositResponse struct {
}

func (m *MsgTopUpDepositResponse) Reset()         { *m = MsgTopUpDepositResponse{} }
func (m *MsgTopUpDepositResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTopUpDepositResponse) ProtoMessage()    {}
func (*MsgTopUpDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_887eb49d9c70e8b4, []int{5}
}
func (m *MsgTopUpDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTopUpDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTopUpDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTopUpDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTopUpDepositResponse.Merge(m, src)
}
func (m *MsgTopUpDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTopUpDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTopUpDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTopUpDepositResponse proto.InternalMessageInfo

// MsgUpdateFlowRate updates a stream's flow rate
type MsgUpdateFlowRate struct {
	// stream_id is id of the stream being claimed
	StreamId uint64 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// receiver is the wallet making the claim
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	// flow_rate is the rate of nund per second
	FlowRate int64 `protobuf:"varint,3,opt,name=flow_rate,json=flowRate,proto3" json:"flow_rate,omitempty"`
}

func (m *MsgUpdateFlowRate) Reset()         { *m = MsgUpdateFlowRate{} }
func (m *MsgUpdateFlowRate) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateFlowRate) ProtoMessage()    {}
func (*MsgUpdateFlowRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_887eb49d9c70e8b4, []int{6}
}
func (m *MsgUpdateFlowRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateFlowRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateFlowRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateFlowRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateFlowRate.Merge(m, src)
}
func (m *MsgUpdateFlowRate) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateFlowRate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateFlowRate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateFlowRate proto.InternalMessageInfo

// MsgUpdateFlowRateResponse is the response for MsgUpdateFlowRate
type MsgUpdateFlowRateResponse struct {
}

func (m *MsgUpdateFlowRateResponse) Reset()         { *m = MsgUpdateFlowRateResponse{} }
func (m *MsgUpdateFlowRateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateFlowRateResponse) ProtoMessage()    {}
func (*MsgUpdateFlowRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_887eb49d9c70e8b4, []int{7}
}
func (m *MsgUpdateFlowRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateFlowRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateFlowRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateFlowRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateFlowRateResponse.Merge(m, src)
}
func (m *MsgUpdateFlowRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateFlowRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateFlowRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateFlowRateResponse proto.InternalMessageInfo

// MsgCancelStream
type MsgCancelStream struct {
	// stream_id is id of the stream being claimed
	StreamId uint64 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// receiver is the wallet making the claim
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgCancelStream) Reset()         { *m = MsgCancelStream{} }
func (m *MsgCancelStream) String() string { return proto.CompactTextString(m) }
func (*MsgCancelStream) ProtoMessage()    {}
func (*MsgCancelStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_887eb49d9c70e8b4, []int{8}
}
func (m *MsgCancelStream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelStream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelStream.Merge(m, src)
}
func (m *MsgCancelStream) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelStream) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelStream.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelStream proto.InternalMessageInfo

// MsgCancelStreamResponse
type MsgCancelStreamResponse struct {
}

func (m *MsgCancelStreamResponse) Reset()         { *m = MsgCancelStreamResponse{} }
func (m *MsgCancelStreamResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelStreamResponse) ProtoMessage()    {}
func (*MsgCancelStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_887eb49d9c70e8b4, []int{9}
}
func (m *MsgCancelStreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelStreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelStreamResponse.Merge(m, src)
}
func (m *MsgCancelStreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelStreamResponse proto.InternalMessageInfo

// MsgUpdateParams is the Msg/UpdateParams request type.
//
// Since: cosmos-sdk 0.47
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the x/beacon parameters to update.
	//
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_887eb49d9c70e8b4, []int{10}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
//
// Since: cosmos-sdk 0.47
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_887eb49d9c70e8b4, []int{11}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateStream)(nil), "mainchain.stream.v1.MsgCreateStream")
	proto.RegisterType((*MsgCreateStreamResponse)(nil), "mainchain.stream.v1.MsgCreateStreamResponse")
	proto.RegisterType((*MsgClaimStream)(nil), "mainchain.stream.v1.MsgClaimStream")
	proto.RegisterType((*MsgClaimStreamResponse)(nil), "mainchain.stream.v1.MsgClaimStreamResponse")
	proto.RegisterType((*MsgTopUpDeposit)(nil), "mainchain.stream.v1.MsgTopUpDeposit")
	proto.RegisterType((*MsgTopUpDepositResponse)(nil), "mainchain.stream.v1.MsgTopUpDepositResponse")
	proto.RegisterType((*MsgUpdateFlowRate)(nil), "mainchain.stream.v1.MsgUpdateFlowRate")
	proto.RegisterType((*MsgUpdateFlowRateResponse)(nil), "mainchain.stream.v1.MsgUpdateFlowRateResponse")
	proto.RegisterType((*MsgCancelStream)(nil), "mainchain.stream.v1.MsgCancelStream")
	proto.RegisterType((*MsgCancelStreamResponse)(nil), "mainchain.stream.v1.MsgCancelStreamResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "mainchain.stream.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "mainchain.stream.v1.MsgUpdateParamsResponse")
}

func init() { proto.RegisterFile("mainchain/stream/v1/tx.proto", fileDescriptor_887eb49d9c70e8b4) }

var fileDescriptor_887eb49d9c70e8b4 = []byte{
	// 782 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x41, 0x4f, 0x13, 0x41,
	0x14, 0xee, 0xd2, 0x8a, 0x74, 0x28, 0x28, 0x0b, 0x4a, 0x5b, 0x4c, 0x69, 0x2a, 0x31, 0x04, 0x65,
	0xd7, 0x82, 0x92, 0xc8, 0xc1, 0xc4, 0x42, 0x48, 0x4c, 0x6c, 0x42, 0x8a, 0x5c, 0xbc, 0x34, 0xd3,
	0xdd, 0x61, 0x3b, 0x49, 0x77, 0x67, 0xb3, 0x33, 0xad, 0xe0, 0xd1, 0x93, 0xf1, 0xe4, 0xc1, 0x1f,
	0xc0, 0xd1, 0x63, 0x0f, 0x9e, 0x3c, 0x79, 0xe4, 0x48, 0x3c, 0x79, 0x32, 0x04, 0x12, 0xf1, 0x67,
	0x98, 0xdd, 0x99, 0x6e, 0x77, 0xeb, 0xb6, 0xac, 0x89, 0xf1, 0x42, 0xd8, 0x79, 0xdf, 0x37, 0xef,
	0x7b, 0x6f, 0xbe, 0xf7, 0x52, 0x70, 0xc7, 0x84, 0xd8, 0xd2, 0x9a, 0x10, 0x5b, 0x2a, 0x65, 0x0e,
	0x82, 0xa6, 0xda, 0x29, 0xab, 0xec, 0x50, 0xb1, 0x1d, 0xc2, 0x88, 0x3c, 0xeb, 0x47, 0x15, 0x1e,
	0x55, 0x3a, 0xe5, 0x7c, 0x41, 0x23, 0xd4, 0x24, 0x54, 0x6d, 0x40, 0x8a, 0xd4, 0x4e, 0xb9, 0x81,
	0x18, 0x2c, 0xab, 0x1a, 0xc1, 0x16, 0x27, 0xe5, 0xe7, 0x45, 0xdc, 0xa4, 0x86, 0x7b, 0x99, 0x49,
	0x0d, 0x11, 0xc8, 0xf1, 0x40, 0xdd, 0xfb, 0x52, 0xf9, 0x87, 0x08, 0xcd, 0x19, 0xc4, 0x20, 0xfc,
	0xdc, 0xfd, 0x4f, 0x9c, 0xce, 0x40, 0x13, 0x5b, 0x44, 0xf5, 0xfe, 0x8a, 0xa3, 0x62, 0x94, 0x5e,
	0x1b, 0x3a, 0xd0, 0x14, 0x57, 0x95, 0x7e, 0x4a, 0xe0, 0x46, 0x95, 0x1a, 0x5b, 0x0e, 0x82, 0x0c,
	0xed, 0x79, 0x18, 0xf9, 0x11, 0x98, 0x70, 0x90, 0x86, 0x70, 0x07, 0x39, 0x59, 0xa9, 0x28, 0x2d,
	0xa7, 0x2b, 0xd9, 0x6f, 0x9f, 0x57, 0xe7, 0x84, 0x84, 0x67, 0xba, 0xee, 0x20, 0x4a, 0xf7, 0x98,
	0x83, 0x2d, 0xa3, 0xe6, 0x23, 0xe5, 0x87, 0x60, 0x9c, 0x22, 0x4b, 0x47, 0x4e, 0x76, 0xec, 0x0a,
	0x8e, 0xc0, 0xc9, 0x4f, 0xc0, 0x75, 0x1d, 0xd9, 0x84, 0x62, 0x96, 0x4d, 0x16, 0xa5, 0xe5, 0xc9,
	0xb5, 0x9c, 0x22, 0xf0, 0x6e, 0xb3, 0x14, 0xd1, 0x2c, 0x65, 0x8b, 0x60, 0xab, 0x92, 0x3a, 0xf9,
	0xb1, 0x98, 0xa8, 0xf5, 0xf0, 0xf2, 0x02, 0x48, 0x1f, 0xb4, 0xc8, 0xeb, 0xba, 0x03, 0x19, 0xca,
	0x5e, 0x2b, 0x4a, 0xcb, 0xc9, 0xda, 0x84, 0x7b, 0x50, 0x83, 0x0c, 0x6d, 0xce, 0xbe, 0x3b, 0x5e,
	0x4c, 0xfc, 0x3a, 0x5e, 0x4c, 0xbc, 0xbd, 0xec, 0xae, 0x88, 0x64, 0xa5, 0x0d, 0x30, 0x3f, 0x50,
	0x67, 0x0d, 0x51, 0x9b, 0x58, 0x14, 0xb9, 0x97, 0xf1, 0xee, 0xd4, 0xb1, 0xee, 0x15, 0x9c, 0xaa,
	0x4d, 0xf0, 0x83, 0xe7, 0x7a, 0xe9, 0x0d, 0x98, 0x76, 0x79, 0x2d, 0x88, 0x4d, 0xd1, 0x9e, 0x51,
	0xf0, 0x50, 0xef, 0xc6, 0xe2, 0xf6, 0x6e, 0xf3, 0x56, 0x50, 0xb1, 0x7f, 0x5c, 0xfa, 0x32, 0x06,
	0x6e, 0x87, 0x93, 0xfb, 0x9a, 0xb7, 0xc1, 0x14, 0x23, 0x0c, 0xb6, 0xea, 0x9a, 0x1b, 0x44, 0x5c,
	0x48, 0x8c, 0x0e, 0x66, 0x3c, 0xd6, 0x16, 0x27, 0xc9, 0x3b, 0x60, 0x5a, 0x94, 0x62, 0xc3, 0x23,
	0x13, 0x59, 0xcc, 0xd3, 0x1c, 0xe3, 0x9a, 0x29, 0x4e, 0xdb, 0xe5, 0x2c, 0x57, 0x4d, 0x07, 0xb6,
	0xb0, 0x0e, 0x19, 0x71, 0xea, 0x07, 0x08, 0xc5, 0x7d, 0xcf, 0x8c, 0xcf, 0xda, 0x41, 0x48, 0x7e,
	0x01, 0x66, 0x1c, 0xe4, 0x3a, 0x16, 0x5b, 0x46, 0xbd, 0xe7, 0x8c, 0x54, 0xbc, 0x9b, 0x6e, 0xfa,
	0xcc, 0x6d, 0x4e, 0x2c, 0x75, 0xb9, 0xb3, 0x5f, 0x12, 0x7b, 0xdf, 0xde, 0xee, 0xdb, 0x66, 0xf8,
	0xd3, 0xfd, 0x4f, 0x03, 0x47, 0x7b, 0x34, 0xe7, 0x79, 0x34, 0xa8, 0xb8, 0xf7, 0xde, 0xa5, 0x8f,
	0x12, 0x98, 0xa9, 0x52, 0x63, 0xdf, 0xd6, 0x21, 0x43, 0x3b, 0xc2, 0xe9, 0xff, 0xba, 0x9e, 0xd0,
	0x54, 0x25, 0xe3, 0x4c, 0xd5, 0x02, 0xc8, 0xfd, 0xa1, 0xca, 0xd7, 0xdc, 0xe6, 0xab, 0x05, 0x5a,
	0x1a, 0x6a, 0xc5, 0x99, 0x9d, 0xbf, 0x16, 0x3c, 0xaa, 0x8b, 0xc1, 0xb4, 0xbe, 0xa2, 0xaf, 0xdc,
	0x13, 0x5c, 0xef, 0xae, 0xb7, 0x07, 0xe5, 0x0d, 0x90, 0x86, 0x6d, 0xd6, 0x24, 0x0e, 0x66, 0x47,
	0x57, 0xae, 0xbb, 0x3e, 0x54, 0x7e, 0x0a, 0xc6, 0xf9, 0x26, 0x15, 0x33, 0xb3, 0xa0, 0x44, 0xac,
	0x7f, 0x85, 0x27, 0xa9, 0xa4, 0xdd, 0xd7, 0xff, 0x74, 0xd9, 0x5d, 0x91, 0x6a, 0x82, 0xb5, 0xf9,
	0xd8, 0xd5, 0xdc, 0xbf, 0xef, 0xfd, 0x65, 0x77, 0xa5, 0xd4, 0x5f, 0xd7, 0x87, 0xbd, 0x85, 0x3d,
	0x20, 0x57, 0x54, 0x17, 0x3c, 0xea, 0x55, 0xb7, 0x76, 0x96, 0x02, 0xc9, 0x2a, 0x35, 0xe4, 0x06,
	0xc8, 0x84, 0xf6, 0xf9, 0x52, 0xa4, 0xb2, 0x81, 0x6d, 0x98, 0x7f, 0x10, 0x07, 0xe5, 0xef, 0x9f,
	0x3a, 0x98, 0x0c, 0xee, 0xc4, 0xbb, 0x43, 0xc9, 0x7d, 0x50, 0xfe, 0x7e, 0x0c, 0x90, 0x9f, 0xa0,
	0x01, 0x32, 0xa1, 0xd1, 0x1d, 0x5a, 0x44, 0x10, 0x35, 0xbc, 0x88, 0xa8, 0xa1, 0x92, 0x9b, 0x60,
	0x7a, 0x60, 0xa0, 0xee, 0x0d, 0xe3, 0x87, 0x71, 0x79, 0x25, 0x1e, 0x2e, 0x58, 0x4d, 0x68, 0x0e,
	0x86, 0x3f, 0x49, 0x00, 0x35, 0xe2, 0x49, 0x22, 0xcc, 0xed, 0xe6, 0x08, 0x19, 0x7b, 0x69, 0xb4,
	0x46, 0x8e, 0x1a, 0x9e, 0x23, 0xca, 0x62, 0x95, 0xea, 0xc9, 0x79, 0x41, 0x3a, 0x3d, 0x2f, 0x48,
	0x67, 0xe7, 0x05, 0xe9, 0xc3, 0x45, 0x21, 0x71, 0x7a, 0x51, 0x48, 0x7c, 0xbf, 0x28, 0x24, 0x5e,
	0xad, 0x1b, 0x98, 0x35, 0xdb, 0x0d, 0x45, 0x23, 0xa6, 0xda, 0xb6, 0xf0, 0x01, 0xd6, 0x20, 0xc3,
	0xc4, 0x5a, 0x75, 0xbf, 0x23, 0x6c, 0xcd, 0x8e, 0x6c, 0x44, 0x1b, 0xe3, 0xde, 0x8f, 0x90, 0xf5,
	0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x97, 0x92, 0xc4, 0x58, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateStream defines a method to create a new stream
	CreateStream(ctx context.Context, in *MsgCreateStream, opts ...grpc.CallOption) (*MsgCreateStreamResponse, error)
	// ClaimStream defines a method for a receiver to claim from a stream
	ClaimStream(ctx context.Context, in *MsgClaimStream, opts ...grpc.CallOption) (*MsgClaimStreamResponse, error)
	// TopUpDeposit defines a method for senders to top up their streams
	TopUpDeposit(ctx context.Context, in *MsgTopUpDeposit, opts ...grpc.CallOption) (*MsgTopUpDepositResponse, error)
	// UpdateFlowRate defines a method to update a stream flow rate
	UpdateFlowRate(ctx context.Context, in *MsgUpdateFlowRate, opts ...grpc.CallOption) (*MsgUpdateFlowRateResponse, error)
	// CancelStream defines a method to cancel a stream
	CancelStream(ctx context.Context, in *MsgCancelStream, opts ...grpc.CallOption) (*MsgCancelStreamResponse, error)
	// UpdateParams defines an operation for updating the x/beacon module
	// parameters.
	// Since: cosmos-sdk 0.47
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateStream(ctx context.Context, in *MsgCreateStream, opts ...grpc.CallOption) (*MsgCreateStreamResponse, error) {
	out := new(MsgCreateStreamResponse)
	err := c.cc.Invoke(ctx, "/mainchain.stream.v1.Msg/CreateStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimStream(ctx context.Context, in *MsgClaimStream, opts ...grpc.CallOption) (*MsgClaimStreamResponse, error) {
	out := new(MsgClaimStreamResponse)
	err := c.cc.Invoke(ctx, "/mainchain.stream.v1.Msg/ClaimStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TopUpDeposit(ctx context.Context, in *MsgTopUpDeposit, opts ...grpc.CallOption) (*MsgTopUpDepositResponse, error) {
	out := new(MsgTopUpDepositResponse)
	err := c.cc.Invoke(ctx, "/mainchain.stream.v1.Msg/TopUpDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateFlowRate(ctx context.Context, in *MsgUpdateFlowRate, opts ...grpc.CallOption) (*MsgUpdateFlowRateResponse, error) {
	out := new(MsgUpdateFlowRateResponse)
	err := c.cc.Invoke(ctx, "/mainchain.stream.v1.Msg/UpdateFlowRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelStream(ctx context.Context, in *MsgCancelStream, opts ...grpc.CallOption) (*MsgCancelStreamResponse, error) {
	out := new(MsgCancelStreamResponse)
	err := c.cc.Invoke(ctx, "/mainchain.stream.v1.Msg/CancelStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/mainchain.stream.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateStream defines a method to create a new stream
	CreateStream(context.Context, *MsgCreateStream) (*MsgCreateStreamResponse, error)
	// ClaimStream defines a method for a receiver to claim from a stream
	ClaimStream(context.Context, *MsgClaimStream) (*MsgClaimStreamResponse, error)
	// TopUpDeposit defines a method for senders to top up their streams
	TopUpDeposit(context.Context, *MsgTopUpDeposit) (*MsgTopUpDepositResponse, error)
	// UpdateFlowRate defines a method to update a stream flow rate
	UpdateFlowRate(context.Context, *MsgUpdateFlowRate) (*MsgUpdateFlowRateResponse, error)
	// CancelStream defines a method to cancel a stream
	CancelStream(context.Context, *MsgCancelStream) (*MsgCancelStreamResponse, error)
	// UpdateParams defines an operation for updating the x/beacon module
	// parameters.
	// Since: cosmos-sdk 0.47
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateStream(ctx context.Context, req *MsgCreateStream) (*MsgCreateStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStream not implemented")
}
func (*UnimplementedMsgServer) ClaimStream(ctx context.Context, req *MsgClaimStream) (*MsgClaimStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimStream not implemented")
}
func (*UnimplementedMsgServer) TopUpDeposit(ctx context.Context, req *MsgTopUpDeposit) (*MsgTopUpDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopUpDeposit not implemented")
}
func (*UnimplementedMsgServer) UpdateFlowRate(ctx context.Context, req *MsgUpdateFlowRate) (*MsgUpdateFlowRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlowRate not implemented")
}
func (*UnimplementedMsgServer) CancelStream(ctx context.Context, req *MsgCancelStream) (*MsgCancelStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelStream not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateStream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.stream.v1.Msg/CreateStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateStream(ctx, req.(*MsgCreateStream))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimStream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.stream.v1.Msg/ClaimStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimStream(ctx, req.(*MsgClaimStream))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TopUpDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTopUpDeposit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TopUpDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.stream.v1.Msg/TopUpDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TopUpDeposit(ctx, req.(*MsgTopUpDeposit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateFlowRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateFlowRate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateFlowRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.stream.v1.Msg/UpdateFlowRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateFlowRate(ctx, req.(*MsgUpdateFlowRate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelStream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.stream.v1.Msg/CancelStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelStream(ctx, req.(*MsgCancelStream))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.stream.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mainchain.stream.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStream",
			Handler:    _Msg_CreateStream_Handler,
		},
		{
			MethodName: "ClaimStream",
			Handler:    _Msg_ClaimStream_Handler,
		},
		{
			MethodName: "TopUpDeposit",
			Handler:    _Msg_TopUpDeposit_Handler,
		},
		{
			MethodName: "UpdateFlowRate",
			Handler:    _Msg_UpdateFlowRate_Handler,
		},
		{
			MethodName: "CancelStream",
			Handler:    _Msg_CancelStream_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mainchain/stream/v1/tx.proto",
}

func (m *MsgCreateStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateStream) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateStream) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FlowRate != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FlowRate))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.Deposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateStreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateStreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateStreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StreamId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StreamId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimStream) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimStream) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if m.StreamId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StreamId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimStreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimStreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimStreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RemainingDeposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.ValidatorFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.StreamPayment.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.TotalClaimed.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgTopUpDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTopUpDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTopUpDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Deposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if m.StreamId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StreamId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgTopUpDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTopUpDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTopUpDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateFlowRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateFlowRate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateFlowRate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FlowRate != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FlowRate))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if m.StreamId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StreamId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateFlowRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateFlowRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateFlowRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelStream) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelStream) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if m.StreamId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StreamId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelStreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelStreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelStreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateStream) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Deposit.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.FlowRate != 0 {
		n += 1 + sovTx(uint64(m.FlowRate))
	}
	return n
}

func (m *MsgCreateStreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StreamId != 0 {
		n += 1 + sovTx(uint64(m.StreamId))
	}
	return n
}

func (m *MsgClaimStream) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StreamId != 0 {
		n += 1 + sovTx(uint64(m.StreamId))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimStreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalClaimed.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.StreamPayment.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.ValidatorFee.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.RemainingDeposit.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgTopUpDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StreamId != 0 {
		n += 1 + sovTx(uint64(m.StreamId))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Deposit.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgTopUpDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateFlowRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StreamId != 0 {
		n += 1 + sovTx(uint64(m.StreamId))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.FlowRate != 0 {
		n += 1 + sovTx(uint64(m.FlowRate))
	}
	return n
}

func (m *MsgUpdateFlowRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelStream) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StreamId != 0 {
		n += 1 + sovTx(uint64(m.StreamId))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelStreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowRate", wireType)
			}
			m.FlowRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowRate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateStreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			m.StreamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			m.StreamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimStreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalClaimed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalClaimed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamPayment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StreamPayment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RemainingDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTopUpDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTopUpDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTopUpDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			m.StreamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTopUpDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTopUpDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTopUpDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateFlowRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateFlowRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateFlowRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			m.StreamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlowRate", wireType)
			}
			m.FlowRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlowRate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateFlowRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateFlowRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateFlowRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			m.StreamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelStreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
