// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mainchain/beacon/v1/beacon.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Beacon struct {
	BeaconId        uint64 `protobuf:"varint,1,opt,name=beacon_id,json=beaconId,proto3" json:"beacon_id,omitempty"`
	Moniker         string `protobuf:"bytes,2,opt,name=moniker,proto3" json:"moniker,omitempty"`
	Name            string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	LastTimestampId uint64 `protobuf:"varint,4,opt,name=last_timestamp_id,json=lastTimestampId,proto3" json:"last_timestamp_id,omitempty"`
	Owner           string `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *Beacon) Reset()         { *m = Beacon{} }
func (m *Beacon) String() string { return proto.CompactTextString(m) }
func (*Beacon) ProtoMessage()    {}
func (*Beacon) Descriptor() ([]byte, []int) {
	return fileDescriptor_4006bd3edf0fdcf3, []int{0}
}
func (m *Beacon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Beacon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Beacon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Beacon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Beacon.Merge(m, src)
}
func (m *Beacon) XXX_Size() int {
	return m.Size()
}
func (m *Beacon) XXX_DiscardUnknown() {
	xxx_messageInfo_Beacon.DiscardUnknown(m)
}

var xxx_messageInfo_Beacon proto.InternalMessageInfo

func (m *Beacon) GetBeaconId() uint64 {
	if m != nil {
		return m.BeaconId
	}
	return 0
}

func (m *Beacon) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *Beacon) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Beacon) GetLastTimestampId() uint64 {
	if m != nil {
		return m.LastTimestampId
	}
	return 0
}

func (m *Beacon) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type BeaconTimestamp struct {
	TimestampId uint64 `protobuf:"varint,1,opt,name=timestamp_id,json=timestampId,proto3" json:"timestamp_id,omitempty"`
	SubmitTime  uint64 `protobuf:"varint,2,opt,name=submit_time,json=submitTime,proto3" json:"submit_time,omitempty"`
	Hash        string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *BeaconTimestamp) Reset()         { *m = BeaconTimestamp{} }
func (m *BeaconTimestamp) String() string { return proto.CompactTextString(m) }
func (*BeaconTimestamp) ProtoMessage()    {}
func (*BeaconTimestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_4006bd3edf0fdcf3, []int{1}
}
func (m *BeaconTimestamp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BeaconTimestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BeaconTimestamp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BeaconTimestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeaconTimestamp.Merge(m, src)
}
func (m *BeaconTimestamp) XXX_Size() int {
	return m.Size()
}
func (m *BeaconTimestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_BeaconTimestamp.DiscardUnknown(m)
}

var xxx_messageInfo_BeaconTimestamp proto.InternalMessageInfo

func (m *BeaconTimestamp) GetTimestampId() uint64 {
	if m != nil {
		return m.TimestampId
	}
	return 0
}

func (m *BeaconTimestamp) GetSubmitTime() uint64 {
	if m != nil {
		return m.SubmitTime
	}
	return 0
}

func (m *BeaconTimestamp) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type Params struct {
	FeeRegister uint64 `protobuf:"varint,1,opt,name=fee_register,json=feeRegister,proto3" json:"fee_register,omitempty"`
	FeeRecord   uint64 `protobuf:"varint,2,opt,name=fee_record,json=feeRecord,proto3" json:"fee_record,omitempty"`
	Denom       string `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_4006bd3edf0fdcf3, []int{2}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetFeeRegister() uint64 {
	if m != nil {
		return m.FeeRegister
	}
	return 0
}

func (m *Params) GetFeeRecord() uint64 {
	if m != nil {
		return m.FeeRecord
	}
	return 0
}

func (m *Params) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func init() {
	proto.RegisterType((*Beacon)(nil), "mainchain.beacon.v1.Beacon")
	proto.RegisterType((*BeaconTimestamp)(nil), "mainchain.beacon.v1.BeaconTimestamp")
	proto.RegisterType((*Params)(nil), "mainchain.beacon.v1.Params")
}

func init() { proto.RegisterFile("mainchain/beacon/v1/beacon.proto", fileDescriptor_4006bd3edf0fdcf3) }

var fileDescriptor_4006bd3edf0fdcf3 = []byte{
	// 343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x51, 0xc1, 0x4e, 0x32, 0x31,
	0x18, 0xa4, 0xff, 0xbf, 0xa0, 0x7c, 0x98, 0x10, 0x2b, 0x87, 0x8d, 0xc6, 0x15, 0x39, 0x11, 0x13,
	0xd9, 0x10, 0xde, 0x80, 0x1b, 0x07, 0x13, 0xb3, 0xf1, 0xe4, 0x05, 0xbb, 0xbb, 0x65, 0xb7, 0xd1,
	0xb6, 0xa4, 0x2d, 0xa8, 0x6f, 0xe1, 0xc5, 0x77, 0xf2, 0xc8, 0xd1, 0xa3, 0x81, 0x17, 0x31, 0x6d,
	0x77, 0x51, 0x6f, 0x33, 0xd3, 0xc9, 0xcc, 0x34, 0x1f, 0xf4, 0x39, 0x61, 0x22, 0x2b, 0x09, 0x13,
	0x71, 0x4a, 0x49, 0x26, 0x45, 0xbc, 0x1e, 0x57, 0x68, 0xb4, 0x54, 0xd2, 0x48, 0x7c, 0xb2, 0x77,
	0x8c, 0x2a, 0x7d, 0x3d, 0x3e, 0xed, 0x15, 0xb2, 0x90, 0xee, 0x3d, 0xb6, 0xc8, 0x5b, 0x07, 0xef,
	0x08, 0x5a, 0x53, 0xe7, 0xc1, 0x67, 0xd0, 0xf6, 0xee, 0x39, 0xcb, 0x43, 0xd4, 0x47, 0xc3, 0x20,
	0x39, 0xf4, 0xc2, 0x2c, 0xc7, 0x21, 0x1c, 0x70, 0x29, 0xd8, 0x23, 0x55, 0xe1, 0xbf, 0x3e, 0x1a,
	0xb6, 0x93, 0x9a, 0x62, 0x0c, 0x81, 0x20, 0x9c, 0x86, 0xff, 0x9d, 0xec, 0x30, 0xbe, 0x82, 0xe3,
	0x27, 0xa2, 0xcd, 0xdc, 0x30, 0x4e, 0xb5, 0x21, 0x7c, 0x69, 0x23, 0x03, 0x17, 0xd9, 0xb5, 0x0f,
	0x77, 0xb5, 0x3e, 0xcb, 0x71, 0x0f, 0x9a, 0xf2, 0x59, 0x50, 0x15, 0x36, 0x5d, 0x80, 0x27, 0x03,
	0x06, 0x5d, 0x3f, 0x6b, 0x6f, 0xc5, 0x97, 0x70, 0xf4, 0x27, 0xcf, 0x4f, 0xec, 0x98, 0x5f, 0x59,
	0x17, 0xd0, 0xd1, 0xab, 0x94, 0x33, 0xdf, 0xec, 0x96, 0x06, 0x09, 0x78, 0xc9, 0x06, 0xd9, 0xb1,
	0x25, 0xd1, 0x65, 0x3d, 0xd6, 0xe2, 0xc1, 0x03, 0xb4, 0x6e, 0x89, 0x22, 0x5c, 0xdb, 0x86, 0x05,
	0xa5, 0x73, 0x45, 0x0b, 0xa6, 0x0d, 0x55, 0x75, 0xc3, 0x82, 0xd2, 0xa4, 0x92, 0xf0, 0x39, 0x80,
	0xb7, 0x64, 0x52, 0xe5, 0x55, 0x41, 0xdb, 0x19, 0xac, 0x60, 0x3f, 0x93, 0x53, 0x21, 0x79, 0x55,
	0xe0, 0xc9, 0xf4, 0xe6, 0x63, 0x1b, 0xa1, 0xcd, 0x36, 0x42, 0x5f, 0xdb, 0x08, 0xbd, 0xed, 0xa2,
	0xc6, 0x66, 0x17, 0x35, 0x3e, 0x77, 0x51, 0xe3, 0x7e, 0x52, 0x30, 0x53, 0xae, 0xd2, 0x51, 0x26,
	0x79, 0xbc, 0x12, 0x6c, 0xc1, 0x32, 0x62, 0x98, 0x14, 0xd7, 0x96, 0xff, 0x9c, 0xf9, 0xa5, 0x3e,
	0xb4, 0x79, 0x5d, 0x52, 0x9d, 0xb6, 0xdc, 0xe9, 0x26, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdd,
	0x43, 0x02, 0x02, 0x09, 0x02, 0x00, 0x00,
}

func (m *Beacon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Beacon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Beacon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintBeacon(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x2a
	}
	if m.LastTimestampId != 0 {
		i = encodeVarintBeacon(dAtA, i, uint64(m.LastTimestampId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBeacon(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintBeacon(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0x12
	}
	if m.BeaconId != 0 {
		i = encodeVarintBeacon(dAtA, i, uint64(m.BeaconId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BeaconTimestamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeaconTimestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BeaconTimestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintBeacon(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SubmitTime != 0 {
		i = encodeVarintBeacon(dAtA, i, uint64(m.SubmitTime))
		i--
		dAtA[i] = 0x10
	}
	if m.TimestampId != 0 {
		i = encodeVarintBeacon(dAtA, i, uint64(m.TimestampId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintBeacon(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FeeRecord != 0 {
		i = encodeVarintBeacon(dAtA, i, uint64(m.FeeRecord))
		i--
		dAtA[i] = 0x10
	}
	if m.FeeRegister != 0 {
		i = encodeVarintBeacon(dAtA, i, uint64(m.FeeRegister))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBeacon(dAtA []byte, offset int, v uint64) int {
	offset -= sovBeacon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Beacon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeaconId != 0 {
		n += 1 + sovBeacon(uint64(m.BeaconId))
	}
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovBeacon(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBeacon(uint64(l))
	}
	if m.LastTimestampId != 0 {
		n += 1 + sovBeacon(uint64(m.LastTimestampId))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovBeacon(uint64(l))
	}
	return n
}

func (m *BeaconTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimestampId != 0 {
		n += 1 + sovBeacon(uint64(m.TimestampId))
	}
	if m.SubmitTime != 0 {
		n += 1 + sovBeacon(uint64(m.SubmitTime))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovBeacon(uint64(l))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FeeRegister != 0 {
		n += 1 + sovBeacon(uint64(m.FeeRegister))
	}
	if m.FeeRecord != 0 {
		n += 1 + sovBeacon(uint64(m.FeeRecord))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovBeacon(uint64(l))
	}
	return n
}

func sovBeacon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBeacon(x uint64) (n int) {
	return sovBeacon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Beacon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeacon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Beacon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Beacon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconId", wireType)
			}
			m.BeaconId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeacon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeaconId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeacon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeacon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeacon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeacon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeacon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeacon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTimestampId", wireType)
			}
			m.LastTimestampId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeacon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastTimestampId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeacon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeacon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeacon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeacon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBeacon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeaconTimestamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeacon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeaconTimestamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeaconTimestamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampId", wireType)
			}
			m.TimestampId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeacon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitTime", wireType)
			}
			m.SubmitTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeacon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubmitTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeacon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeacon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeacon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeacon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBeacon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBeacon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRegister", wireType)
			}
			m.FeeRegister = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeacon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeRegister |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRecord", wireType)
			}
			m.FeeRecord = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeacon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeRecord |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBeacon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBeacon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBeacon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBeacon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBeacon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBeacon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBeacon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBeacon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBeacon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBeacon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBeacon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBeacon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBeacon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBeacon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBeacon = fmt.Errorf("proto: unexpected end of group")
)
