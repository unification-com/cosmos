// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mainchain/beacon/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee9515dbea6afee0, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee9515dbea6afee0, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryBeaconRequest is the request type for the Query/Beacon RPC method
type QueryBeaconRequest struct {
	// beacon_id is the id of the beacon to query for
	BeaconId uint64 `protobuf:"varint,1,opt,name=beacon_id,json=beaconId,proto3" json:"beacon_id,omitempty"`
}

func (m *QueryBeaconRequest) Reset()         { *m = QueryBeaconRequest{} }
func (m *QueryBeaconRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBeaconRequest) ProtoMessage()    {}
func (*QueryBeaconRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee9515dbea6afee0, []int{2}
}
func (m *QueryBeaconRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBeaconRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBeaconRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBeaconRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBeaconRequest.Merge(m, src)
}
func (m *QueryBeaconRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBeaconRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBeaconRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBeaconRequest proto.InternalMessageInfo

func (m *QueryBeaconRequest) GetBeaconId() uint64 {
	if m != nil {
		return m.BeaconId
	}
	return 0
}

// QueryBeaconResponse is the response type for the Query/Beacon RPC method
type QueryBeaconResponse struct {
	Beacon *Beacon `protobuf:"bytes,1,opt,name=beacon,proto3" json:"beacon,omitempty"`
}

func (m *QueryBeaconResponse) Reset()         { *m = QueryBeaconResponse{} }
func (m *QueryBeaconResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBeaconResponse) ProtoMessage()    {}
func (*QueryBeaconResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee9515dbea6afee0, []int{3}
}
func (m *QueryBeaconResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBeaconResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBeaconResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBeaconResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBeaconResponse.Merge(m, src)
}
func (m *QueryBeaconResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBeaconResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBeaconResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBeaconResponse proto.InternalMessageInfo

func (m *QueryBeaconResponse) GetBeacon() *Beacon {
	if m != nil {
		return m.Beacon
	}
	return nil
}

// QueryBeaconTimestampRequest is the request type for the Query/BeaconTimestamp RPC method
type QueryBeaconTimestampRequest struct {
	// beacon_id is the id of the beacon to query for
	BeaconId uint64 `protobuf:"varint,1,opt,name=beacon_id,json=beaconId,proto3" json:"beacon_id,omitempty"`
	// timestamp_id is the id of the timestamp to query for
	TimestampId uint64 `protobuf:"varint,2,opt,name=timestamp_id,json=timestampId,proto3" json:"timestamp_id,omitempty"`
}

func (m *QueryBeaconTimestampRequest) Reset()         { *m = QueryBeaconTimestampRequest{} }
func (m *QueryBeaconTimestampRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBeaconTimestampRequest) ProtoMessage()    {}
func (*QueryBeaconTimestampRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee9515dbea6afee0, []int{4}
}
func (m *QueryBeaconTimestampRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBeaconTimestampRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBeaconTimestampRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBeaconTimestampRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBeaconTimestampRequest.Merge(m, src)
}
func (m *QueryBeaconTimestampRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBeaconTimestampRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBeaconTimestampRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBeaconTimestampRequest proto.InternalMessageInfo

func (m *QueryBeaconTimestampRequest) GetBeaconId() uint64 {
	if m != nil {
		return m.BeaconId
	}
	return 0
}

func (m *QueryBeaconTimestampRequest) GetTimestampId() uint64 {
	if m != nil {
		return m.TimestampId
	}
	return 0
}

// QueryBeaconTimestampResponse is the response type for the Query/BeaconTimestamp RPC method
type QueryBeaconTimestampResponse struct {
	Timestamp *BeaconTimestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	BeaconId  uint64           `protobuf:"varint,2,opt,name=beacon_id,json=beaconId,proto3" json:"beacon_id,omitempty"`
	Owner     string           `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryBeaconTimestampResponse) Reset()         { *m = QueryBeaconTimestampResponse{} }
func (m *QueryBeaconTimestampResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBeaconTimestampResponse) ProtoMessage()    {}
func (*QueryBeaconTimestampResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee9515dbea6afee0, []int{5}
}
func (m *QueryBeaconTimestampResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBeaconTimestampResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBeaconTimestampResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBeaconTimestampResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBeaconTimestampResponse.Merge(m, src)
}
func (m *QueryBeaconTimestampResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBeaconTimestampResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBeaconTimestampResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBeaconTimestampResponse proto.InternalMessageInfo

func (m *QueryBeaconTimestampResponse) GetTimestamp() *BeaconTimestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *QueryBeaconTimestampResponse) GetBeaconId() uint64 {
	if m != nil {
		return m.BeaconId
	}
	return 0
}

func (m *QueryBeaconTimestampResponse) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// QueryBeaconsFilteredRequest is the request type for the Query/BeaconsFiltered RPC method
type QueryBeaconsFilteredRequest struct {
	// moniker is the moniker of the beacon to search for
	Moniker string `protobuf:"bytes,1,opt,name=moniker,proto3" json:"moniker,omitempty"`
	// owner is an address to search for
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBeaconsFilteredRequest) Reset()         { *m = QueryBeaconsFilteredRequest{} }
func (m *QueryBeaconsFilteredRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBeaconsFilteredRequest) ProtoMessage()    {}
func (*QueryBeaconsFilteredRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee9515dbea6afee0, []int{6}
}
func (m *QueryBeaconsFilteredRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBeaconsFilteredRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBeaconsFilteredRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBeaconsFilteredRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBeaconsFilteredRequest.Merge(m, src)
}
func (m *QueryBeaconsFilteredRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBeaconsFilteredRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBeaconsFilteredRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBeaconsFilteredRequest proto.InternalMessageInfo

// QueryBeaconsFilteredResponse is the response type for the Query/BeaconsFiltered RPC method
type QueryBeaconsFilteredResponse struct {
	Beacons []Beacon `protobuf:"bytes,1,rep,name=beacons,proto3" json:"beacons"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBeaconsFilteredResponse) Reset()         { *m = QueryBeaconsFilteredResponse{} }
func (m *QueryBeaconsFilteredResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBeaconsFilteredResponse) ProtoMessage()    {}
func (*QueryBeaconsFilteredResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee9515dbea6afee0, []int{7}
}
func (m *QueryBeaconsFilteredResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBeaconsFilteredResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBeaconsFilteredResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBeaconsFilteredResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBeaconsFilteredResponse.Merge(m, src)
}
func (m *QueryBeaconsFilteredResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBeaconsFilteredResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBeaconsFilteredResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBeaconsFilteredResponse proto.InternalMessageInfo

func (m *QueryBeaconsFilteredResponse) GetBeacons() []Beacon {
	if m != nil {
		return m.Beacons
	}
	return nil
}

func (m *QueryBeaconsFilteredResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBeaconStorageRequest is the request type for the Query/BeaconStorage RPC method
type QueryBeaconStorageRequest struct {
	// beacon_id is the id of the beacon to query for
	BeaconId uint64 `protobuf:"varint,1,opt,name=beacon_id,json=beaconId,proto3" json:"beacon_id,omitempty"`
}

func (m *QueryBeaconStorageRequest) Reset()         { *m = QueryBeaconStorageRequest{} }
func (m *QueryBeaconStorageRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBeaconStorageRequest) ProtoMessage()    {}
func (*QueryBeaconStorageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee9515dbea6afee0, []int{8}
}
func (m *QueryBeaconStorageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBeaconStorageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBeaconStorageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBeaconStorageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBeaconStorageRequest.Merge(m, src)
}
func (m *QueryBeaconStorageRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBeaconStorageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBeaconStorageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBeaconStorageRequest proto.InternalMessageInfo

func (m *QueryBeaconStorageRequest) GetBeaconId() uint64 {
	if m != nil {
		return m.BeaconId
	}
	return 0
}

// QueryBeaconStorageResponse is the response type for the Query/BeaconStorage RPC method
type QueryBeaconStorageResponse struct {
	BeaconId uint64 `protobuf:"varint,1,opt,name=beacon_id,json=beaconId,proto3" json:"beacon_id,omitempty"`
	Owner    string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// current_limit is the current in-state storage limit for this beacon
	CurrentLimit uint64 `protobuf:"varint,3,opt,name=current_limit,json=currentLimit,proto3" json:"current_limit,omitempty"`
	// current_used is the number of in-state slots currently used
	CurrentUsed uint64 `protobuf:"varint,4,opt,name=current_used,json=currentUsed,proto3" json:"current_used,omitempty"`
	// max is the maximum possible slots a beacon can have, as defined by the beacon module params
	Max uint64 `protobuf:"varint,5,opt,name=max,proto3" json:"max,omitempty"`
	// max_purchasable is the maximum number a beacon can purchase without exceeding max
	MaxPurchasable uint64 `protobuf:"varint,6,opt,name=max_purchasable,json=maxPurchasable,proto3" json:"max_purchasable,omitempty"`
}

func (m *QueryBeaconStorageResponse) Reset()         { *m = QueryBeaconStorageResponse{} }
func (m *QueryBeaconStorageResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBeaconStorageResponse) ProtoMessage()    {}
func (*QueryBeaconStorageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee9515dbea6afee0, []int{9}
}
func (m *QueryBeaconStorageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBeaconStorageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBeaconStorageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBeaconStorageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBeaconStorageResponse.Merge(m, src)
}
func (m *QueryBeaconStorageResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBeaconStorageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBeaconStorageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBeaconStorageResponse proto.InternalMessageInfo

func (m *QueryBeaconStorageResponse) GetBeaconId() uint64 {
	if m != nil {
		return m.BeaconId
	}
	return 0
}

func (m *QueryBeaconStorageResponse) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryBeaconStorageResponse) GetCurrentLimit() uint64 {
	if m != nil {
		return m.CurrentLimit
	}
	return 0
}

func (m *QueryBeaconStorageResponse) GetCurrentUsed() uint64 {
	if m != nil {
		return m.CurrentUsed
	}
	return 0
}

func (m *QueryBeaconStorageResponse) GetMax() uint64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *QueryBeaconStorageResponse) GetMaxPurchasable() uint64 {
	if m != nil {
		return m.MaxPurchasable
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "mainchain.beacon.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "mainchain.beacon.v1.QueryParamsResponse")
	proto.RegisterType((*QueryBeaconRequest)(nil), "mainchain.beacon.v1.QueryBeaconRequest")
	proto.RegisterType((*QueryBeaconResponse)(nil), "mainchain.beacon.v1.QueryBeaconResponse")
	proto.RegisterType((*QueryBeaconTimestampRequest)(nil), "mainchain.beacon.v1.QueryBeaconTimestampRequest")
	proto.RegisterType((*QueryBeaconTimestampResponse)(nil), "mainchain.beacon.v1.QueryBeaconTimestampResponse")
	proto.RegisterType((*QueryBeaconsFilteredRequest)(nil), "mainchain.beacon.v1.QueryBeaconsFilteredRequest")
	proto.RegisterType((*QueryBeaconsFilteredResponse)(nil), "mainchain.beacon.v1.QueryBeaconsFilteredResponse")
	proto.RegisterType((*QueryBeaconStorageRequest)(nil), "mainchain.beacon.v1.QueryBeaconStorageRequest")
	proto.RegisterType((*QueryBeaconStorageResponse)(nil), "mainchain.beacon.v1.QueryBeaconStorageResponse")
}

func init() { proto.RegisterFile("mainchain/beacon/v1/query.proto", fileDescriptor_ee9515dbea6afee0) }

var fileDescriptor_ee9515dbea6afee0 = []byte{
	// 791 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0xbf, 0x6f, 0x13, 0x49,
	0x14, 0xc7, 0xbd, 0x8e, 0xe3, 0xc4, 0x93, 0xe4, 0x72, 0x9a, 0xa4, 0xf0, 0xd9, 0x39, 0x3b, 0xb7,
	0x89, 0xce, 0xa1, 0x60, 0x07, 0x27, 0x05, 0xbf, 0x1a, 0xe4, 0x22, 0x10, 0x04, 0x92, 0x31, 0xd0,
	0x20, 0x21, 0x6b, 0x6c, 0x0f, 0xce, 0x28, 0xde, 0x9d, 0xcd, 0xce, 0x3a, 0x38, 0x8a, 0x22, 0x21,
	0x2a, 0x0a, 0x0a, 0x24, 0x44, 0x87, 0x44, 0x0a, 0x24, 0xc4, 0x7f, 0x41, 0x99, 0x32, 0x82, 0x86,
	0x0a, 0xa1, 0x84, 0x82, 0x3f, 0x03, 0xed, 0xcc, 0xd8, 0xde, 0x75, 0x96, 0x5d, 0xd3, 0x79, 0xdf,
	0xbc, 0x1f, 0x9f, 0xef, 0xcc, 0x7b, 0xcf, 0xa0, 0x68, 0x62, 0x6a, 0x35, 0xb7, 0x31, 0xb5, 0x50,
	0x83, 0xe0, 0x26, 0xb3, 0xd0, 0x5e, 0x19, 0xed, 0x76, 0x89, 0xb3, 0x6f, 0xd8, 0x0e, 0x73, 0x19,
	0x5c, 0x18, 0x38, 0x18, 0xd2, 0xc1, 0xd8, 0x2b, 0xe7, 0x16, 0xdb, 0xac, 0xcd, 0xc4, 0x39, 0xf2,
	0x7e, 0x49, 0xd7, 0xdc, 0x52, 0x9b, 0xb1, 0x76, 0x87, 0x20, 0x6c, 0x53, 0x84, 0x2d, 0x8b, 0xb9,
	0xd8, 0xa5, 0xcc, 0xe2, 0xea, 0xd4, 0x68, 0x32, 0x6e, 0x32, 0x5e, 0xe7, 0xad, 0x1d, 0xd4, 0xc0,
	0x9c, 0xc8, 0x2a, 0x68, 0xaf, 0xdc, 0x20, 0x2e, 0x2e, 0x23, 0x1b, 0xb7, 0xa9, 0x25, 0x02, 0x94,
	0xff, 0x72, 0x18, 0x99, 0x42, 0x10, 0x1e, 0xfa, 0x22, 0x80, 0xf7, 0xbc, 0x1c, 0x55, 0xec, 0x60,
	0x93, 0xd7, 0xc8, 0x6e, 0x97, 0x70, 0x57, 0xaf, 0x82, 0x85, 0x80, 0x95, 0xdb, 0xcc, 0xe2, 0x04,
	0x5e, 0x05, 0x69, 0x5b, 0x58, 0xb2, 0xda, 0xb2, 0xb6, 0x36, 0xb3, 0x9e, 0x37, 0x42, 0x84, 0x19,
	0x32, 0xa8, 0x92, 0x3a, 0xfe, 0x56, 0x4c, 0xd4, 0x54, 0x80, 0x5e, 0x56, 0x75, 0x2a, 0xc2, 0x4d,
	0xd5, 0x81, 0x79, 0x90, 0x91, 0x71, 0x75, 0xda, 0x12, 0x39, 0x53, 0xb5, 0x69, 0x69, 0xd8, 0x6a,
	0xe9, 0xb7, 0x15, 0x44, 0x3f, 0x44, 0x41, 0x6c, 0x80, 0xb4, 0x74, 0x89, 0x84, 0x50, 0x41, 0xca,
	0x55, 0x7f, 0x0c, 0xf2, 0xbe, 0x5c, 0x0f, 0xa8, 0x49, 0xb8, 0x8b, 0x4d, 0x7b, 0x1c, 0x0e, 0xf8,
	0x1f, 0x98, 0x75, 0xfb, 0x01, 0xde, 0x79, 0x52, 0x9c, 0xcf, 0x0c, 0x6c, 0x5b, 0x2d, 0xfd, 0x8d,
	0x06, 0x96, 0xc2, 0xf3, 0x2b, 0xe8, 0x0a, 0xc8, 0x0c, 0xfc, 0x15, 0xf7, 0x6a, 0x04, 0xf7, 0x30,
	0xc1, 0x30, 0x2c, 0x08, 0x99, 0x1c, 0x81, 0x5c, 0x04, 0x93, 0xec, 0xa9, 0x45, 0x9c, 0xec, 0xc4,
	0xb2, 0xb6, 0x96, 0xa9, 0xc9, 0x0f, 0xfd, 0x9d, 0x16, 0xd0, 0xcd, 0x37, 0x69, 0xc7, 0x25, 0x0e,
	0x69, 0xf5, 0x75, 0x67, 0xc1, 0x94, 0xc9, 0x2c, 0xba, 0x43, 0x1c, 0x01, 0x95, 0xa9, 0xf5, 0x3f,
	0x87, 0xf9, 0x92, 0xbe, 0x7c, 0x70, 0x13, 0x80, 0x61, 0x8f, 0x89, 0x52, 0x33, 0xeb, 0xff, 0xab,
	0xa6, 0x34, 0xbc, 0x86, 0x34, 0x64, 0xdb, 0xab, 0x86, 0x34, 0xaa, 0xb8, 0x4d, 0x54, 0xad, 0x9a,
	0x2f, 0xf2, 0xda, 0xf4, 0x8b, 0xa3, 0x62, 0xe2, 0xe7, 0x51, 0x31, 0xa1, 0xbf, 0x0f, 0xde, 0x9c,
	0x8f, 0x50, 0xdd, 0xdc, 0x75, 0x30, 0x25, 0x45, 0x7a, 0x4d, 0x37, 0x11, 0xf3, 0xde, 0xaa, 0xe9,
	0xfa, 0x11, 0xf0, 0x66, 0x80, 0x37, 0x29, 0x78, 0x4b, 0xb1, 0xbc, 0xb2, 0xb2, 0x1f, 0x58, 0xbf,
	0x02, 0xfe, 0xf1, 0x51, 0xde, 0x77, 0x99, 0x33, 0x54, 0x16, 0xdd, 0xc5, 0x9f, 0x35, 0x90, 0x0b,
	0x0b, 0x55, 0xf2, 0x22, 0x3b, 0x2f, 0xfc, 0x11, 0x56, 0xc0, 0x5c, 0xb3, 0xeb, 0x38, 0xc4, 0x72,
	0xeb, 0x1d, 0x6a, 0x52, 0x57, 0xbc, 0x43, 0xaa, 0x36, 0xab, 0x8c, 0x77, 0x3c, 0x9b, 0xd7, 0xb4,
	0x7d, 0xa7, 0x2e, 0x27, 0xad, 0x6c, 0x4a, 0x36, 0xad, 0xb2, 0x3d, 0xe4, 0xa4, 0x05, 0xff, 0x06,
	0x13, 0x26, 0xee, 0x65, 0x27, 0xc5, 0x89, 0xf7, 0x13, 0x96, 0xc0, 0xbc, 0x89, 0x7b, 0x75, 0xbb,
	0xeb, 0x34, 0xb7, 0x31, 0xc7, 0x8d, 0x0e, 0xc9, 0xa6, 0xc5, 0xe9, 0x5f, 0x26, 0xee, 0x55, 0x87,
	0xd6, 0xf5, 0x0f, 0x69, 0x30, 0x29, 0x44, 0xc1, 0x67, 0x1a, 0x48, 0xcb, 0x81, 0x87, 0xa5, 0xd0,
	0x87, 0x39, 0xbf, 0x5d, 0x72, 0x6b, 0xf1, 0x8e, 0xf2, 0x76, 0xf4, 0x95, 0xe7, 0x5f, 0x7e, 0xbc,
	0x4e, 0xfe, 0x0b, 0xf3, 0x28, 0x6c, 0x91, 0xc9, 0xd5, 0x02, 0x5f, 0x6a, 0x20, 0x2d, 0x2f, 0x37,
	0x0a, 0x21, 0xb0, 0x78, 0xa2, 0x10, 0x82, 0xeb, 0x46, 0x47, 0x02, 0xe1, 0x02, 0x2c, 0xa1, 0xdf,
	0xef, 0x52, 0x74, 0x30, 0x78, 0xc3, 0x43, 0xf8, 0x49, 0x03, 0xf3, 0x23, 0x53, 0x0c, 0x2f, 0xc5,
	0x95, 0x1b, 0xdd, 0x48, 0xb9, 0xf2, 0x1f, 0x44, 0x28, 0xd2, 0x5b, 0x82, 0xb4, 0x02, 0x6f, 0x8c,
	0x49, 0x8a, 0x06, 0xab, 0x05, 0x1d, 0xf8, 0x17, 0xdc, 0x21, 0x7c, 0x3b, 0x90, 0x30, 0x98, 0xc7,
	0x78, 0x09, 0xa3, 0xcb, 0x25, 0x5e, 0xc2, 0xb9, 0x61, 0xd7, 0x57, 0x85, 0x84, 0x02, 0x5c, 0x8a,
	0x90, 0xc0, 0xe1, 0x47, 0x0d, 0xcc, 0x05, 0xa6, 0x09, 0x1a, 0x71, 0xa5, 0x82, 0x13, 0x9b, 0x43,
	0x63, 0xfb, 0x2b, 0xb0, 0xcb, 0x02, 0xac, 0x0c, 0xd1, 0xb8, 0x77, 0xcb, 0x65, 0x82, 0xca, 0xdd,
	0xe3, 0xd3, 0x82, 0x76, 0x72, 0x5a, 0xd0, 0xbe, 0x9f, 0x16, 0xb4, 0x57, 0x67, 0x85, 0xc4, 0xc9,
	0x59, 0x21, 0xf1, 0xf5, 0xac, 0x90, 0x78, 0xb4, 0xd1, 0xa6, 0xee, 0x76, 0xb7, 0x61, 0x34, 0x99,
	0x89, 0xba, 0x16, 0x7d, 0x42, 0x9b, 0x62, 0xd5, 0x5c, 0xf4, 0xbe, 0x87, 0x45, 0x7a, 0xfd, 0xe4,
	0xee, 0xbe, 0x4d, 0x78, 0x23, 0x2d, 0xfe, 0xb5, 0x37, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0x95,
	0xda, 0x65, 0x91, 0x73, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of x/beacon module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Beacon queries the metadata of a beacon.
	Beacon(ctx context.Context, in *QueryBeaconRequest, opts ...grpc.CallOption) (*QueryBeaconResponse, error)
	// BeaconTimestamp queries a timestamp of a beacon
	BeaconTimestamp(ctx context.Context, in *QueryBeaconTimestampRequest, opts ...grpc.CallOption) (*QueryBeaconTimestampResponse, error)
	// BeaconsFiltered queries all beacon metadata for given search parameters
	BeaconsFiltered(ctx context.Context, in *QueryBeaconsFilteredRequest, opts ...grpc.CallOption) (*QueryBeaconsFilteredResponse, error)
	BeaconStorage(ctx context.Context, in *QueryBeaconStorageRequest, opts ...grpc.CallOption) (*QueryBeaconStorageResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/mainchain.beacon.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Beacon(ctx context.Context, in *QueryBeaconRequest, opts ...grpc.CallOption) (*QueryBeaconResponse, error) {
	out := new(QueryBeaconResponse)
	err := c.cc.Invoke(ctx, "/mainchain.beacon.v1.Query/Beacon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BeaconTimestamp(ctx context.Context, in *QueryBeaconTimestampRequest, opts ...grpc.CallOption) (*QueryBeaconTimestampResponse, error) {
	out := new(QueryBeaconTimestampResponse)
	err := c.cc.Invoke(ctx, "/mainchain.beacon.v1.Query/BeaconTimestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BeaconsFiltered(ctx context.Context, in *QueryBeaconsFilteredRequest, opts ...grpc.CallOption) (*QueryBeaconsFilteredResponse, error) {
	out := new(QueryBeaconsFilteredResponse)
	err := c.cc.Invoke(ctx, "/mainchain.beacon.v1.Query/BeaconsFiltered", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BeaconStorage(ctx context.Context, in *QueryBeaconStorageRequest, opts ...grpc.CallOption) (*QueryBeaconStorageResponse, error) {
	out := new(QueryBeaconStorageResponse)
	err := c.cc.Invoke(ctx, "/mainchain.beacon.v1.Query/BeaconStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of x/beacon module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Beacon queries the metadata of a beacon.
	Beacon(context.Context, *QueryBeaconRequest) (*QueryBeaconResponse, error)
	// BeaconTimestamp queries a timestamp of a beacon
	BeaconTimestamp(context.Context, *QueryBeaconTimestampRequest) (*QueryBeaconTimestampResponse, error)
	// BeaconsFiltered queries all beacon metadata for given search parameters
	BeaconsFiltered(context.Context, *QueryBeaconsFilteredRequest) (*QueryBeaconsFilteredResponse, error)
	BeaconStorage(context.Context, *QueryBeaconStorageRequest) (*QueryBeaconStorageResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Beacon(ctx context.Context, req *QueryBeaconRequest) (*QueryBeaconResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Beacon not implemented")
}
func (*UnimplementedQueryServer) BeaconTimestamp(ctx context.Context, req *QueryBeaconTimestampRequest) (*QueryBeaconTimestampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeaconTimestamp not implemented")
}
func (*UnimplementedQueryServer) BeaconsFiltered(ctx context.Context, req *QueryBeaconsFilteredRequest) (*QueryBeaconsFilteredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeaconsFiltered not implemented")
}
func (*UnimplementedQueryServer) BeaconStorage(ctx context.Context, req *QueryBeaconStorageRequest) (*QueryBeaconStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeaconStorage not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.beacon.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Beacon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBeaconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Beacon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.beacon.v1.Query/Beacon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Beacon(ctx, req.(*QueryBeaconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BeaconTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBeaconTimestampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BeaconTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.beacon.v1.Query/BeaconTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BeaconTimestamp(ctx, req.(*QueryBeaconTimestampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BeaconsFiltered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBeaconsFilteredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BeaconsFiltered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.beacon.v1.Query/BeaconsFiltered",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BeaconsFiltered(ctx, req.(*QueryBeaconsFilteredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BeaconStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBeaconStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BeaconStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.beacon.v1.Query/BeaconStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BeaconStorage(ctx, req.(*QueryBeaconStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mainchain.beacon.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Beacon",
			Handler:    _Query_Beacon_Handler,
		},
		{
			MethodName: "BeaconTimestamp",
			Handler:    _Query_BeaconTimestamp_Handler,
		},
		{
			MethodName: "BeaconsFiltered",
			Handler:    _Query_BeaconsFiltered_Handler,
		},
		{
			MethodName: "BeaconStorage",
			Handler:    _Query_BeaconStorage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mainchain/beacon/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBeaconRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBeaconRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBeaconRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BeaconId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BeaconId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBeaconResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBeaconResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBeaconResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Beacon != nil {
		{
			size, err := m.Beacon.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBeaconTimestampRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBeaconTimestampRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBeaconTimestampRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimestampId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TimestampId))
		i--
		dAtA[i] = 0x10
	}
	if m.BeaconId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BeaconId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBeaconTimestampResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBeaconTimestampResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBeaconTimestampResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BeaconId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BeaconId))
		i--
		dAtA[i] = 0x10
	}
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBeaconsFilteredRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBeaconsFilteredRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBeaconsFilteredRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBeaconsFilteredResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBeaconsFilteredResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBeaconsFilteredResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Beacons) > 0 {
		for iNdEx := len(m.Beacons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Beacons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBeaconStorageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBeaconStorageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBeaconStorageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BeaconId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BeaconId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBeaconStorageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBeaconStorageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBeaconStorageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxPurchasable != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MaxPurchasable))
		i--
		dAtA[i] = 0x30
	}
	if m.Max != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Max))
		i--
		dAtA[i] = 0x28
	}
	if m.CurrentUsed != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrentUsed))
		i--
		dAtA[i] = 0x20
	}
	if m.CurrentLimit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrentLimit))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.BeaconId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BeaconId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBeaconRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeaconId != 0 {
		n += 1 + sovQuery(uint64(m.BeaconId))
	}
	return n
}

func (m *QueryBeaconResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Beacon != nil {
		l = m.Beacon.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBeaconTimestampRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeaconId != 0 {
		n += 1 + sovQuery(uint64(m.BeaconId))
	}
	if m.TimestampId != 0 {
		n += 1 + sovQuery(uint64(m.TimestampId))
	}
	return n
}

func (m *QueryBeaconTimestampResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BeaconId != 0 {
		n += 1 + sovQuery(uint64(m.BeaconId))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBeaconsFilteredRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBeaconsFilteredResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Beacons) > 0 {
		for _, e := range m.Beacons {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBeaconStorageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeaconId != 0 {
		n += 1 + sovQuery(uint64(m.BeaconId))
	}
	return n
}

func (m *QueryBeaconStorageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeaconId != 0 {
		n += 1 + sovQuery(uint64(m.BeaconId))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.CurrentLimit != 0 {
		n += 1 + sovQuery(uint64(m.CurrentLimit))
	}
	if m.CurrentUsed != 0 {
		n += 1 + sovQuery(uint64(m.CurrentUsed))
	}
	if m.Max != 0 {
		n += 1 + sovQuery(uint64(m.Max))
	}
	if m.MaxPurchasable != 0 {
		n += 1 + sovQuery(uint64(m.MaxPurchasable))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBeaconRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBeaconRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBeaconRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconId", wireType)
			}
			m.BeaconId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeaconId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBeaconResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBeaconResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBeaconResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beacon", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Beacon == nil {
				m.Beacon = &Beacon{}
			}
			if err := m.Beacon.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBeaconTimestampRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBeaconTimestampRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBeaconTimestampRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconId", wireType)
			}
			m.BeaconId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeaconId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampId", wireType)
			}
			m.TimestampId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBeaconTimestampResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBeaconTimestampResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBeaconTimestampResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &BeaconTimestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconId", wireType)
			}
			m.BeaconId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeaconId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBeaconsFilteredRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBeaconsFilteredRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBeaconsFilteredRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBeaconsFilteredResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBeaconsFilteredResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBeaconsFilteredResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beacons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Beacons = append(m.Beacons, Beacon{})
			if err := m.Beacons[len(m.Beacons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBeaconStorageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBeaconStorageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBeaconStorageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconId", wireType)
			}
			m.BeaconId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeaconId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBeaconStorageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBeaconStorageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBeaconStorageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconId", wireType)
			}
			m.BeaconId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeaconId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentLimit", wireType)
			}
			m.CurrentLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUsed", wireType)
			}
			m.CurrentUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			m.Max = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Max |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPurchasable", wireType)
			}
			m.MaxPurchasable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPurchasable |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
