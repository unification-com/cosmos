// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mainchain/beacon/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRegisterBeacon represents a message to register a new beacon
type MsgRegisterBeacon struct {
	// moniker is a short identifier for a beacon
	Moniker string `protobuf:"bytes,1,opt,name=moniker,proto3" json:"moniker,omitempty"`
	// name is a long name for a beacon
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// owner is the address of the owner of the beacon
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *MsgRegisterBeacon) Reset()         { *m = MsgRegisterBeacon{} }
func (m *MsgRegisterBeacon) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterBeacon) ProtoMessage()    {}
func (*MsgRegisterBeacon) Descriptor() ([]byte, []int) {
	return fileDescriptor_e58884c800f582f9, []int{0}
}
func (m *MsgRegisterBeacon) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterBeacon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterBeacon.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterBeacon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterBeacon.Merge(m, src)
}
func (m *MsgRegisterBeacon) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterBeacon) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterBeacon.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterBeacon proto.InternalMessageInfo

// MsgRegisterBeaconResponse defines the Msg/RegisterBeacon response type.
type MsgRegisterBeaconResponse struct {
	// beacon_id is the id of the new beacon
	BeaconId uint64 `protobuf:"varint,1,opt,name=beacon_id,json=beaconId,proto3" json:"beacon_id,omitempty"`
}

func (m *MsgRegisterBeaconResponse) Reset()         { *m = MsgRegisterBeaconResponse{} }
func (m *MsgRegisterBeaconResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterBeaconResponse) ProtoMessage()    {}
func (*MsgRegisterBeaconResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e58884c800f582f9, []int{1}
}
func (m *MsgRegisterBeaconResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterBeaconResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterBeaconResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterBeaconResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterBeaconResponse.Merge(m, src)
}
func (m *MsgRegisterBeaconResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterBeaconResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterBeaconResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterBeaconResponse proto.InternalMessageInfo

func (m *MsgRegisterBeaconResponse) GetBeaconId() uint64 {
	if m != nil {
		return m.BeaconId
	}
	return 0
}

// MsgRecordBeaconTimestamp represents a message to record a timestamp for a registered beacon
type MsgRecordBeaconTimestamp struct {
	// beacon_id is the id of the beacon the timestamp is being submitted for
	BeaconId uint64 `protobuf:"varint,1,opt,name=beacon_id,json=beaconId,proto3" json:"beacon_id,omitempty"`
	// hash is the hash or data being submitted
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// submit_time is a unix epoch value of the submission time
	SubmitTime uint64 `protobuf:"varint,3,opt,name=submit_time,json=submitTime,proto3" json:"submit_time,omitempty"`
	// owner is the address of the owner of the beacon
	Owner string `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *MsgRecordBeaconTimestamp) Reset()         { *m = MsgRecordBeaconTimestamp{} }
func (m *MsgRecordBeaconTimestamp) String() string { return proto.CompactTextString(m) }
func (*MsgRecordBeaconTimestamp) ProtoMessage()    {}
func (*MsgRecordBeaconTimestamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e58884c800f582f9, []int{2}
}
func (m *MsgRecordBeaconTimestamp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRecordBeaconTimestamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRecordBeaconTimestamp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRecordBeaconTimestamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRecordBeaconTimestamp.Merge(m, src)
}
func (m *MsgRecordBeaconTimestamp) XXX_Size() int {
	return m.Size()
}
func (m *MsgRecordBeaconTimestamp) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRecordBeaconTimestamp.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRecordBeaconTimestamp proto.InternalMessageInfo

// MsgRecordBeaconTimestampResponse defines the Msg/RecordBeacon response type.
type MsgRecordBeaconTimestampResponse struct {
	// beacon_id is the id of the beacon
	BeaconId uint64 `protobuf:"varint,1,opt,name=beacon_id,json=beaconId,proto3" json:"beacon_id,omitempty"`
	// timestamp_id is the id of the new timestamp
	TimestampId uint64 `protobuf:"varint,2,opt,name=timestamp_id,json=timestampId,proto3" json:"timestamp_id,omitempty"`
}

func (m *MsgRecordBeaconTimestampResponse) Reset()         { *m = MsgRecordBeaconTimestampResponse{} }
func (m *MsgRecordBeaconTimestampResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRecordBeaconTimestampResponse) ProtoMessage()    {}
func (*MsgRecordBeaconTimestampResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e58884c800f582f9, []int{3}
}
func (m *MsgRecordBeaconTimestampResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRecordBeaconTimestampResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRecordBeaconTimestampResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRecordBeaconTimestampResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRecordBeaconTimestampResponse.Merge(m, src)
}
func (m *MsgRecordBeaconTimestampResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRecordBeaconTimestampResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRecordBeaconTimestampResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRecordBeaconTimestampResponse proto.InternalMessageInfo

func (m *MsgRecordBeaconTimestampResponse) GetBeaconId() uint64 {
	if m != nil {
		return m.BeaconId
	}
	return 0
}

func (m *MsgRecordBeaconTimestampResponse) GetTimestampId() uint64 {
	if m != nil {
		return m.TimestampId
	}
	return 0
}

type MsgPurchaseBeaconStateStorage struct {
	// beacon_id is the id of the beacon the storage is being purchased for
	BeaconId uint64 `protobuf:"varint,1,opt,name=beacon_id,json=beaconId,proto3" json:"beacon_id,omitempty"`
	// number is the number of state storage spaces to purchase
	Number uint64 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	// owner is the address of the owner of the beacon
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *MsgPurchaseBeaconStateStorage) Reset()         { *m = MsgPurchaseBeaconStateStorage{} }
func (m *MsgPurchaseBeaconStateStorage) String() string { return proto.CompactTextString(m) }
func (*MsgPurchaseBeaconStateStorage) ProtoMessage()    {}
func (*MsgPurchaseBeaconStateStorage) Descriptor() ([]byte, []int) {
	return fileDescriptor_e58884c800f582f9, []int{4}
}
func (m *MsgPurchaseBeaconStateStorage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPurchaseBeaconStateStorage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPurchaseBeaconStateStorage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPurchaseBeaconStateStorage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPurchaseBeaconStateStorage.Merge(m, src)
}
func (m *MsgPurchaseBeaconStateStorage) XXX_Size() int {
	return m.Size()
}
func (m *MsgPurchaseBeaconStateStorage) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPurchaseBeaconStateStorage.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPurchaseBeaconStateStorage proto.InternalMessageInfo

type MsgPurchaseBeaconStateStorageResponse struct {
	// beacon_id is the id of the beacon the storage is being purchased for
	BeaconId uint64 `protobuf:"varint,1,opt,name=beacon_id,json=beaconId,proto3" json:"beacon_id,omitempty"`
	// number_purchased is the number of state storage spaces purchased
	NumberPurchased uint64 `protobuf:"varint,2,opt,name=number_purchased,json=numberPurchased,proto3" json:"number_purchased,omitempty"`
	// num_can_purchase is the number of remaining slots available for purchase
	NumCanPurchase uint64 `protobuf:"varint,3,opt,name=num_can_purchase,json=numCanPurchase,proto3" json:"num_can_purchase,omitempty"`
}

func (m *MsgPurchaseBeaconStateStorageResponse) Reset()         { *m = MsgPurchaseBeaconStateStorageResponse{} }
func (m *MsgPurchaseBeaconStateStorageResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPurchaseBeaconStateStorageResponse) ProtoMessage()    {}
func (*MsgPurchaseBeaconStateStorageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e58884c800f582f9, []int{5}
}
func (m *MsgPurchaseBeaconStateStorageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPurchaseBeaconStateStorageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPurchaseBeaconStateStorageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPurchaseBeaconStateStorageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPurchaseBeaconStateStorageResponse.Merge(m, src)
}
func (m *MsgPurchaseBeaconStateStorageResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPurchaseBeaconStateStorageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPurchaseBeaconStateStorageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPurchaseBeaconStateStorageResponse proto.InternalMessageInfo

func (m *MsgPurchaseBeaconStateStorageResponse) GetBeaconId() uint64 {
	if m != nil {
		return m.BeaconId
	}
	return 0
}

func (m *MsgPurchaseBeaconStateStorageResponse) GetNumberPurchased() uint64 {
	if m != nil {
		return m.NumberPurchased
	}
	return 0
}

func (m *MsgPurchaseBeaconStateStorageResponse) GetNumCanPurchase() uint64 {
	if m != nil {
		return m.NumCanPurchase
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgRegisterBeacon)(nil), "mainchain.beacon.v1.MsgRegisterBeacon")
	proto.RegisterType((*MsgRegisterBeaconResponse)(nil), "mainchain.beacon.v1.MsgRegisterBeaconResponse")
	proto.RegisterType((*MsgRecordBeaconTimestamp)(nil), "mainchain.beacon.v1.MsgRecordBeaconTimestamp")
	proto.RegisterType((*MsgRecordBeaconTimestampResponse)(nil), "mainchain.beacon.v1.MsgRecordBeaconTimestampResponse")
	proto.RegisterType((*MsgPurchaseBeaconStateStorage)(nil), "mainchain.beacon.v1.MsgPurchaseBeaconStateStorage")
	proto.RegisterType((*MsgPurchaseBeaconStateStorageResponse)(nil), "mainchain.beacon.v1.MsgPurchaseBeaconStateStorageResponse")
}

func init() { proto.RegisterFile("mainchain/beacon/v1/tx.proto", fileDescriptor_e58884c800f582f9) }

var fileDescriptor_e58884c800f582f9 = []byte{
	// 497 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xb1, 0x6e, 0xd4, 0x40,
	0x10, 0xb5, 0x2f, 0x47, 0x48, 0x26, 0x28, 0xc0, 0x12, 0x90, 0x31, 0xe0, 0x3b, 0x4e, 0x02, 0x85,
	0x22, 0xb6, 0x92, 0x08, 0x09, 0xa5, 0x0c, 0x55, 0x8a, 0x93, 0x90, 0x43, 0x45, 0x73, 0x5a, 0xdb,
	0x8b, 0xbd, 0x42, 0xbb, 0x6b, 0x79, 0xd7, 0x21, 0x14, 0xf4, 0x14, 0x29, 0x68, 0xe9, 0xf2, 0x39,
	0x94, 0x29, 0x29, 0xd1, 0x5d, 0xc3, 0x4f, 0x20, 0x21, 0xef, 0xda, 0x8e, 0x44, 0x7c, 0x97, 0x4b,
	0xb7, 0x33, 0xf3, 0xde, 0xbc, 0x79, 0xf2, 0x78, 0xe0, 0x29, 0xc3, 0x94, 0xc7, 0x19, 0xa6, 0x3c,
	0x88, 0x08, 0x8e, 0x05, 0x0f, 0x4e, 0x76, 0x03, 0x75, 0xea, 0xe7, 0x85, 0x50, 0x02, 0x3d, 0x68,
	0xab, 0xbe, 0xa9, 0xfa, 0x27, 0xbb, 0xee, 0x56, 0x2a, 0x52, 0xa1, 0xeb, 0x41, 0xf5, 0x32, 0x50,
	0x77, 0xd8, 0xd5, 0xa8, 0x26, 0x69, 0xc4, 0x08, 0xc3, 0xfd, 0xb1, 0x4c, 0x43, 0x92, 0x52, 0xa9,
	0x48, 0x71, 0xa8, 0x4b, 0xc8, 0x81, 0xdb, 0x4c, 0x70, 0xfa, 0x89, 0x14, 0x8e, 0x3d, 0xb4, 0xb7,
	0xd7, 0xc3, 0x26, 0x44, 0x08, 0xfa, 0x1c, 0x33, 0xe2, 0xf4, 0x74, 0x5a, 0xbf, 0xd1, 0x16, 0xdc,
	0x12, 0x9f, 0x39, 0x29, 0x9c, 0x15, 0x9d, 0x34, 0xc1, 0xc1, 0xda, 0xb7, 0xf3, 0x81, 0xf5, 0xe7,
	0x7c, 0x60, 0x8d, 0xde, 0xc0, 0xe3, 0x2b, 0x12, 0x21, 0x91, 0xb9, 0xe0, 0x92, 0xa0, 0x27, 0xb0,
	0x6e, 0xe6, 0x99, 0xd0, 0x44, 0x8b, 0xf5, 0xc3, 0x35, 0x93, 0x38, 0x4a, 0x46, 0x67, 0x36, 0x38,
	0x9a, 0x1a, 0x8b, 0x22, 0x31, 0xc4, 0xf7, 0x94, 0x11, 0xa9, 0x30, 0xcb, 0x17, 0x32, 0xab, 0x39,
	0x33, 0x2c, 0xb3, 0x66, 0xce, 0xea, 0x8d, 0x06, 0xb0, 0x21, 0xcb, 0x88, 0x51, 0x35, 0x51, 0x94,
	0x11, 0x3d, 0x6d, 0x3f, 0x04, 0x93, 0xaa, 0xda, 0x5e, 0x1a, 0xe9, 0x77, 0x1b, 0x89, 0x60, 0x38,
	0x6f, 0x9a, 0xa5, 0xfc, 0xa0, 0xe7, 0x70, 0x47, 0x35, 0x8c, 0xaa, 0xde, 0xd3, 0xf5, 0x8d, 0x36,
	0x77, 0x94, 0x8c, 0x14, 0x3c, 0x1b, 0xcb, 0xf4, 0x5d, 0x59, 0xc4, 0x19, 0x96, 0xc4, 0xa8, 0x1c,
	0x2b, 0xac, 0xc8, 0xb1, 0x12, 0x05, 0x4e, 0xaf, 0x11, 0x78, 0x04, 0xab, 0xbc, 0x64, 0x11, 0x29,
	0xea, 0xd6, 0x75, 0x74, 0xed, 0x27, 0xfa, 0x61, 0xc3, 0x8b, 0x85, 0xb2, 0xcb, 0xf9, 0x7b, 0x05,
	0xf7, 0x8c, 0xe0, 0x24, 0xaf, 0x3b, 0x35, 0x1e, 0xef, 0x9a, 0x7c, 0x23, 0x90, 0xa0, 0x6d, 0x0d,
	0x9d, 0xc4, 0x98, 0xb7, 0xd8, 0xfa, 0x8b, 0x6c, 0xf2, 0x92, 0xbd, 0xc5, 0xbc, 0x81, 0xee, 0xfd,
	0xed, 0xc1, 0xca, 0x58, 0xa6, 0x28, 0x83, 0xcd, 0xff, 0xd6, 0xf4, 0xa5, 0xdf, 0xf1, 0x27, 0xf8,
	0x57, 0x76, 0xcd, 0xf5, 0x97, 0xc3, 0xb5, 0x1e, 0xbf, 0xc2, 0xc3, 0xee, 0x95, 0xdb, 0x99, 0xdf,
	0xa8, 0x03, 0xee, 0xbe, 0xbe, 0x11, 0xbc, 0x95, 0x3f, 0xb3, 0xc1, 0x5d, 0xb0, 0x00, 0x7b, 0xf3,
	0xba, 0xce, 0xe7, 0xb8, 0x07, 0x37, 0xe7, 0x34, 0xe3, 0x1c, 0x8e, 0x7f, 0x4e, 0x3d, 0xfb, 0x62,
	0xea, 0xd9, 0xbf, 0xa7, 0x9e, 0xfd, 0x7d, 0xe6, 0x59, 0x17, 0x33, 0xcf, 0xfa, 0x35, 0xf3, 0xac,
	0x0f, 0xfb, 0x29, 0x55, 0x59, 0x19, 0xf9, 0xb1, 0x60, 0x41, 0xc9, 0xe9, 0x47, 0x1a, 0x63, 0x45,
	0x05, 0xdf, 0xa9, 0xe2, 0xcb, 0xc3, 0x73, 0xda, 0x9c, 0x1e, 0xf5, 0x25, 0x27, 0x32, 0x5a, 0xd5,
	0x77, 0x67, 0xff, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb3, 0x00, 0xde, 0xd8, 0xe4, 0x04, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RegisterBeacon defines a method to register a new beacon
	RegisterBeacon(ctx context.Context, in *MsgRegisterBeacon, opts ...grpc.CallOption) (*MsgRegisterBeaconResponse, error)
	// RecordBeaconTimestamp defines a method to record a timestamp for a registered beacon
	RecordBeaconTimestamp(ctx context.Context, in *MsgRecordBeaconTimestamp, opts ...grpc.CallOption) (*MsgRecordBeaconTimestampResponse, error)
	// PurchaseBeaconStateStorage defines the method to purchase more state storage
	PurchaseBeaconStateStorage(ctx context.Context, in *MsgPurchaseBeaconStateStorage, opts ...grpc.CallOption) (*MsgPurchaseBeaconStateStorageResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterBeacon(ctx context.Context, in *MsgRegisterBeacon, opts ...grpc.CallOption) (*MsgRegisterBeaconResponse, error) {
	out := new(MsgRegisterBeaconResponse)
	err := c.cc.Invoke(ctx, "/mainchain.beacon.v1.Msg/RegisterBeacon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RecordBeaconTimestamp(ctx context.Context, in *MsgRecordBeaconTimestamp, opts ...grpc.CallOption) (*MsgRecordBeaconTimestampResponse, error) {
	out := new(MsgRecordBeaconTimestampResponse)
	err := c.cc.Invoke(ctx, "/mainchain.beacon.v1.Msg/RecordBeaconTimestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PurchaseBeaconStateStorage(ctx context.Context, in *MsgPurchaseBeaconStateStorage, opts ...grpc.CallOption) (*MsgPurchaseBeaconStateStorageResponse, error) {
	out := new(MsgPurchaseBeaconStateStorageResponse)
	err := c.cc.Invoke(ctx, "/mainchain.beacon.v1.Msg/PurchaseBeaconStateStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RegisterBeacon defines a method to register a new beacon
	RegisterBeacon(context.Context, *MsgRegisterBeacon) (*MsgRegisterBeaconResponse, error)
	// RecordBeaconTimestamp defines a method to record a timestamp for a registered beacon
	RecordBeaconTimestamp(context.Context, *MsgRecordBeaconTimestamp) (*MsgRecordBeaconTimestampResponse, error)
	// PurchaseBeaconStateStorage defines the method to purchase more state storage
	PurchaseBeaconStateStorage(context.Context, *MsgPurchaseBeaconStateStorage) (*MsgPurchaseBeaconStateStorageResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterBeacon(ctx context.Context, req *MsgRegisterBeacon) (*MsgRegisterBeaconResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterBeacon not implemented")
}
func (*UnimplementedMsgServer) RecordBeaconTimestamp(ctx context.Context, req *MsgRecordBeaconTimestamp) (*MsgRecordBeaconTimestampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordBeaconTimestamp not implemented")
}
func (*UnimplementedMsgServer) PurchaseBeaconStateStorage(ctx context.Context, req *MsgPurchaseBeaconStateStorage) (*MsgPurchaseBeaconStateStorageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseBeaconStateStorage not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterBeacon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterBeacon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterBeacon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.beacon.v1.Msg/RegisterBeacon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterBeacon(ctx, req.(*MsgRegisterBeacon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RecordBeaconTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRecordBeaconTimestamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RecordBeaconTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.beacon.v1.Msg/RecordBeaconTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RecordBeaconTimestamp(ctx, req.(*MsgRecordBeaconTimestamp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PurchaseBeaconStateStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPurchaseBeaconStateStorage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PurchaseBeaconStateStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mainchain.beacon.v1.Msg/PurchaseBeaconStateStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PurchaseBeaconStateStorage(ctx, req.(*MsgPurchaseBeaconStateStorage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mainchain.beacon.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterBeacon",
			Handler:    _Msg_RegisterBeacon_Handler,
		},
		{
			MethodName: "RecordBeaconTimestamp",
			Handler:    _Msg_RecordBeaconTimestamp_Handler,
		},
		{
			MethodName: "PurchaseBeaconStateStorage",
			Handler:    _Msg_PurchaseBeaconStateStorage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mainchain/beacon/v1/tx.proto",
}

func (m *MsgRegisterBeacon) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterBeacon) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterBeacon) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterBeaconResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterBeaconResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterBeaconResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BeaconId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BeaconId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgRecordBeaconTimestamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRecordBeaconTimestamp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRecordBeaconTimestamp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if m.SubmitTime != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SubmitTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if m.BeaconId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BeaconId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgRecordBeaconTimestampResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRecordBeaconTimestampResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRecordBeaconTimestampResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimestampId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TimestampId))
		i--
		dAtA[i] = 0x10
	}
	if m.BeaconId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BeaconId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgPurchaseBeaconStateStorage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPurchaseBeaconStateStorage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPurchaseBeaconStateStorage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Number != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x10
	}
	if m.BeaconId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BeaconId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgPurchaseBeaconStateStorageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPurchaseBeaconStateStorageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPurchaseBeaconStateStorageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumCanPurchase != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NumCanPurchase))
		i--
		dAtA[i] = 0x18
	}
	if m.NumberPurchased != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NumberPurchased))
		i--
		dAtA[i] = 0x10
	}
	if m.BeaconId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BeaconId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterBeacon) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterBeaconResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeaconId != 0 {
		n += 1 + sovTx(uint64(m.BeaconId))
	}
	return n
}

func (m *MsgRecordBeaconTimestamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeaconId != 0 {
		n += 1 + sovTx(uint64(m.BeaconId))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SubmitTime != 0 {
		n += 1 + sovTx(uint64(m.SubmitTime))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRecordBeaconTimestampResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeaconId != 0 {
		n += 1 + sovTx(uint64(m.BeaconId))
	}
	if m.TimestampId != 0 {
		n += 1 + sovTx(uint64(m.TimestampId))
	}
	return n
}

func (m *MsgPurchaseBeaconStateStorage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeaconId != 0 {
		n += 1 + sovTx(uint64(m.BeaconId))
	}
	if m.Number != 0 {
		n += 1 + sovTx(uint64(m.Number))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPurchaseBeaconStateStorageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeaconId != 0 {
		n += 1 + sovTx(uint64(m.BeaconId))
	}
	if m.NumberPurchased != 0 {
		n += 1 + sovTx(uint64(m.NumberPurchased))
	}
	if m.NumCanPurchase != 0 {
		n += 1 + sovTx(uint64(m.NumCanPurchase))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterBeacon) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterBeacon: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterBeacon: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterBeaconResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterBeaconResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterBeaconResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconId", wireType)
			}
			m.BeaconId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeaconId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRecordBeaconTimestamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRecordBeaconTimestamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRecordBeaconTimestamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconId", wireType)
			}
			m.BeaconId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeaconId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitTime", wireType)
			}
			m.SubmitTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubmitTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRecordBeaconTimestampResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRecordBeaconTimestampResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRecordBeaconTimestampResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconId", wireType)
			}
			m.BeaconId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeaconId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampId", wireType)
			}
			m.TimestampId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPurchaseBeaconStateStorage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPurchaseBeaconStateStorage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPurchaseBeaconStateStorage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconId", wireType)
			}
			m.BeaconId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeaconId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPurchaseBeaconStateStorageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPurchaseBeaconStateStorageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPurchaseBeaconStateStorageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconId", wireType)
			}
			m.BeaconId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeaconId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberPurchased", wireType)
			}
			m.NumberPurchased = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberPurchased |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumCanPurchase", wireType)
			}
			m.NumCanPurchase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumCanPurchase |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
